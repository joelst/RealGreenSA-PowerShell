#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

Returns a summary of service amount and allocations for the services specified.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER ServiceID


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ServiceAllocationRecord[]
#>
function Invoke-RGSAServiceAllocationsPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${ServiceID},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSAServiceAllocationsPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Service/Allocations'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling serviceAllocationsPost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarBodyParameter = $ServiceID | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ServiceAllocationRecord[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Returns a list of services that match the provided criteria.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER ID
No description available.

.PARAMETER CustomerNumber
No description available.

.PARAMETER CustomerCompanyID
No description available.

.PARAMETER ServiceYear
No description available.

.PARAMETER ProgramID
No description available.

.PARAMETER ServiceCode
No description available.

.PARAMETER ServiceStatus
No description available.

.PARAMETER SizeMinValue
No description available.

.PARAMETER SizeMaxValue
No description available.

.PARAMETER DiscountCode
No description available.

.PARAMETER PriceMinValue
No description available.

.PARAMETER PriceMaxValue
No description available.

.PARAMETER DiscountAmountMinValue
No description available.

.PARAMETER DiscountAmountMaxValue
No description available.

.PARAMETER PrepayAmountMinValue
No description available.

.PARAMETER PrepayAmountMaxValue
No description available.

.PARAMETER TotalAmountMinValue
No description available.

.PARAMETER TotalAmountMaxValue
No description available.

.PARAMETER RoundMinValue
No description available.

.PARAMETER RoundMaxValue
No description available.

.PARAMETER IsDependentService
No description available.

.PARAMETER EstimatedManHourMinValue
No description available.

.PARAMETER EstimatedManHourMaxValue
No description available.

.PARAMETER PostedMinValue
No description available.

.PARAMETER PostedMaxValue
No description available.

.PARAMETER InvoiceNumber
No description available.

.PARAMETER CallAhead
No description available.

.PARAMETER NextPriceMinValue
No description available.

.PARAMETER NextPriceMaxValue
No description available.

.PARAMETER StartDateMinValue
No description available.

.PARAMETER StartDateMaxValue
No description available.

.PARAMETER TechnicianNote
No description available.

.PARAMETER TechnicianNoteExpirationMinValue
No description available.

.PARAMETER TechnicianNoteExpirationMaxValue
No description available.

.PARAMETER CustomerNote
No description available.

.PARAMETER CustomerNoteExpirationMinValue
No description available.

.PARAMETER CustomerNoteExpirationMaxValue
No description available.

.PARAMETER PrepayId
No description available.

.PARAMETER ManHourRateMinValue
No description available.

.PARAMETER ManHourRateMaxValue
No description available.

.PARAMETER IsReversed
No description available.

.PARAMETER TaxableAmount1MinValue
No description available.

.PARAMETER TaxableAmount1MaxValue
No description available.

.PARAMETER TaxableAmount2MinValue
No description available.

.PARAMETER TaxableAmount2MaxValue
No description available.

.PARAMETER TaxableAmount3MinValue
No description available.

.PARAMETER TaxableAmount3MaxValue
No description available.

.PARAMETER ProgramDiscountAmountMinValue
No description available.

.PARAMETER ProgramDiscountAmountMaxValue
No description available.

.PARAMETER StartAfterMinValue
No description available.

.PARAMETER StartAfterMaxValue
No description available.

.PARAMETER EndBeforeMinValue
No description available.

.PARAMETER EndBeforeMaxValue
No description available.

.PARAMETER AssociationCode
No description available.

.PARAMETER ProductionValueMinValue
No description available.

.PARAMETER ProductionValueMaxValue
No description available.

.PARAMETER CalledMinValue
No description available.

.PARAMETER CalledMaxValue
No description available.

.PARAMETER IsPromised
No description available.

.PARAMETER TaxAmount1MinValue
No description available.

.PARAMETER TaxAmount1MaxValue
No description available.

.PARAMETER TaxAmount2MinValue
No description available.

.PARAMETER TaxAmount2MaxValue
No description available.

.PARAMETER TaxAmount3MinValue
No description available.

.PARAMETER TaxAmount3MaxValue
No description available.

.PARAMETER NextSizeMinValue
No description available.

.PARAMETER NextSizeMaxValue
No description available.

.PARAMETER SoldDateMinValue
No description available.

.PARAMETER SoldDateMaxValue
No description available.

.PARAMETER SoldByOne
No description available.

.PARAMETER SoldByTwo
No description available.

.PARAMETER AsapDateMinValue
No description available.

.PARAMETER AsapDateMaxValue
No description available.

.PARAMETER ScheduledTimeMinValue
No description available.

.PARAMETER ScheduledTimeMaxValue
No description available.

.PARAMETER ExtraDescription
No description available.

.PARAMETER Records
No description available.

.PARAMETER Offset
No description available.

.PARAMETER CreatedMinValue
No description available.

.PARAMETER CreatedMaxValue
No description available.

.PARAMETER UpdatedMinValue
No description available.

.PARAMETER UpdatedMaxValue
No description available.

.PARAMETER IsPaid
No description available.

.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Service[]
#>
function Invoke-RGSAServiceSearchGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ID},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerCompanyID},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ServiceYear},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ProgramID},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ServiceCode},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ServiceStatus},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${SizeMinValue},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${SizeMaxValue},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DiscountCode},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${PriceMinValue},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${PriceMaxValue},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${DiscountAmountMinValue},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${DiscountAmountMaxValue},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${PrepayAmountMinValue},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${PrepayAmountMaxValue},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${TotalAmountMinValue},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${TotalAmountMaxValue},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${RoundMinValue},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${RoundMaxValue},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IsDependentService},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${EstimatedManHourMinValue},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${EstimatedManHourMaxValue},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${PostedMinValue},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${PostedMaxValue},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${InvoiceNumber},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CallAhead},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${NextPriceMinValue},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${NextPriceMaxValue},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${StartDateMinValue},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${StartDateMaxValue},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TechnicianNote},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${TechnicianNoteExpirationMinValue},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${TechnicianNoteExpirationMaxValue},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerNote},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CustomerNoteExpirationMinValue},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CustomerNoteExpirationMaxValue},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${PrepayId},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${ManHourRateMinValue},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${ManHourRateMaxValue},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IsReversed},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${TaxableAmount1MinValue},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${TaxableAmount1MaxValue},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${TaxableAmount2MinValue},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${TaxableAmount2MaxValue},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${TaxableAmount3MinValue},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${TaxableAmount3MaxValue},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${ProgramDiscountAmountMinValue},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${ProgramDiscountAmountMaxValue},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${StartAfterMinValue},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${StartAfterMaxValue},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${EndBeforeMinValue},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${EndBeforeMaxValue},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AssociationCode},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${ProductionValueMinValue},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${ProductionValueMaxValue},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CalledMinValue},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CalledMaxValue},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IsPromised},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${TaxAmount1MinValue},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${TaxAmount1MaxValue},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${TaxAmount2MinValue},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${TaxAmount2MaxValue},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${TaxAmount3MinValue},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${TaxAmount3MaxValue},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${NextSizeMinValue},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${NextSizeMaxValue},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${SoldDateMinValue},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${SoldDateMaxValue},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SoldByOne},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SoldByTwo},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${AsapDateMinValue},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${AsapDateMaxValue},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${ScheduledTimeMinValue},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${ScheduledTimeMaxValue},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ExtraDescription},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Records},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CreatedMinValue},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CreatedMaxValue},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${UpdatedMinValue},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${UpdatedMaxValue},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IsPaid},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSAServiceSearchGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/Service/Search'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling serviceSearchGet."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        if ($ID) {
            $LocalVarQueryParameters['ID'] = $ID
        }

        if ($CustomerNumber) {
            $LocalVarQueryParameters['CustomerNumber'] = $CustomerNumber
        }

        if ($CustomerCompanyID) {
            $LocalVarQueryParameters['CustomerCompanyID'] = $CustomerCompanyID
        }

        if ($ServiceYear) {
            $LocalVarQueryParameters['ServiceYear'] = $ServiceYear
        }

        if ($ProgramID) {
            $LocalVarQueryParameters['ProgramID'] = $ProgramID
        }

        if ($ServiceCode) {
            $LocalVarQueryParameters['ServiceCode'] = $ServiceCode
        }

        if ($ServiceStatus) {
            $LocalVarQueryParameters['ServiceStatus'] = $ServiceStatus
        }

        if ($SizeMinValue) {
            $LocalVarQueryParameters['SizeMinValue'] = $SizeMinValue
        }

        if ($SizeMaxValue) {
            $LocalVarQueryParameters['SizeMaxValue'] = $SizeMaxValue
        }

        if ($DiscountCode) {
            $LocalVarQueryParameters['DiscountCode'] = $DiscountCode
        }

        if ($PriceMinValue) {
            $LocalVarQueryParameters['PriceMinValue'] = $PriceMinValue
        }

        if ($PriceMaxValue) {
            $LocalVarQueryParameters['PriceMaxValue'] = $PriceMaxValue
        }

        if ($DiscountAmountMinValue) {
            $LocalVarQueryParameters['DiscountAmountMinValue'] = $DiscountAmountMinValue
        }

        if ($DiscountAmountMaxValue) {
            $LocalVarQueryParameters['DiscountAmountMaxValue'] = $DiscountAmountMaxValue
        }

        if ($PrepayAmountMinValue) {
            $LocalVarQueryParameters['PrepayAmountMinValue'] = $PrepayAmountMinValue
        }

        if ($PrepayAmountMaxValue) {
            $LocalVarQueryParameters['PrepayAmountMaxValue'] = $PrepayAmountMaxValue
        }

        if ($TotalAmountMinValue) {
            $LocalVarQueryParameters['TotalAmountMinValue'] = $TotalAmountMinValue
        }

        if ($TotalAmountMaxValue) {
            $LocalVarQueryParameters['TotalAmountMaxValue'] = $TotalAmountMaxValue
        }

        if ($RoundMinValue) {
            $LocalVarQueryParameters['RoundMinValue'] = $RoundMinValue
        }

        if ($RoundMaxValue) {
            $LocalVarQueryParameters['RoundMaxValue'] = $RoundMaxValue
        }

        if ($IsDependentService) {
            $LocalVarQueryParameters['IsDependentService'] = $IsDependentService
        }

        if ($EstimatedManHourMinValue) {
            $LocalVarQueryParameters['EstimatedManHourMinValue'] = $EstimatedManHourMinValue
        }

        if ($EstimatedManHourMaxValue) {
            $LocalVarQueryParameters['EstimatedManHourMaxValue'] = $EstimatedManHourMaxValue
        }

        if ($PostedMinValue) {
            $LocalVarQueryParameters['PostedMinValue'] = $PostedMinValue
        }

        if ($PostedMaxValue) {
            $LocalVarQueryParameters['PostedMaxValue'] = $PostedMaxValue
        }

        if ($InvoiceNumber) {
            $LocalVarQueryParameters['InvoiceNumber'] = $InvoiceNumber
        }

        if ($CallAhead) {
            $LocalVarQueryParameters['CallAhead'] = $CallAhead
        }

        if ($NextPriceMinValue) {
            $LocalVarQueryParameters['NextPriceMinValue'] = $NextPriceMinValue
        }

        if ($NextPriceMaxValue) {
            $LocalVarQueryParameters['NextPriceMaxValue'] = $NextPriceMaxValue
        }

        if ($StartDateMinValue) {
            $LocalVarQueryParameters['StartDateMinValue'] = $StartDateMinValue
        }

        if ($StartDateMaxValue) {
            $LocalVarQueryParameters['StartDateMaxValue'] = $StartDateMaxValue
        }

        if ($TechnicianNote) {
            $LocalVarQueryParameters['TechnicianNote'] = $TechnicianNote
        }

        if ($TechnicianNoteExpirationMinValue) {
            $LocalVarQueryParameters['TechnicianNoteExpirationMinValue'] = $TechnicianNoteExpirationMinValue
        }

        if ($TechnicianNoteExpirationMaxValue) {
            $LocalVarQueryParameters['TechnicianNoteExpirationMaxValue'] = $TechnicianNoteExpirationMaxValue
        }

        if ($CustomerNote) {
            $LocalVarQueryParameters['CustomerNote'] = $CustomerNote
        }

        if ($CustomerNoteExpirationMinValue) {
            $LocalVarQueryParameters['CustomerNoteExpirationMinValue'] = $CustomerNoteExpirationMinValue
        }

        if ($CustomerNoteExpirationMaxValue) {
            $LocalVarQueryParameters['CustomerNoteExpirationMaxValue'] = $CustomerNoteExpirationMaxValue
        }

        if ($PrepayId) {
            $LocalVarQueryParameters['PrepayId'] = $PrepayId
        }

        if ($ManHourRateMinValue) {
            $LocalVarQueryParameters['ManHourRateMinValue'] = $ManHourRateMinValue
        }

        if ($ManHourRateMaxValue) {
            $LocalVarQueryParameters['ManHourRateMaxValue'] = $ManHourRateMaxValue
        }

        if ($IsReversed) {
            $LocalVarQueryParameters['IsReversed'] = $IsReversed
        }

        if ($TaxableAmount1MinValue) {
            $LocalVarQueryParameters['TaxableAmount1MinValue'] = $TaxableAmount1MinValue
        }

        if ($TaxableAmount1MaxValue) {
            $LocalVarQueryParameters['TaxableAmount1MaxValue'] = $TaxableAmount1MaxValue
        }

        if ($TaxableAmount2MinValue) {
            $LocalVarQueryParameters['TaxableAmount2MinValue'] = $TaxableAmount2MinValue
        }

        if ($TaxableAmount2MaxValue) {
            $LocalVarQueryParameters['TaxableAmount2MaxValue'] = $TaxableAmount2MaxValue
        }

        if ($TaxableAmount3MinValue) {
            $LocalVarQueryParameters['TaxableAmount3MinValue'] = $TaxableAmount3MinValue
        }

        if ($TaxableAmount3MaxValue) {
            $LocalVarQueryParameters['TaxableAmount3MaxValue'] = $TaxableAmount3MaxValue
        }

        if ($ProgramDiscountAmountMinValue) {
            $LocalVarQueryParameters['ProgramDiscountAmountMinValue'] = $ProgramDiscountAmountMinValue
        }

        if ($ProgramDiscountAmountMaxValue) {
            $LocalVarQueryParameters['ProgramDiscountAmountMaxValue'] = $ProgramDiscountAmountMaxValue
        }

        if ($StartAfterMinValue) {
            $LocalVarQueryParameters['StartAfterMinValue'] = $StartAfterMinValue
        }

        if ($StartAfterMaxValue) {
            $LocalVarQueryParameters['StartAfterMaxValue'] = $StartAfterMaxValue
        }

        if ($EndBeforeMinValue) {
            $LocalVarQueryParameters['EndBeforeMinValue'] = $EndBeforeMinValue
        }

        if ($EndBeforeMaxValue) {
            $LocalVarQueryParameters['EndBeforeMaxValue'] = $EndBeforeMaxValue
        }

        if ($AssociationCode) {
            $LocalVarQueryParameters['AssociationCode'] = $AssociationCode
        }

        if ($ProductionValueMinValue) {
            $LocalVarQueryParameters['ProductionValueMinValue'] = $ProductionValueMinValue
        }

        if ($ProductionValueMaxValue) {
            $LocalVarQueryParameters['ProductionValueMaxValue'] = $ProductionValueMaxValue
        }

        if ($CalledMinValue) {
            $LocalVarQueryParameters['CalledMinValue'] = $CalledMinValue
        }

        if ($CalledMaxValue) {
            $LocalVarQueryParameters['CalledMaxValue'] = $CalledMaxValue
        }

        if ($IsPromised) {
            $LocalVarQueryParameters['IsPromised'] = $IsPromised
        }

        if ($TaxAmount1MinValue) {
            $LocalVarQueryParameters['TaxAmount1MinValue'] = $TaxAmount1MinValue
        }

        if ($TaxAmount1MaxValue) {
            $LocalVarQueryParameters['TaxAmount1MaxValue'] = $TaxAmount1MaxValue
        }

        if ($TaxAmount2MinValue) {
            $LocalVarQueryParameters['TaxAmount2MinValue'] = $TaxAmount2MinValue
        }

        if ($TaxAmount2MaxValue) {
            $LocalVarQueryParameters['TaxAmount2MaxValue'] = $TaxAmount2MaxValue
        }

        if ($TaxAmount3MinValue) {
            $LocalVarQueryParameters['TaxAmount3MinValue'] = $TaxAmount3MinValue
        }

        if ($TaxAmount3MaxValue) {
            $LocalVarQueryParameters['TaxAmount3MaxValue'] = $TaxAmount3MaxValue
        }

        if ($NextSizeMinValue) {
            $LocalVarQueryParameters['NextSizeMinValue'] = $NextSizeMinValue
        }

        if ($NextSizeMaxValue) {
            $LocalVarQueryParameters['NextSizeMaxValue'] = $NextSizeMaxValue
        }

        if ($SoldDateMinValue) {
            $LocalVarQueryParameters['SoldDateMinValue'] = $SoldDateMinValue
        }

        if ($SoldDateMaxValue) {
            $LocalVarQueryParameters['SoldDateMaxValue'] = $SoldDateMaxValue
        }

        if ($SoldByOne) {
            $LocalVarQueryParameters['SoldByOne'] = $SoldByOne
        }

        if ($SoldByTwo) {
            $LocalVarQueryParameters['SoldByTwo'] = $SoldByTwo
        }

        if ($AsapDateMinValue) {
            $LocalVarQueryParameters['AsapDateMinValue'] = $AsapDateMinValue
        }

        if ($AsapDateMaxValue) {
            $LocalVarQueryParameters['AsapDateMaxValue'] = $AsapDateMaxValue
        }

        if ($ScheduledTimeMinValue) {
            $LocalVarQueryParameters['ScheduledTimeMinValue'] = $ScheduledTimeMinValue
        }

        if ($ScheduledTimeMaxValue) {
            $LocalVarQueryParameters['ScheduledTimeMaxValue'] = $ScheduledTimeMaxValue
        }

        if ($ExtraDescription) {
            $LocalVarQueryParameters['ExtraDescription'] = $ExtraDescription
        }

        if ($Records) {
            $LocalVarQueryParameters['Records'] = $Records
        }

        if ($Offset) {
            $LocalVarQueryParameters['Offset'] = $Offset
        }

        if ($CreatedMinValue) {
            $LocalVarQueryParameters['CreatedMinValue'] = $CreatedMinValue
        }

        if ($CreatedMaxValue) {
            $LocalVarQueryParameters['CreatedMaxValue'] = $CreatedMaxValue
        }

        if ($UpdatedMinValue) {
            $LocalVarQueryParameters['UpdatedMinValue'] = $UpdatedMinValue
        }

        if ($UpdatedMaxValue) {
            $LocalVarQueryParameters['UpdatedMaxValue'] = $UpdatedMaxValue
        }

        if ($IsPaid) {
            $LocalVarQueryParameters['IsPaid'] = $IsPaid
        }

        $LocalVarResult = Invoke-RGSAApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Service[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Returns a list of services that match the provided criteria.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER ServiceSearch


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Service[]
#>
function Invoke-RGSAServiceSearchPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${ServiceSearch},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSAServiceSearchPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Service/Search'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling serviceSearchPost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarBodyParameter = $ServiceSearch | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Service[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Returns a single service record that corresponds to the provided ID.

.DESCRIPTION

No description available.

.PARAMETER ServiceId


.PARAMETER ApiKey
API Key

.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Service
#>
function Invoke-RGSAServiceServiceIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${ServiceId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSAServiceServiceIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/Service/{serviceId}'
        if (!$ServiceId) {
            throw "Error! The required parameter `ServiceId` missing when calling serviceServiceIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{serviceId}', [System.Web.HTTPUtility]::UrlEncode($ServiceId))

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling serviceServiceIdGet."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarResult = Invoke-RGSAApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Service" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

