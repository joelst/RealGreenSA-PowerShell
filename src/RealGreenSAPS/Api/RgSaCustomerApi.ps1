#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

Add an attachment to the database.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER Attachment


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Int32
#>
function Invoke-RGSACustomerAddAttachmentPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${Attachment},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerAddAttachmentPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Customer/AddAttachment'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerAddAttachmentPost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarBodyParameter = $Attachment | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Int32" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Returns the specified customers contact preferences

.DESCRIPTION

No description available.

.PARAMETER CustomerNumber


.PARAMETER ApiKey
API Key

.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomerContactPreferencesProperties
#>
function Invoke-RGSACustomerCustomerNumberContactPreferencesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${CustomerNumber},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerCustomerNumberContactPreferencesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/Customer/{customerNumber}/ContactPreferences'
        if (!$CustomerNumber) {
            throw "Error! The required parameter `CustomerNumber` missing when calling customerCustomerNumberContactPreferencesGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{customerNumber}', [System.Web.HTTPUtility]::UrlEncode($CustomerNumber))

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerCustomerNumberContactPreferencesGet."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarResult = Invoke-RGSAApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomerContactPreferencesProperties" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update a customers contact preferences

.DESCRIPTION

No description available.

.PARAMETER CustomerNumber


.PARAMETER ApiKey
API Key

.PARAMETER CustomerContactPreferences


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomerContactPreferences
#>
function Invoke-RGSACustomerCustomerNumberContactPreferencesPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${CustomerNumber},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${CustomerContactPreferences},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerCustomerNumberContactPreferencesPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Customer/{customerNumber}/ContactPreferences'
        if (!$CustomerNumber) {
            throw "Error! The required parameter `CustomerNumber` missing when calling customerCustomerNumberContactPreferencesPut."
        }
        $LocalVarUri = $LocalVarUri.replace('{customerNumber}', [System.Web.HTTPUtility]::UrlEncode($CustomerNumber))

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerCustomerNumberContactPreferencesPut."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarBodyParameter = $CustomerContactPreferences | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomerContactPreferences" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Add a flag to a customer account

.DESCRIPTION

No description available.

.PARAMETER CustomerNumber


.PARAMETER FlagId


.PARAMETER ApiKey
API Key

.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomerContactPreferences
#>
function Invoke-RGSACustomerCustomerNumberFlagsAddFlagIdPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${CustomerNumber},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${FlagId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerCustomerNumberFlagsAddFlagIdPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/Customer/{customerNumber}/Flags/Add/{flagId}'
        if (!$CustomerNumber) {
            throw "Error! The required parameter `CustomerNumber` missing when calling customerCustomerNumberFlagsAddFlagIdPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{customerNumber}', [System.Web.HTTPUtility]::UrlEncode($CustomerNumber))
        if (!$FlagId) {
            throw "Error! The required parameter `FlagId` missing when calling customerCustomerNumberFlagsAddFlagIdPost."
        }
        $LocalVarUri = $LocalVarUri.replace('{flagId}', [System.Web.HTTPUtility]::UrlEncode($FlagId))

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerCustomerNumberFlagsAddFlagIdPost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomerContactPreferences" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve all flags for a customer

.DESCRIPTION

No description available.

.PARAMETER CustomerNumber


.PARAMETER ApiKey
API Key

.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomerFlag[]
#>
function Invoke-RGSACustomerCustomerNumberFlagsGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${CustomerNumber},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerCustomerNumberFlagsGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/Customer/{customerNumber}/Flags'
        if (!$CustomerNumber) {
            throw "Error! The required parameter `CustomerNumber` missing when calling customerCustomerNumberFlagsGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{customerNumber}', [System.Web.HTTPUtility]::UrlEncode($CustomerNumber))

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerCustomerNumberFlagsGet."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarResult = Invoke-RGSAApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomerFlag[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Returns a list of customer numbers that have the specified flag.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER CustomerFlagAPIRequest
No description available.

.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Int32[]
#>
function Invoke-RGSACustomerFlagIDsPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${CustomerFlagAPIRequest},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerFlagIDsPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Customer/Flag/IDs'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerFlagIDsPost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarBodyParameter = $CustomerFlagAPIRequest | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Int32[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Returns a list of customers that have the specified flag. Return fields must be specified.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER Fields


.PARAMETER CustomerFlagAPIRequest


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Customer[]
#>
function Invoke-RGSACustomerFlagPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Fields},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${CustomerFlagAPIRequest},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerFlagPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Customer/Flag'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerFlagPost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        if ($Fields) {
            $LocalVarQueryParameters['fields'] = $Fields
        }

        $LocalVarBodyParameter = $CustomerFlagAPIRequest | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Customer[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Add a flag to multiple customer accounts

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER CustomerFlagModifierBulk


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomerContactPreferences
#>
function Invoke-RGSACustomerFlagsAddPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${CustomerFlagModifierBulk},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerFlagsAddPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Customer/Flags/Add'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerFlagsAddPost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarBodyParameter = $CustomerFlagModifierBulk | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomerContactPreferences" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Remove a flag from multiple customer accounts

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER CustomerFlagModifierBulk


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomerContactPreferences
#>
function Invoke-RGSACustomerFlagsDeletePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${CustomerFlagModifierBulk},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerFlagsDeletePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Customer/Flags/Delete'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerFlagsDeletePost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarBodyParameter = $CustomerFlagModifierBulk | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomerContactPreferences" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Returns a list of customer numbers that have the provided phone number.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER PhoneSearch


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Int32[]
#>
function Invoke-RGSACustomerGetCustomerNumberByPhonePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PhoneSearch},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerGetCustomerNumberByPhonePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Customer/GetCustomerNumberByPhone'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerGetCustomerNumberByPhonePost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarBodyParameter = $PhoneSearch | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Int32[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Returns a list of customers that have the provided phone number on their account.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER PhoneSearch


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Customer[]
#>
function Invoke-RGSACustomerGetCustomersByPhonePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PhoneSearch},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerGetCustomersByPhonePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Customer/GetCustomersByPhone'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerGetCustomersByPhonePost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarBodyParameter = $PhoneSearch | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Customer[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Retrieve a single customer record by customer number

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.

.PARAMETER ApiKey
API Key

.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Customer
#>
function Invoke-RGSACustomerIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/Customer/{id}'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling customerIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerIdGet."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarResult = Invoke-RGSAApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Customer" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update a portion of a customer without sending the entire customer object.

.DESCRIPTION

No description available.

.PARAMETER Id


.PARAMETER ApiKey
API Key

.PARAMETER EmployeeId
No description available.

.PARAMETER Operation


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Customer
#>
function Invoke-RGSACustomerIdPatch {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EmployeeId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${Operation},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerIdPatch' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Customer/{id}'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling customerIdPatch."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerIdPatch."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        if ($EmployeeId) {
            $LocalVarQueryParameters['employeeId'] = $EmployeeId
        }

        $LocalVarBodyParameter = ConvertTo-Json @($Operation) -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Customer" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Returns a list of valid installment payment frequencies to use when adding a new installment.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

System.Collections.Hashtable
#>
function Invoke-RGSACustomerInstallmentFrequenciesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerInstallmentFrequenciesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/Customer/Installment/Frequencies'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerInstallmentFrequenciesGet."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarResult = Invoke-RGSAApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "System.Collections.Hashtable" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Build and add an installment contract to the database.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER AddInstallmentRequest


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

AddInstallmentResult
#>
function Invoke-RGSACustomerInstallmentPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${AddInstallmentRequest},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerInstallmentPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Customer/Installment'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerInstallmentPost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarBodyParameter = $AddInstallmentRequest | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "AddInstallmentResult" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Returns a list of valid installment statuses to use when adding a new installment.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

System.Collections.Hashtable
#>
function Invoke-RGSACustomerInstallmentStatusesGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerInstallmentStatusesGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/Customer/Installment/Statuses'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerInstallmentStatusesGet."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarResult = Invoke-RGSAApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "System.Collections.Hashtable" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Insert an NPS score.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER NPSRecord


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Int32
#>
function Invoke-RGSACustomerNPSPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${NPSRecord},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerNPSPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Customer/NPS'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerNPSPost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarBodyParameter = $NPSRecord | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Int32" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Insert a customer to the database.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER APICustomerInsert


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Int32
#>
function Invoke-RGSACustomerPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${APICustomerInsert},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Customer'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerPost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarBodyParameter = $APICustomerInsert | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Int32" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Add prepay code to services in given prog_id(s)

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER PrepayAdjustmentServiceModel


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PrepayAdjustmentServiceStatus
#>
function Invoke-RGSACustomerPrepayAllocationPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PrepayAdjustmentServiceModel},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerPrepayAllocationPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Customer/PrepayAllocation'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerPrepayAllocationPost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarBodyParameter = $PrepayAdjustmentServiceModel | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PrepayAdjustmentServiceStatus" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update a customer by pasing the entire customer object

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER EmployeeId
No description available.

.PARAMETER Customer


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Boolean
#>
function Invoke-RGSACustomerPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EmployeeId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${Customer},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Customer'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerPut."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        if ($EmployeeId) {
            $LocalVarQueryParameters['employeeId'] = $EmployeeId
        }

        $LocalVarBodyParameter = $Customer | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Boolean" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Returns a list of customers that match the provided criteria.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER CustomerID
No description available.

.PARAMETER CustomerStatusMinValue
No description available.

.PARAMETER CustomerStatusMaxValue
No description available.

.PARAMETER CustomerCompanyName
No description available.

.PARAMETER CustomerFirstName
No description available.

.PARAMETER CustomerLastName
No description available.

.PARAMETER CustomerStreetAddress
No description available.

.PARAMETER CustomerPreDirection
No description available.

.PARAMETER CustomerStreetNumber
No description available.

.PARAMETER CustomerPostDirection
No description available.

.PARAMETER CustomerStreetSuffix
No description available.

.PARAMETER CustomerStreetName
No description available.

.PARAMETER CustomerCity
No description available.

.PARAMETER CustomerState
No description available.

.PARAMETER CustomerZip
No description available.

.PARAMETER UseBillingInfo
No description available.

.PARAMETER CustomerInvoiceTypeMinValue
No description available.

.PARAMETER CustomerInvoiceTypeMaxValue
No description available.

.PARAMETER BillingCompanyName
No description available.

.PARAMETER BillingLastName
No description available.

.PARAMETER BillingFirstName
No description available.

.PARAMETER BillingStreetAddress
No description available.

.PARAMETER BillingPreDirection
No description available.

.PARAMETER BillingStreetNumber
No description available.

.PARAMETER BillingStreetSuffix
No description available.

.PARAMETER BillingPostDirection
No description available.

.PARAMETER BillingStreetName
No description available.

.PARAMETER BillingCity
No description available.

.PARAMETER BillingState
No description available.

.PARAMETER BillingZip
No description available.

.PARAMETER CustomerSource
No description available.

.PARAMETER CustomerSubdivisionID
No description available.

.PARAMETER CustomerBranchIDMinValue
No description available.

.PARAMETER CustomerBranchIDMaxValue
No description available.

.PARAMETER CustomerTaxId1
No description available.

.PARAMETER CustomerTaxId2
No description available.

.PARAMETER CustomerTaxId3
No description available.

.PARAMETER CustomerTerritoryCodeMinValue
No description available.

.PARAMETER CustomerTerritoryCodeMaxValue
No description available.

.PARAMETER CustomerMasterAccountID
No description available.

.PARAMETER CustomerIsBilledWithMasterAccount
No description available.

.PARAMETER CustomerCancelCode
No description available.

.PARAMETER CustomerHoldCode
No description available.

.PARAMETER CustomerCollectionCodeId
No description available.

.PARAMETER CustomerSizeMinValue
No description available.

.PARAMETER CustomerSizeMaxValue
No description available.

.PARAMETER CustomerMapCodeMinValue
No description available.

.PARAMETER CustomerMapCodeMaxValue
No description available.

.PARAMETER CustomerCallCode
No description available.

.PARAMETER CustomerPhoneHome
No description available.

.PARAMETER CustomerPhoneWork
No description available.

.PARAMETER CustomerPhoneCell
No description available.

.PARAMETER CustomerPhoneOthr
No description available.

.PARAMETER CustomerPhoneFax
No description available.

.PARAMETER CustomerPhonePage
No description available.

.PARAMETER CustomerEmail
No description available.

.PARAMETER CustomerCreditLimitMinValue
No description available.

.PARAMETER CustomerCreditLimitMaxValue
No description available.

.PARAMETER CustomerDirections
No description available.

.PARAMETER CustomerSinceDateMinValue
No description available.

.PARAMETER CustomerSinceDateMaxValue
No description available.

.PARAMETER CustomerRoute
No description available.

.PARAMETER ResidentialCommercial
No description available.

.PARAMETER CustomerCancelDateMinValue
No description available.

.PARAMETER CustomerCancelDateMaxValue
No description available.

.PARAMETER CustomerCancelBy
No description available.

.PARAMETER CustomerHoldBeginMinValue
No description available.

.PARAMETER CustomerHoldBeginMaxValue
No description available.

.PARAMETER CustomerHoldEndMinValue
No description available.

.PARAMETER CustomerHoldEndMaxValue
No description available.

.PARAMETER CustomerLatitudeMinValue
No description available.

.PARAMETER CustomerLatitudeMaxValue
No description available.

.PARAMETER CustomerLongitudeMinValue
No description available.

.PARAMETER CustomerLongitudeMaxValue
No description available.

.PARAMETER CustomerEstimatedHouseCostMinValue
No description available.

.PARAMETER CustomerEstimatedHouseCostMaxValue
No description available.

.PARAMETER CustomerYearBuiltMinValue
No description available.

.PARAMETER CustomerYearBuiltMaxValue
No description available.

.PARAMETER CustomerPropertyDimensions
No description available.

.PARAMETER CustomerCensusTractInfo
No description available.

.PARAMETER CustomerTechNote
No description available.

.PARAMETER CustomerMemo
No description available.

.PARAMETER CustomerStatementTypeMinValue
No description available.

.PARAMETER CustomerStatementTypeMaxValue
No description available.

.PARAMETER CustomerIsMasterAccount
No description available.

.PARAMETER BillingType
No description available.

.PARAMETER CustomerNoInterest
No description available.

.PARAMETER CustomerPhMinValue
No description available.

.PARAMETER CustomerPhMaxValue
No description available.

.PARAMETER CustomerCollectionDateMinValue
No description available.

.PARAMETER CustomerCollectionDateMaxValue
No description available.

.PARAMETER DiscountCode
No description available.

.PARAMETER CarrierRoute
No description available.

.PARAMETER CustomerReferenceID
No description available.

.PARAMETER CustomerUnitCode
No description available.

.PARAMETER CustomerNoCreditHold
No description available.

.PARAMETER CustomerTrackingID
No description available.

.PARAMETER CustomerUserID
No description available.

.PARAMETER CustomerPassword
No description available.

.PARAMETER CustomerCollectionExportDateMinValue
No description available.

.PARAMETER CustomerCollectionExportDateMaxValue
No description available.

.PARAMETER CustomerCountyID
No description available.

.PARAMETER CustomerMemoAlert
No description available.

.PARAMETER CustomerSizeSource
No description available.

.PARAMETER BillingEmail
No description available.

.PARAMETER Records
No description available.

.PARAMETER Offset
No description available.

.PARAMETER CreatedMinValue
No description available.

.PARAMETER CreatedMaxValue
No description available.

.PARAMETER UpdatedMinValue
No description available.

.PARAMETER UpdatedMaxValue
No description available.

.PARAMETER Fields


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Customer[]
#>
function Invoke-RGSACustomerSearchGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerID},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerStatusMinValue},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerStatusMaxValue},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerCompanyName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerFirstName},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerLastName},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerStreetAddress},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerPreDirection},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerStreetNumber},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerPostDirection},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerStreetSuffix},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerStreetName},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerCity},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerState},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerZip},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${UseBillingInfo},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${CustomerInvoiceTypeMinValue},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${CustomerInvoiceTypeMaxValue},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BillingCompanyName},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BillingLastName},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BillingFirstName},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BillingStreetAddress},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BillingPreDirection},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BillingStreetNumber},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BillingStreetSuffix},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BillingPostDirection},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BillingStreetName},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BillingCity},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BillingState},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BillingZip},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${CustomerSource},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${CustomerSubdivisionID},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${CustomerBranchIDMinValue},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${CustomerBranchIDMaxValue},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerTaxId1},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerTaxId2},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerTaxId3},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerTerritoryCodeMinValue},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerTerritoryCodeMaxValue},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${CustomerMasterAccountID},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${CustomerIsBilledWithMasterAccount},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${CustomerCancelCode},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${CustomerHoldCode},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${CustomerCollectionCodeId},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${CustomerSizeMinValue},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${CustomerSizeMaxValue},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerMapCodeMinValue},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerMapCodeMaxValue},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${CustomerCallCode},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerPhoneHome},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerPhoneWork},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerPhoneCell},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerPhoneOthr},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerPhoneFax},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerPhonePage},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerEmail},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${CustomerCreditLimitMinValue},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${CustomerCreditLimitMaxValue},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerDirections},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CustomerSinceDateMinValue},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CustomerSinceDateMaxValue},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerRoute},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ResidentialCommercial},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CustomerCancelDateMinValue},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CustomerCancelDateMaxValue},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerCancelBy},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CustomerHoldBeginMinValue},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CustomerHoldBeginMaxValue},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CustomerHoldEndMinValue},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CustomerHoldEndMaxValue},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${CustomerLatitudeMinValue},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${CustomerLatitudeMaxValue},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${CustomerLongitudeMinValue},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${CustomerLongitudeMaxValue},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${CustomerEstimatedHouseCostMinValue},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${CustomerEstimatedHouseCostMaxValue},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${CustomerYearBuiltMinValue},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${CustomerYearBuiltMaxValue},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerPropertyDimensions},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerCensusTractInfo},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerTechNote},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerMemo},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${CustomerStatementTypeMinValue},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${CustomerStatementTypeMaxValue},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${CustomerIsMasterAccount},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BillingType},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${CustomerNoInterest},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${CustomerPhMinValue},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${CustomerPhMaxValue},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CustomerCollectionDateMinValue},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CustomerCollectionDateMaxValue},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DiscountCode},
        [Parameter(Position = 93, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CarrierRoute},
        [Parameter(Position = 94, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerReferenceID},
        [Parameter(Position = 95, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${CustomerUnitCode},
        [Parameter(Position = 96, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${CustomerNoCreditHold},
        [Parameter(Position = 97, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerTrackingID},
        [Parameter(Position = 98, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerUserID},
        [Parameter(Position = 99, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerPassword},
        [Parameter(Position = 100, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CustomerCollectionExportDateMinValue},
        [Parameter(Position = 101, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CustomerCollectionExportDateMaxValue},
        [Parameter(Position = 102, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerCountyID},
        [Parameter(Position = 103, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${CustomerMemoAlert},
        [Parameter(Position = 104, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerSizeSource},
        [Parameter(Position = 105, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BillingEmail},
        [Parameter(Position = 106, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Records},
        [Parameter(Position = 107, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 108, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CreatedMinValue},
        [Parameter(Position = 109, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CreatedMaxValue},
        [Parameter(Position = 110, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${UpdatedMinValue},
        [Parameter(Position = 111, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${UpdatedMaxValue},
        [Parameter(Position = 112, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Fields},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerSearchGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/Customer/Search'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerSearchGet."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        if ($CustomerID) {
            $LocalVarQueryParameters['CustomerID'] = $CustomerID
        }

        if ($CustomerStatusMinValue) {
            $LocalVarQueryParameters['CustomerStatusMinValue'] = $CustomerStatusMinValue
        }

        if ($CustomerStatusMaxValue) {
            $LocalVarQueryParameters['CustomerStatusMaxValue'] = $CustomerStatusMaxValue
        }

        if ($CustomerCompanyName) {
            $LocalVarQueryParameters['CustomerCompanyName'] = $CustomerCompanyName
        }

        if ($CustomerFirstName) {
            $LocalVarQueryParameters['CustomerFirstName'] = $CustomerFirstName
        }

        if ($CustomerLastName) {
            $LocalVarQueryParameters['CustomerLastName'] = $CustomerLastName
        }

        if ($CustomerStreetAddress) {
            $LocalVarQueryParameters['CustomerStreetAddress'] = $CustomerStreetAddress
        }

        if ($CustomerPreDirection) {
            $LocalVarQueryParameters['CustomerPreDirection'] = $CustomerPreDirection
        }

        if ($CustomerStreetNumber) {
            $LocalVarQueryParameters['CustomerStreetNumber'] = $CustomerStreetNumber
        }

        if ($CustomerPostDirection) {
            $LocalVarQueryParameters['CustomerPostDirection'] = $CustomerPostDirection
        }

        if ($CustomerStreetSuffix) {
            $LocalVarQueryParameters['CustomerStreetSuffix'] = $CustomerStreetSuffix
        }

        if ($CustomerStreetName) {
            $LocalVarQueryParameters['CustomerStreetName'] = $CustomerStreetName
        }

        if ($CustomerCity) {
            $LocalVarQueryParameters['CustomerCity'] = $CustomerCity
        }

        if ($CustomerState) {
            $LocalVarQueryParameters['CustomerState'] = $CustomerState
        }

        if ($CustomerZip) {
            $LocalVarQueryParameters['CustomerZip'] = $CustomerZip
        }

        if ($UseBillingInfo) {
            $LocalVarQueryParameters['UseBillingInfo'] = $UseBillingInfo
        }

        if ($CustomerInvoiceTypeMinValue) {
            $LocalVarQueryParameters['CustomerInvoiceTypeMinValue'] = $CustomerInvoiceTypeMinValue
        }

        if ($CustomerInvoiceTypeMaxValue) {
            $LocalVarQueryParameters['CustomerInvoiceTypeMaxValue'] = $CustomerInvoiceTypeMaxValue
        }

        if ($BillingCompanyName) {
            $LocalVarQueryParameters['BillingCompanyName'] = $BillingCompanyName
        }

        if ($BillingLastName) {
            $LocalVarQueryParameters['BillingLastName'] = $BillingLastName
        }

        if ($BillingFirstName) {
            $LocalVarQueryParameters['BillingFirstName'] = $BillingFirstName
        }

        if ($BillingStreetAddress) {
            $LocalVarQueryParameters['BillingStreetAddress'] = $BillingStreetAddress
        }

        if ($BillingPreDirection) {
            $LocalVarQueryParameters['BillingPreDirection'] = $BillingPreDirection
        }

        if ($BillingStreetNumber) {
            $LocalVarQueryParameters['BillingStreetNumber'] = $BillingStreetNumber
        }

        if ($BillingStreetSuffix) {
            $LocalVarQueryParameters['BillingStreetSuffix'] = $BillingStreetSuffix
        }

        if ($BillingPostDirection) {
            $LocalVarQueryParameters['BillingPostDirection'] = $BillingPostDirection
        }

        if ($BillingStreetName) {
            $LocalVarQueryParameters['BillingStreetName'] = $BillingStreetName
        }

        if ($BillingCity) {
            $LocalVarQueryParameters['BillingCity'] = $BillingCity
        }

        if ($BillingState) {
            $LocalVarQueryParameters['BillingState'] = $BillingState
        }

        if ($BillingZip) {
            $LocalVarQueryParameters['BillingZip'] = $BillingZip
        }

        if ($CustomerSource) {
            $LocalVarQueryParameters['CustomerSource'] = $CustomerSource
        }

        if ($CustomerSubdivisionID) {
            $LocalVarQueryParameters['CustomerSubdivisionID'] = $CustomerSubdivisionID
        }

        if ($CustomerBranchIDMinValue) {
            $LocalVarQueryParameters['CustomerBranchIDMinValue'] = $CustomerBranchIDMinValue
        }

        if ($CustomerBranchIDMaxValue) {
            $LocalVarQueryParameters['CustomerBranchIDMaxValue'] = $CustomerBranchIDMaxValue
        }

        if ($CustomerTaxId1) {
            $LocalVarQueryParameters['CustomerTaxId1'] = $CustomerTaxId1
        }

        if ($CustomerTaxId2) {
            $LocalVarQueryParameters['CustomerTaxId2'] = $CustomerTaxId2
        }

        if ($CustomerTaxId3) {
            $LocalVarQueryParameters['CustomerTaxId3'] = $CustomerTaxId3
        }

        if ($CustomerTerritoryCodeMinValue) {
            $LocalVarQueryParameters['CustomerTerritoryCodeMinValue'] = $CustomerTerritoryCodeMinValue
        }

        if ($CustomerTerritoryCodeMaxValue) {
            $LocalVarQueryParameters['CustomerTerritoryCodeMaxValue'] = $CustomerTerritoryCodeMaxValue
        }

        if ($CustomerMasterAccountID) {
            $LocalVarQueryParameters['CustomerMasterAccountID'] = $CustomerMasterAccountID
        }

        if ($CustomerIsBilledWithMasterAccount) {
            $LocalVarQueryParameters['CustomerIsBilledWithMasterAccount'] = $CustomerIsBilledWithMasterAccount
        }

        if ($CustomerCancelCode) {
            $LocalVarQueryParameters['CustomerCancelCode'] = $CustomerCancelCode
        }

        if ($CustomerHoldCode) {
            $LocalVarQueryParameters['CustomerHoldCode'] = $CustomerHoldCode
        }

        if ($CustomerCollectionCodeId) {
            $LocalVarQueryParameters['CustomerCollectionCodeId'] = $CustomerCollectionCodeId
        }

        if ($CustomerSizeMinValue) {
            $LocalVarQueryParameters['CustomerSizeMinValue'] = $CustomerSizeMinValue
        }

        if ($CustomerSizeMaxValue) {
            $LocalVarQueryParameters['CustomerSizeMaxValue'] = $CustomerSizeMaxValue
        }

        if ($CustomerMapCodeMinValue) {
            $LocalVarQueryParameters['CustomerMapCodeMinValue'] = $CustomerMapCodeMinValue
        }

        if ($CustomerMapCodeMaxValue) {
            $LocalVarQueryParameters['CustomerMapCodeMaxValue'] = $CustomerMapCodeMaxValue
        }

        if ($CustomerCallCode) {
            $LocalVarQueryParameters['CustomerCallCode'] = $CustomerCallCode
        }

        if ($CustomerPhoneHome) {
            $LocalVarQueryParameters['CustomerPhoneHome'] = $CustomerPhoneHome
        }

        if ($CustomerPhoneWork) {
            $LocalVarQueryParameters['CustomerPhoneWork'] = $CustomerPhoneWork
        }

        if ($CustomerPhoneCell) {
            $LocalVarQueryParameters['CustomerPhoneCell'] = $CustomerPhoneCell
        }

        if ($CustomerPhoneOthr) {
            $LocalVarQueryParameters['CustomerPhoneOthr'] = $CustomerPhoneOthr
        }

        if ($CustomerPhoneFax) {
            $LocalVarQueryParameters['CustomerPhoneFax'] = $CustomerPhoneFax
        }

        if ($CustomerPhonePage) {
            $LocalVarQueryParameters['CustomerPhonePage'] = $CustomerPhonePage
        }

        if ($CustomerEmail) {
            $LocalVarQueryParameters['CustomerEmail'] = $CustomerEmail
        }

        if ($CustomerCreditLimitMinValue) {
            $LocalVarQueryParameters['CustomerCreditLimitMinValue'] = $CustomerCreditLimitMinValue
        }

        if ($CustomerCreditLimitMaxValue) {
            $LocalVarQueryParameters['CustomerCreditLimitMaxValue'] = $CustomerCreditLimitMaxValue
        }

        if ($CustomerDirections) {
            $LocalVarQueryParameters['CustomerDirections'] = $CustomerDirections
        }

        if ($CustomerSinceDateMinValue) {
            $LocalVarQueryParameters['CustomerSinceDateMinValue'] = $CustomerSinceDateMinValue
        }

        if ($CustomerSinceDateMaxValue) {
            $LocalVarQueryParameters['CustomerSinceDateMaxValue'] = $CustomerSinceDateMaxValue
        }

        if ($CustomerRoute) {
            $LocalVarQueryParameters['CustomerRoute'] = $CustomerRoute
        }

        if ($ResidentialCommercial) {
            $LocalVarQueryParameters['ResidentialCommercial'] = $ResidentialCommercial
        }

        if ($CustomerCancelDateMinValue) {
            $LocalVarQueryParameters['CustomerCancelDateMinValue'] = $CustomerCancelDateMinValue
        }

        if ($CustomerCancelDateMaxValue) {
            $LocalVarQueryParameters['CustomerCancelDateMaxValue'] = $CustomerCancelDateMaxValue
        }

        if ($CustomerCancelBy) {
            $LocalVarQueryParameters['CustomerCancelBy'] = $CustomerCancelBy
        }

        if ($CustomerHoldBeginMinValue) {
            $LocalVarQueryParameters['CustomerHoldBeginMinValue'] = $CustomerHoldBeginMinValue
        }

        if ($CustomerHoldBeginMaxValue) {
            $LocalVarQueryParameters['CustomerHoldBeginMaxValue'] = $CustomerHoldBeginMaxValue
        }

        if ($CustomerHoldEndMinValue) {
            $LocalVarQueryParameters['CustomerHoldEndMinValue'] = $CustomerHoldEndMinValue
        }

        if ($CustomerHoldEndMaxValue) {
            $LocalVarQueryParameters['CustomerHoldEndMaxValue'] = $CustomerHoldEndMaxValue
        }

        if ($CustomerLatitudeMinValue) {
            $LocalVarQueryParameters['CustomerLatitudeMinValue'] = $CustomerLatitudeMinValue
        }

        if ($CustomerLatitudeMaxValue) {
            $LocalVarQueryParameters['CustomerLatitudeMaxValue'] = $CustomerLatitudeMaxValue
        }

        if ($CustomerLongitudeMinValue) {
            $LocalVarQueryParameters['CustomerLongitudeMinValue'] = $CustomerLongitudeMinValue
        }

        if ($CustomerLongitudeMaxValue) {
            $LocalVarQueryParameters['CustomerLongitudeMaxValue'] = $CustomerLongitudeMaxValue
        }

        if ($CustomerEstimatedHouseCostMinValue) {
            $LocalVarQueryParameters['CustomerEstimatedHouseCostMinValue'] = $CustomerEstimatedHouseCostMinValue
        }

        if ($CustomerEstimatedHouseCostMaxValue) {
            $LocalVarQueryParameters['CustomerEstimatedHouseCostMaxValue'] = $CustomerEstimatedHouseCostMaxValue
        }

        if ($CustomerYearBuiltMinValue) {
            $LocalVarQueryParameters['CustomerYearBuiltMinValue'] = $CustomerYearBuiltMinValue
        }

        if ($CustomerYearBuiltMaxValue) {
            $LocalVarQueryParameters['CustomerYearBuiltMaxValue'] = $CustomerYearBuiltMaxValue
        }

        if ($CustomerPropertyDimensions) {
            $LocalVarQueryParameters['CustomerPropertyDimensions'] = $CustomerPropertyDimensions
        }

        if ($CustomerCensusTractInfo) {
            $LocalVarQueryParameters['CustomerCensusTractInfo'] = $CustomerCensusTractInfo
        }

        if ($CustomerTechNote) {
            $LocalVarQueryParameters['CustomerTechNote'] = $CustomerTechNote
        }

        if ($CustomerMemo) {
            $LocalVarQueryParameters['CustomerMemo'] = $CustomerMemo
        }

        if ($CustomerStatementTypeMinValue) {
            $LocalVarQueryParameters['CustomerStatementTypeMinValue'] = $CustomerStatementTypeMinValue
        }

        if ($CustomerStatementTypeMaxValue) {
            $LocalVarQueryParameters['CustomerStatementTypeMaxValue'] = $CustomerStatementTypeMaxValue
        }

        if ($CustomerIsMasterAccount) {
            $LocalVarQueryParameters['CustomerIsMasterAccount'] = $CustomerIsMasterAccount
        }

        if ($BillingType) {
            $LocalVarQueryParameters['BillingType'] = $BillingType
        }

        if ($CustomerNoInterest) {
            $LocalVarQueryParameters['CustomerNoInterest'] = $CustomerNoInterest
        }

        if ($CustomerPhMinValue) {
            $LocalVarQueryParameters['CustomerPhMinValue'] = $CustomerPhMinValue
        }

        if ($CustomerPhMaxValue) {
            $LocalVarQueryParameters['CustomerPhMaxValue'] = $CustomerPhMaxValue
        }

        if ($CustomerCollectionDateMinValue) {
            $LocalVarQueryParameters['CustomerCollectionDateMinValue'] = $CustomerCollectionDateMinValue
        }

        if ($CustomerCollectionDateMaxValue) {
            $LocalVarQueryParameters['CustomerCollectionDateMaxValue'] = $CustomerCollectionDateMaxValue
        }

        if ($DiscountCode) {
            $LocalVarQueryParameters['DiscountCode'] = $DiscountCode
        }

        if ($CarrierRoute) {
            $LocalVarQueryParameters['CarrierRoute'] = $CarrierRoute
        }

        if ($CustomerReferenceID) {
            $LocalVarQueryParameters['CustomerReferenceID'] = $CustomerReferenceID
        }

        if ($CustomerUnitCode) {
            $LocalVarQueryParameters['CustomerUnitCode'] = $CustomerUnitCode
        }

        if ($CustomerNoCreditHold) {
            $LocalVarQueryParameters['CustomerNoCreditHold'] = $CustomerNoCreditHold
        }

        if ($CustomerTrackingID) {
            $LocalVarQueryParameters['CustomerTrackingID'] = $CustomerTrackingID
        }

        if ($CustomerUserID) {
            $LocalVarQueryParameters['CustomerUserID'] = $CustomerUserID
        }

        if ($CustomerPassword) {
            $LocalVarQueryParameters['CustomerPassword'] = $CustomerPassword
        }

        if ($CustomerCollectionExportDateMinValue) {
            $LocalVarQueryParameters['CustomerCollectionExportDateMinValue'] = $CustomerCollectionExportDateMinValue
        }

        if ($CustomerCollectionExportDateMaxValue) {
            $LocalVarQueryParameters['CustomerCollectionExportDateMaxValue'] = $CustomerCollectionExportDateMaxValue
        }

        if ($CustomerCountyID) {
            $LocalVarQueryParameters['CustomerCountyID'] = $CustomerCountyID
        }

        if ($CustomerMemoAlert) {
            $LocalVarQueryParameters['CustomerMemoAlert'] = $CustomerMemoAlert
        }

        if ($CustomerSizeSource) {
            $LocalVarQueryParameters['CustomerSizeSource'] = $CustomerSizeSource
        }

        if ($BillingEmail) {
            $LocalVarQueryParameters['BillingEmail'] = $BillingEmail
        }

        if ($Records) {
            $LocalVarQueryParameters['Records'] = $Records
        }

        if ($Offset) {
            $LocalVarQueryParameters['Offset'] = $Offset
        }

        if ($CreatedMinValue) {
            $LocalVarQueryParameters['CreatedMinValue'] = $CreatedMinValue
        }

        if ($CreatedMaxValue) {
            $LocalVarQueryParameters['CreatedMaxValue'] = $CreatedMaxValue
        }

        if ($UpdatedMinValue) {
            $LocalVarQueryParameters['UpdatedMinValue'] = $UpdatedMinValue
        }

        if ($UpdatedMaxValue) {
            $LocalVarQueryParameters['UpdatedMaxValue'] = $UpdatedMaxValue
        }

        if ($Fields) {
            $LocalVarQueryParameters['fields'] = $Fields
        }

        $LocalVarResult = Invoke-RGSAApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Customer[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER MobileCustomerSearch
No description available.

.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Customer[]
#>
function Invoke-RGSACustomerSearchMobilePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${MobileCustomerSearch},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerSearchMobilePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Customer/SearchMobile'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerSearchMobilePost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarBodyParameter = $MobileCustomerSearch | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Customer[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Returns a list of customers that match the provided criteria.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER Fields


.PARAMETER CustomerSearch


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Customer[]
#>
function Invoke-RGSACustomerSearchPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Fields},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${CustomerSearch},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSACustomerSearchPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Customer/Search'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling customerSearchPost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        if ($Fields) {
            $LocalVarQueryParameters['fields'] = $Fields
        }

        $LocalVarBodyParameter = $CustomerSearch | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Customer[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

