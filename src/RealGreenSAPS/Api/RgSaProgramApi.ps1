#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

Returns a single program record that correseponds to the provided ID

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.

.PARAMETER ApiKey
API Key

.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Program
#>
function Invoke-RGSAProgramIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSAProgramIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/Program/{id}'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling programIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling programIdGet."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarResult = Invoke-RGSAApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Program" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Allows updating a program object without passing the entire object.

.DESCRIPTION

No description available.

.PARAMETER Id


.PARAMETER ApiKey
API Key

.PARAMETER Operation


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Program
#>
function Invoke-RGSAProgramIdPatch {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${Operation},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSAProgramIdPatch' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Program/{id}'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling programIdPatch."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling programIdPatch."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarBodyParameter = ConvertTo-Json @($Operation) -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Program" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Returns all package information.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Package[]
#>
function Invoke-RGSAProgramPackageAllGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSAProgramPackageAllGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/Program/Package/All'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling programPackageAllGet."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarResult = Invoke-RGSAApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Package[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Returns detailed package information for the package with the specified ID.

.DESCRIPTION

No description available.

.PARAMETER Id


.PARAMETER ApiKey
API Key

.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

FullPackage
#>
function Invoke-RGSAProgramPackageIdGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSAProgramPackageIdGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/Program/Package/{id}'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling programPackageIdGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling programPackageIdGet."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarResult = Invoke-RGSAApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "FullPackage" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Adds the programs/special jobs contained within the package to the customers account.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER SimplePackageDTO


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Int32[][]
#>
function Invoke-RGSAProgramPackagePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${SimplePackageDTO},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSAProgramPackagePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Program/Package'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling programPackagePost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarBodyParameter = $SimplePackageDTO | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Int32[][]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Inserts and program and it's corresponding services.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER EmployeeId
No description available.

.PARAMETER FullProgram


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Int32
#>
function Invoke-RGSAProgramPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EmployeeId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${FullProgram},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSAProgramPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Program'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling programPost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        if ($EmployeeId) {
            $LocalVarQueryParameters['employeeId'] = $EmployeeId
        }

        $LocalVarBodyParameter = $FullProgram | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Int32" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update a program record using the entire model.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER Program


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Boolean
#>
function Invoke-RGSAProgramPut {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${Program},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSAProgramPut' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Program'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling programPut."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarBodyParameter = $Program | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Boolean" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Returns an accurate pricing quote for the supplied program definition IDs

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER ProgramPriceRequest


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ProgramPrice[]
#>
function Invoke-RGSAProgramQuoteBuildPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${ProgramPriceRequest},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSAProgramQuoteBuildPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Program/Quote/Build'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling programQuoteBuildPost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarBodyParameter = $ProgramPriceRequest | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ProgramPrice[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Returns gross price, discount amounts, and net revenue for the specified programs.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER ProgramID


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ProgramRevenue[]
#>
function Invoke-RGSAProgramRevenuePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${ProgramID},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSAProgramRevenuePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Program/Revenue'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling programRevenuePost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarBodyParameter = $ProgramID | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ProgramRevenue[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Perform a search for all customer programs and special jobs that match the provided criteria.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER ID
No description available.

.PARAMETER CustomerNumber
No description available.

.PARAMETER Status
No description available.

.PARAMETER ProgramDefinitionID
No description available.

.PARAMETER SizeMinValue
No description available.

.PARAMETER SizeMaxValue
No description available.

.PARAMETER SourceCode
No description available.

.PARAMETER DateSoldMinValue
No description available.

.PARAMETER DateSoldMaxValue
No description available.

.PARAMETER TechnicianNote
No description available.

.PARAMETER TechnicianNoteExpirationMinValue
No description available.

.PARAMETER TechnicianNoteExpirationMaxValue
No description available.

.PARAMETER CustomerNote
No description available.

.PARAMETER CustomerNoteExpirationMinValue
No description available.

.PARAMETER CustomerNoteExpirationMaxValue
No description available.

.PARAMETER EstimateRequestDateMinValue
No description available.

.PARAMETER EstimateRequestDateMaxValue
No description available.

.PARAMETER Route
No description available.

.PARAMETER DayCode
No description available.

.PARAMETER Sequence
No description available.

.PARAMETER SoldBy1MinValue
No description available.

.PARAMETER SoldBy1MaxValue
No description available.

.PARAMETER SoldBy2MinValue
No description available.

.PARAMETER SoldBy2MaxValue
No description available.

.PARAMETER DiscountCode
No description available.

.PARAMETER StandardPriceMinValue
No description available.

.PARAMETER StandardPriceMaxValue
No description available.

.PARAMETER AveragePriceMinValue
No description available.

.PARAMETER AveragePriceMaxValue
No description available.

.PARAMETER PriceMinValue
No description available.

.PARAMETER PriceMaxValue
No description available.

.PARAMETER NumberOfServicesMinValue
No description available.

.PARAMETER NumberOfServicesMaxValue
No description available.

.PARAMETER BillingType
No description available.

.PARAMETER RejectCode
No description available.

.PARAMETER RejectDateMinValue
No description available.

.PARAMETER RejectDateMaxValue
No description available.

.PARAMETER CancelCode
No description available.

.PARAMETER CancelDateMinValue
No description available.

.PARAMETER CancelDateMaxValue
No description available.

.PARAMETER CanceledBy
No description available.

.PARAMETER HoldCOde
No description available.

.PARAMETER HoldBeginMinValue
No description available.

.PARAMETER HoldBeginMaxValue
No description available.

.PARAMETER HoldDateMinValue
No description available.

.PARAMETER HoldDateMaxValue
No description available.

.PARAMETER LatestDependentServiceCompletionDateMinValue
No description available.

.PARAMETER LatestDependentServiceCompletionDateMaxValue
No description available.

.PARAMETER EstimateRequestTakenBy
No description available.

.PARAMETER EstimatedBy
No description available.

.PARAMETER EstimatePrintedMinValue
No description available.

.PARAMETER EstimatePrintedMaxValue
No description available.

.PARAMETER EstimateGivenMinValue
No description available.

.PARAMETER EstimateGivenMaxValue
No description available.

.PARAMETER ContactDateMinValue
No description available.

.PARAMETER ContactDateMaxValue
No description available.

.PARAMETER CallBackDateMinValue
No description available.

.PARAMETER CallBackDateMaxValue
No description available.

.PARAMETER CustomerLetterID
No description available.

.PARAMETER IncludeInConfirmationLetter
No description available.

.PARAMETER AverageTimeMinValue
No description available.

.PARAMETER AverageTimeMaxValue
No description available.

.PARAMETER Complete
No description available.

.PARAMETER Repeat
No description available.

.PARAMETER RepeatEvery
No description available.

.PARAMETER EndOnMinValue
No description available.

.PARAMETER EndOnMaxValue
No description available.

.PARAMETER RepeatBy
No description available.

.PARAMETER CallAhead
No description available.

.PARAMETER ContractID
No description available.

.PARAMETER MaximumRepetitions
No description available.

.PARAMETER DoneToDateMinValue
No description available.

.PARAMETER DoneToDateMaxValue
No description available.

.PARAMETER IsAutoRenew
No description available.

.PARAMETER NextDateMinValue
No description available.

.PARAMETER NextDateMaxValue
No description available.

.PARAMETER TemporaryRoute
No description available.

.PARAMETER TemporarySequence
No description available.

.PARAMETER TemporaryDaycode
No description available.

.PARAMETER EstimateRequestedBy
No description available.

.PARAMETER EstimateReferredBy
No description available.

.PARAMETER LastPriceChangeMinValue
No description available.

.PARAMETER LastPriceChangeMaxValue
No description available.

.PARAMETER ServiceYearMinValue
No description available.

.PARAMETER ServiceYearMaxValue
No description available.

.PARAMETER DifficultyMinValue
No description available.

.PARAMETER DifficultyMaxValue
No description available.

.PARAMETER ConfirmationDateMinValue
No description available.

.PARAMETER ConfirmationDateMaxValue
No description available.

.PARAMETER PurchaseOrderNumber
No description available.

.PARAMETER ConfirmedBy
No description available.

.PARAMETER IsRenewed
No description available.

.PARAMETER WorkOrderPricing
No description available.

.PARAMETER IsFullProgram
No description available.

.PARAMETER PaymentPlanByEmployee
No description available.

.PARAMETER PaymentPlanDateMinValue
No description available.

.PARAMETER PaymentPlanDateMaxValue
No description available.

.PARAMETER LockSchedule
No description available.

.PARAMETER Records
No description available.

.PARAMETER Offset
No description available.

.PARAMETER CreatedMinValue
No description available.

.PARAMETER CreatedMaxValue
No description available.

.PARAMETER UpdatedMinValue
No description available.

.PARAMETER UpdatedMaxValue
No description available.

.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Program[]
#>
function Invoke-RGSAProgramSearchGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ID},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Status},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ProgramDefinitionID},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${SizeMinValue},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${SizeMaxValue},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SourceCode},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${DateSoldMinValue},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${DateSoldMaxValue},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TechnicianNote},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${TechnicianNoteExpirationMinValue},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${TechnicianNoteExpirationMaxValue},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomerNote},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CustomerNoteExpirationMinValue},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CustomerNoteExpirationMaxValue},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${EstimateRequestDateMinValue},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${EstimateRequestDateMaxValue},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Route},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DayCode},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Sequence},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SoldBy1MinValue},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SoldBy1MaxValue},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SoldBy2MinValue},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SoldBy2MaxValue},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${DiscountCode},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${StandardPriceMinValue},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${StandardPriceMaxValue},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${AveragePriceMinValue},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${AveragePriceMaxValue},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${PriceMinValue},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${PriceMaxValue},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${NumberOfServicesMinValue},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${NumberOfServicesMaxValue},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BillingType},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${RejectCode},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${RejectDateMinValue},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${RejectDateMaxValue},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${CancelCode},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CancelDateMinValue},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CancelDateMaxValue},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CanceledBy},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${HoldCOde},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${HoldBeginMinValue},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${HoldBeginMaxValue},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${HoldDateMinValue},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${HoldDateMaxValue},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${LatestDependentServiceCompletionDateMinValue},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${LatestDependentServiceCompletionDateMaxValue},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EstimateRequestTakenBy},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EstimatedBy},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${EstimatePrintedMinValue},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${EstimatePrintedMaxValue},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${EstimateGivenMinValue},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${EstimateGivenMaxValue},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${ContactDateMinValue},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${ContactDateMaxValue},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CallBackDateMinValue},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CallBackDateMaxValue},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${CustomerLetterID},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeInConfirmationLetter},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${AverageTimeMinValue},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${AverageTimeMaxValue},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Complete},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Repeat},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${RepeatEvery},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${EndOnMinValue},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${EndOnMaxValue},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RepeatBy},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${CallAhead},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${ContractID},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${MaximumRepetitions},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${DoneToDateMinValue},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${DoneToDateMaxValue},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IsAutoRenew},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${NextDateMinValue},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${NextDateMaxValue},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TemporaryRoute},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${TemporarySequence},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TemporaryDaycode},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EstimateRequestedBy},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${EstimateReferredBy},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${LastPriceChangeMinValue},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${LastPriceChangeMaxValue},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${ServiceYearMinValue},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${ServiceYearMaxValue},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${DifficultyMinValue},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${DifficultyMaxValue},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${ConfirmationDateMinValue},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${ConfirmationDateMaxValue},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PurchaseOrderNumber},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ConfirmedBy},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IsRenewed},
        [Parameter(Position = 93, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double]]
        ${WorkOrderPricing},
        [Parameter(Position = 94, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IsFullProgram},
        [Parameter(Position = 95, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PaymentPlanByEmployee},
        [Parameter(Position = 96, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${PaymentPlanDateMinValue},
        [Parameter(Position = 97, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${PaymentPlanDateMaxValue},
        [Parameter(Position = 98, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${LockSchedule},
        [Parameter(Position = 99, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Records},
        [Parameter(Position = 100, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 101, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CreatedMinValue},
        [Parameter(Position = 102, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CreatedMaxValue},
        [Parameter(Position = 103, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${UpdatedMinValue},
        [Parameter(Position = 104, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${UpdatedMaxValue},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSAProgramSearchGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/Program/Search'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling programSearchGet."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        if ($ID) {
            $LocalVarQueryParameters['ID'] = $ID
        }

        if ($CustomerNumber) {
            $LocalVarQueryParameters['CustomerNumber'] = $CustomerNumber
        }

        if ($Status) {
            $LocalVarQueryParameters['Status'] = $Status
        }

        if ($ProgramDefinitionID) {
            $LocalVarQueryParameters['ProgramDefinitionID'] = $ProgramDefinitionID
        }

        if ($SizeMinValue) {
            $LocalVarQueryParameters['SizeMinValue'] = $SizeMinValue
        }

        if ($SizeMaxValue) {
            $LocalVarQueryParameters['SizeMaxValue'] = $SizeMaxValue
        }

        if ($SourceCode) {
            $LocalVarQueryParameters['SourceCode'] = $SourceCode
        }

        if ($DateSoldMinValue) {
            $LocalVarQueryParameters['DateSoldMinValue'] = $DateSoldMinValue
        }

        if ($DateSoldMaxValue) {
            $LocalVarQueryParameters['DateSoldMaxValue'] = $DateSoldMaxValue
        }

        if ($TechnicianNote) {
            $LocalVarQueryParameters['TechnicianNote'] = $TechnicianNote
        }

        if ($TechnicianNoteExpirationMinValue) {
            $LocalVarQueryParameters['TechnicianNoteExpirationMinValue'] = $TechnicianNoteExpirationMinValue
        }

        if ($TechnicianNoteExpirationMaxValue) {
            $LocalVarQueryParameters['TechnicianNoteExpirationMaxValue'] = $TechnicianNoteExpirationMaxValue
        }

        if ($CustomerNote) {
            $LocalVarQueryParameters['CustomerNote'] = $CustomerNote
        }

        if ($CustomerNoteExpirationMinValue) {
            $LocalVarQueryParameters['CustomerNoteExpirationMinValue'] = $CustomerNoteExpirationMinValue
        }

        if ($CustomerNoteExpirationMaxValue) {
            $LocalVarQueryParameters['CustomerNoteExpirationMaxValue'] = $CustomerNoteExpirationMaxValue
        }

        if ($EstimateRequestDateMinValue) {
            $LocalVarQueryParameters['EstimateRequestDateMinValue'] = $EstimateRequestDateMinValue
        }

        if ($EstimateRequestDateMaxValue) {
            $LocalVarQueryParameters['EstimateRequestDateMaxValue'] = $EstimateRequestDateMaxValue
        }

        if ($Route) {
            $LocalVarQueryParameters['Route'] = $Route
        }

        if ($DayCode) {
            $LocalVarQueryParameters['DayCode'] = $DayCode
        }

        if ($Sequence) {
            $LocalVarQueryParameters['Sequence'] = $Sequence
        }

        if ($SoldBy1MinValue) {
            $LocalVarQueryParameters['SoldBy1MinValue'] = $SoldBy1MinValue
        }

        if ($SoldBy1MaxValue) {
            $LocalVarQueryParameters['SoldBy1MaxValue'] = $SoldBy1MaxValue
        }

        if ($SoldBy2MinValue) {
            $LocalVarQueryParameters['SoldBy2MinValue'] = $SoldBy2MinValue
        }

        if ($SoldBy2MaxValue) {
            $LocalVarQueryParameters['SoldBy2MaxValue'] = $SoldBy2MaxValue
        }

        if ($DiscountCode) {
            $LocalVarQueryParameters['DiscountCode'] = $DiscountCode
        }

        if ($StandardPriceMinValue) {
            $LocalVarQueryParameters['StandardPriceMinValue'] = $StandardPriceMinValue
        }

        if ($StandardPriceMaxValue) {
            $LocalVarQueryParameters['StandardPriceMaxValue'] = $StandardPriceMaxValue
        }

        if ($AveragePriceMinValue) {
            $LocalVarQueryParameters['AveragePriceMinValue'] = $AveragePriceMinValue
        }

        if ($AveragePriceMaxValue) {
            $LocalVarQueryParameters['AveragePriceMaxValue'] = $AveragePriceMaxValue
        }

        if ($PriceMinValue) {
            $LocalVarQueryParameters['PriceMinValue'] = $PriceMinValue
        }

        if ($PriceMaxValue) {
            $LocalVarQueryParameters['PriceMaxValue'] = $PriceMaxValue
        }

        if ($NumberOfServicesMinValue) {
            $LocalVarQueryParameters['NumberOfServicesMinValue'] = $NumberOfServicesMinValue
        }

        if ($NumberOfServicesMaxValue) {
            $LocalVarQueryParameters['NumberOfServicesMaxValue'] = $NumberOfServicesMaxValue
        }

        if ($BillingType) {
            $LocalVarQueryParameters['BillingType'] = $BillingType
        }

        if ($RejectCode) {
            $LocalVarQueryParameters['RejectCode'] = $RejectCode
        }

        if ($RejectDateMinValue) {
            $LocalVarQueryParameters['RejectDateMinValue'] = $RejectDateMinValue
        }

        if ($RejectDateMaxValue) {
            $LocalVarQueryParameters['RejectDateMaxValue'] = $RejectDateMaxValue
        }

        if ($CancelCode) {
            $LocalVarQueryParameters['CancelCode'] = $CancelCode
        }

        if ($CancelDateMinValue) {
            $LocalVarQueryParameters['CancelDateMinValue'] = $CancelDateMinValue
        }

        if ($CancelDateMaxValue) {
            $LocalVarQueryParameters['CancelDateMaxValue'] = $CancelDateMaxValue
        }

        if ($CanceledBy) {
            $LocalVarQueryParameters['CanceledBy'] = $CanceledBy
        }

        if ($HoldCOde) {
            $LocalVarQueryParameters['HoldCOde'] = $HoldCOde
        }

        if ($HoldBeginMinValue) {
            $LocalVarQueryParameters['HoldBeginMinValue'] = $HoldBeginMinValue
        }

        if ($HoldBeginMaxValue) {
            $LocalVarQueryParameters['HoldBeginMaxValue'] = $HoldBeginMaxValue
        }

        if ($HoldDateMinValue) {
            $LocalVarQueryParameters['HoldDateMinValue'] = $HoldDateMinValue
        }

        if ($HoldDateMaxValue) {
            $LocalVarQueryParameters['HoldDateMaxValue'] = $HoldDateMaxValue
        }

        if ($LatestDependentServiceCompletionDateMinValue) {
            $LocalVarQueryParameters['LatestDependentServiceCompletionDateMinValue'] = $LatestDependentServiceCompletionDateMinValue
        }

        if ($LatestDependentServiceCompletionDateMaxValue) {
            $LocalVarQueryParameters['LatestDependentServiceCompletionDateMaxValue'] = $LatestDependentServiceCompletionDateMaxValue
        }

        if ($EstimateRequestTakenBy) {
            $LocalVarQueryParameters['EstimateRequestTakenBy'] = $EstimateRequestTakenBy
        }

        if ($EstimatedBy) {
            $LocalVarQueryParameters['EstimatedBy'] = $EstimatedBy
        }

        if ($EstimatePrintedMinValue) {
            $LocalVarQueryParameters['EstimatePrintedMinValue'] = $EstimatePrintedMinValue
        }

        if ($EstimatePrintedMaxValue) {
            $LocalVarQueryParameters['EstimatePrintedMaxValue'] = $EstimatePrintedMaxValue
        }

        if ($EstimateGivenMinValue) {
            $LocalVarQueryParameters['EstimateGivenMinValue'] = $EstimateGivenMinValue
        }

        if ($EstimateGivenMaxValue) {
            $LocalVarQueryParameters['EstimateGivenMaxValue'] = $EstimateGivenMaxValue
        }

        if ($ContactDateMinValue) {
            $LocalVarQueryParameters['ContactDateMinValue'] = $ContactDateMinValue
        }

        if ($ContactDateMaxValue) {
            $LocalVarQueryParameters['ContactDateMaxValue'] = $ContactDateMaxValue
        }

        if ($CallBackDateMinValue) {
            $LocalVarQueryParameters['CallBackDateMinValue'] = $CallBackDateMinValue
        }

        if ($CallBackDateMaxValue) {
            $LocalVarQueryParameters['CallBackDateMaxValue'] = $CallBackDateMaxValue
        }

        if ($CustomerLetterID) {
            $LocalVarQueryParameters['CustomerLetterID'] = $CustomerLetterID
        }

        if ($IncludeInConfirmationLetter) {
            $LocalVarQueryParameters['IncludeInConfirmationLetter'] = $IncludeInConfirmationLetter
        }

        if ($AverageTimeMinValue) {
            $LocalVarQueryParameters['AverageTimeMinValue'] = $AverageTimeMinValue
        }

        if ($AverageTimeMaxValue) {
            $LocalVarQueryParameters['AverageTimeMaxValue'] = $AverageTimeMaxValue
        }

        if ($Complete) {
            $LocalVarQueryParameters['Complete'] = $Complete
        }

        if ($Repeat) {
            $LocalVarQueryParameters['Repeat'] = $Repeat
        }

        if ($RepeatEvery) {
            $LocalVarQueryParameters['RepeatEvery'] = $RepeatEvery
        }

        if ($EndOnMinValue) {
            $LocalVarQueryParameters['EndOnMinValue'] = $EndOnMinValue
        }

        if ($EndOnMaxValue) {
            $LocalVarQueryParameters['EndOnMaxValue'] = $EndOnMaxValue
        }

        if ($RepeatBy) {
            $LocalVarQueryParameters['RepeatBy'] = $RepeatBy
        }

        if ($CallAhead) {
            $LocalVarQueryParameters['CallAhead'] = $CallAhead
        }

        if ($ContractID) {
            $LocalVarQueryParameters['ContractID'] = $ContractID
        }

        if ($MaximumRepetitions) {
            $LocalVarQueryParameters['MaximumRepetitions'] = $MaximumRepetitions
        }

        if ($DoneToDateMinValue) {
            $LocalVarQueryParameters['DoneToDateMinValue'] = $DoneToDateMinValue
        }

        if ($DoneToDateMaxValue) {
            $LocalVarQueryParameters['DoneToDateMaxValue'] = $DoneToDateMaxValue
        }

        if ($IsAutoRenew) {
            $LocalVarQueryParameters['IsAutoRenew'] = $IsAutoRenew
        }

        if ($NextDateMinValue) {
            $LocalVarQueryParameters['NextDateMinValue'] = $NextDateMinValue
        }

        if ($NextDateMaxValue) {
            $LocalVarQueryParameters['NextDateMaxValue'] = $NextDateMaxValue
        }

        if ($TemporaryRoute) {
            $LocalVarQueryParameters['TemporaryRoute'] = $TemporaryRoute
        }

        if ($TemporarySequence) {
            $LocalVarQueryParameters['TemporarySequence'] = $TemporarySequence
        }

        if ($TemporaryDaycode) {
            $LocalVarQueryParameters['TemporaryDaycode'] = $TemporaryDaycode
        }

        if ($EstimateRequestedBy) {
            $LocalVarQueryParameters['EstimateRequestedBy'] = $EstimateRequestedBy
        }

        if ($EstimateReferredBy) {
            $LocalVarQueryParameters['EstimateReferredBy'] = $EstimateReferredBy
        }

        if ($LastPriceChangeMinValue) {
            $LocalVarQueryParameters['LastPriceChangeMinValue'] = $LastPriceChangeMinValue
        }

        if ($LastPriceChangeMaxValue) {
            $LocalVarQueryParameters['LastPriceChangeMaxValue'] = $LastPriceChangeMaxValue
        }

        if ($ServiceYearMinValue) {
            $LocalVarQueryParameters['ServiceYearMinValue'] = $ServiceYearMinValue
        }

        if ($ServiceYearMaxValue) {
            $LocalVarQueryParameters['ServiceYearMaxValue'] = $ServiceYearMaxValue
        }

        if ($DifficultyMinValue) {
            $LocalVarQueryParameters['DifficultyMinValue'] = $DifficultyMinValue
        }

        if ($DifficultyMaxValue) {
            $LocalVarQueryParameters['DifficultyMaxValue'] = $DifficultyMaxValue
        }

        if ($ConfirmationDateMinValue) {
            $LocalVarQueryParameters['ConfirmationDateMinValue'] = $ConfirmationDateMinValue
        }

        if ($ConfirmationDateMaxValue) {
            $LocalVarQueryParameters['ConfirmationDateMaxValue'] = $ConfirmationDateMaxValue
        }

        if ($PurchaseOrderNumber) {
            $LocalVarQueryParameters['PurchaseOrderNumber'] = $PurchaseOrderNumber
        }

        if ($ConfirmedBy) {
            $LocalVarQueryParameters['ConfirmedBy'] = $ConfirmedBy
        }

        if ($IsRenewed) {
            $LocalVarQueryParameters['IsRenewed'] = $IsRenewed
        }

        if ($WorkOrderPricing) {
            $LocalVarQueryParameters['WorkOrderPricing'] = $WorkOrderPricing
        }

        if ($IsFullProgram) {
            $LocalVarQueryParameters['IsFullProgram'] = $IsFullProgram
        }

        if ($PaymentPlanByEmployee) {
            $LocalVarQueryParameters['PaymentPlanByEmployee'] = $PaymentPlanByEmployee
        }

        if ($PaymentPlanDateMinValue) {
            $LocalVarQueryParameters['PaymentPlanDateMinValue'] = $PaymentPlanDateMinValue
        }

        if ($PaymentPlanDateMaxValue) {
            $LocalVarQueryParameters['PaymentPlanDateMaxValue'] = $PaymentPlanDateMaxValue
        }

        if ($LockSchedule) {
            $LocalVarQueryParameters['LockSchedule'] = $LockSchedule
        }

        if ($Records) {
            $LocalVarQueryParameters['Records'] = $Records
        }

        if ($Offset) {
            $LocalVarQueryParameters['Offset'] = $Offset
        }

        if ($CreatedMinValue) {
            $LocalVarQueryParameters['CreatedMinValue'] = $CreatedMinValue
        }

        if ($CreatedMaxValue) {
            $LocalVarQueryParameters['CreatedMaxValue'] = $CreatedMaxValue
        }

        if ($UpdatedMinValue) {
            $LocalVarQueryParameters['UpdatedMinValue'] = $UpdatedMinValue
        }

        if ($UpdatedMaxValue) {
            $LocalVarQueryParameters['UpdatedMaxValue'] = $UpdatedMaxValue
        }

        $LocalVarResult = Invoke-RGSAApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Program[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Perform a search for all customer programs and special jobs that match the provided criteria.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER ProgramSearch


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Program[]
#>
function Invoke-RGSAProgramSearchPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${ProgramSearch},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSAProgramSearchPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Program/Search'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling programSearchPost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarBodyParameter = $ProgramSearch | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Program[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Builds a program and its service records.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER SimpleProgramDTO


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

FullProgram
#>
function Invoke-RGSAProgramSimpleBuildPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${SimpleProgramDTO},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSAProgramSimpleBuildPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Program/Simple/Build'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling programSimpleBuildPost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarBodyParameter = $SimpleProgramDTO | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "FullProgram" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Inserts a program using minimum requirements.

.DESCRIPTION

No description available.

.PARAMETER ApiKey
API Key

.PARAMETER SimpleProgramDTO


.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Int32
#>
function Invoke-RGSAProgramSimplePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ApiKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${SimpleProgramDTO},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-RGSAProgramSimplePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-RGSAConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json-patch+json', 'application/json', 'text/json', 'application/*+json')

        $LocalVarUri = '/Program/Simple'

        if (!$ApiKey) {
            throw "Error! The required parameter `ApiKey` missing when calling programSimplePost."
        }
        $LocalVarHeaderParameters['apiKey'] = $ApiKey

        $LocalVarBodyParameter = $SimpleProgramDTO | ConvertTo-Json -Depth 100

        $LocalVarResult = Invoke-RGSAApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Int32" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

