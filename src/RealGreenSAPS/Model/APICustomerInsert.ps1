#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CustNo
No description available.
.PARAMETER Firstname
No description available.
.PARAMETER Lastname
No description available.
.PARAMETER Company
No description available.
.PARAMETER Address
No description available.
.PARAMETER Streetno
No description available.
.PARAMETER Streetnm
No description available.
.PARAMETER Predir
No description available.
.PARAMETER Postdir
No description available.
.PARAMETER Suffix
No description available.
.PARAMETER City
No description available.
.PARAMETER State
No description available.
.PARAMETER Zip
No description available.
.PARAMETER Email
No description available.
.PARAMETER PhoneHome
No description available.
.PARAMETER PhoneWork
No description available.
.PARAMETER PhoneCell
No description available.
.PARAMETER PhoneOthr
No description available.
.PARAMETER PhonePage
No description available.
.PARAMETER PhoneFax
No description available.
.PARAMETER Sourcecd
No description available.
.PARAMETER Size
No description available.
.PARAMETER Status
No description available.
.PARAMETER CompId
No description available.
.PARAMETER Altnum
No description available.
.PARAMETER Trackingid
No description available.
.PARAMETER RC
No description available.
.PARAMETER TitleCd
No description available.
.PARAMETER Route
No description available.
.PARAMETER AuditEmployeeID
No description available.
.PARAMETER Latitude
No description available.
.PARAMETER Longitude
No description available.
.PARAMETER Taxid1
No description available.
.PARAMETER Taxid2
No description available.
.PARAMETER Taxid3
No description available.
.PARAMETER CreditLim
No description available.
.PARAMETER Unitcode
No description available.
.OUTPUTS

APICustomerInsert<PSCustomObject>
#>

function Initialize-RGSAAPICustomerInsert {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${CustNo} = 0,
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Firstname} = "",
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Lastname} = "",
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Company} = "",
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Address} = "",
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Streetno},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Streetnm},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Predir},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Postdir},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Suffix},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${City} = "",
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${State} = "",
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Zip} = "",
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Email},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PhoneHome},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PhoneWork},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PhoneCell},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PhoneOthr},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PhonePage},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PhoneFax},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Sourcecd},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Size},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status} = "0",
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CompId},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Altnum},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Trackingid},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RC} = "R",
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TitleCd},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Route},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AuditEmployeeID},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Latitude},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Longitude},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Taxid1},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Taxid2},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Taxid3},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${CreditLim},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Unitcode}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSAAPICustomerInsert' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $CustNo) {
            throw "invalid value for 'CustNo', 'CustNo' cannot be null."
        }

        if ($null -eq $Firstname) {
            throw "invalid value for 'Firstname', 'Firstname' cannot be null."
        }

        if ($Firstname.length -gt 25) {
            throw "invalid value for 'Firstname', the character length must be smaller than or equal to 25."
        }

        if ($Firstname.length -lt 1) {
            throw "invalid value for 'Firstname', the character length must be great than or equal to 1."
        }

        if ($null -eq $Lastname) {
            throw "invalid value for 'Lastname', 'Lastname' cannot be null."
        }

        if ($Lastname.length -gt 35) {
            throw "invalid value for 'Lastname', the character length must be smaller than or equal to 35."
        }

        if ($Lastname.length -lt 1) {
            throw "invalid value for 'Lastname', the character length must be great than or equal to 1."
        }

        if (!$Company -and $Company.length -gt 35) {
            throw "invalid value for 'Company', the character length must be smaller than or equal to 35."
        }

        if (!$Address -and $Address.length -gt 150) {
            throw "invalid value for 'Address', the character length must be smaller than or equal to 150."
        }

        if (!$Streetno -and $Streetno.length -gt 10) {
            throw "invalid value for 'Streetno', the character length must be smaller than or equal to 10."
        }

        if (!$Streetnm -and $Streetnm.length -gt 28) {
            throw "invalid value for 'Streetnm', the character length must be smaller than or equal to 28."
        }

        if (!$Predir -and $Predir.length -gt 2) {
            throw "invalid value for 'Predir', the character length must be smaller than or equal to 2."
        }

        if (!$Postdir -and $Postdir.length -gt 2) {
            throw "invalid value for 'Postdir', the character length must be smaller than or equal to 2."
        }

        if (!$Suffix -and $Suffix.length -gt 4) {
            throw "invalid value for 'Suffix', the character length must be smaller than or equal to 4."
        }

        if (!$City -and $City.length -gt 28) {
            throw "invalid value for 'City', the character length must be smaller than or equal to 28."
        }

        if (!$State -and $State.length -gt 3) {
            throw "invalid value for 'State', the character length must be smaller than or equal to 3."
        }

        if ($null -eq $Zip) {
            throw "invalid value for 'Zip', 'Zip' cannot be null."
        }

        if ($Zip.length -gt 9) {
            throw "invalid value for 'Zip', the character length must be smaller than or equal to 9."
        }

        if ($Zip.length -lt 1) {
            throw "invalid value for 'Zip', the character length must be great than or equal to 1."
        }

        if (!$Email -and $Email.length -gt 100) {
            throw "invalid value for 'Email', the character length must be smaller than or equal to 100."
        }

        if (!$PhoneHome -and $PhoneHome.length -gt 20) {
            throw "invalid value for 'PhoneHome', the character length must be smaller than or equal to 20."
        }

        if (!$PhoneWork -and $PhoneWork.length -gt 20) {
            throw "invalid value for 'PhoneWork', the character length must be smaller than or equal to 20."
        }

        if (!$PhoneCell -and $PhoneCell.length -gt 20) {
            throw "invalid value for 'PhoneCell', the character length must be smaller than or equal to 20."
        }

        if (!$PhoneOthr -and $PhoneOthr.length -gt 20) {
            throw "invalid value for 'PhoneOthr', the character length must be smaller than or equal to 20."
        }

        if (!$PhonePage -and $PhonePage.length -gt 20) {
            throw "invalid value for 'PhonePage', the character length must be smaller than or equal to 20."
        }

        if (!$PhoneFax -and $PhoneFax.length -gt 20) {
            throw "invalid value for 'PhoneFax', the character length must be smaller than or equal to 20."
        }

        if ($null -eq $Status) {
            throw "invalid value for 'Status', 'Status' cannot be null."
        }

        if ($Status.length -gt 1) {
            throw "invalid value for 'Status', the character length must be smaller than or equal to 1."
        }

        if ($Status.length -lt 1) {
            throw "invalid value for 'Status', the character length must be great than or equal to 1."
        }

        if (!$Altnum -and $Altnum.length -gt 25) {
            throw "invalid value for 'Altnum', the character length must be smaller than or equal to 25."
        }

        if (!$Trackingid -and $Trackingid.length -gt 15) {
            throw "invalid value for 'Trackingid', the character length must be smaller than or equal to 15."
        }

        if ($null -eq $RC) {
            throw "invalid value for 'RC', 'RC' cannot be null."
        }

        if ($RC.length -gt 1) {
            throw "invalid value for 'RC', the character length must be smaller than or equal to 1."
        }

        if ($RC.length -lt 1) {
            throw "invalid value for 'RC', the character length must be great than or equal to 1."
        }

        if (!$Route -and $Route.length -gt 8) {
            throw "invalid value for 'Route', the character length must be smaller than or equal to 8."
        }

        if ($null -eq $AuditEmployeeID) {
            throw "invalid value for 'AuditEmployeeID', 'AuditEmployeeID' cannot be null."
        }

        if ($AuditEmployeeID.length -gt 8) {
            throw "invalid value for 'AuditEmployeeID', the character length must be smaller than or equal to 8."
        }

        if ($AuditEmployeeID.length -lt 1) {
            throw "invalid value for 'AuditEmployeeID', the character length must be great than or equal to 1."
        }

        if (!$Taxid1 -and $Taxid1.length -gt 3) {
            throw "invalid value for 'Taxid1', the character length must be smaller than or equal to 3."
        }

        if (!$Taxid2 -and $Taxid2.length -gt 3) {
            throw "invalid value for 'Taxid2', the character length must be smaller than or equal to 3."
        }

        if (!$Taxid3 -and $Taxid3.length -gt 3) {
            throw "invalid value for 'Taxid3', the character length must be smaller than or equal to 3."
        }


        $PSO = [PSCustomObject]@{
            "cust_no" = ${CustNo}
            "firstname" = ${Firstname}
            "lastname" = ${Lastname}
            "company" = ${Company}
            "address" = ${Address}
            "streetno" = ${Streetno}
            "streetnm" = ${Streetnm}
            "predir" = ${Predir}
            "postdir" = ${Postdir}
            "suffix" = ${Suffix}
            "city" = ${City}
            "state" = ${State}
            "zip" = ${Zip}
            "email" = ${Email}
            "phone_home" = ${PhoneHome}
            "phone_work" = ${PhoneWork}
            "phone_cell" = ${PhoneCell}
            "phone_othr" = ${PhoneOthr}
            "phone_page" = ${PhonePage}
            "phone_fax" = ${PhoneFax}
            "sourcecd" = ${Sourcecd}
            "size" = ${Size}
            "status" = ${Status}
            "comp_id" = ${CompId}
            "altnum" = ${Altnum}
            "trackingid" = ${Trackingid}
            "r_c" = ${RC}
            "title_cd" = ${TitleCd}
            "route" = ${Route}
            "auditEmployeeID" = ${AuditEmployeeID}
            "latitude" = ${Latitude}
            "longitude" = ${Longitude}
            "taxid1" = ${Taxid1}
            "taxid2" = ${Taxid2}
            "taxid3" = ${Taxid3}
            "credit_lim" = ${CreditLim}
            "unitcode" = ${Unitcode}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to APICustomerInsert<PSCustomObject>

.DESCRIPTION

Convert from JSON to APICustomerInsert<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

APICustomerInsert<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToAPICustomerInsert {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSAAPICustomerInsert' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSAAPICustomerInsert
        $AllProperties = ("cust_no", "firstname", "lastname", "company", "address", "streetno", "streetnm", "predir", "postdir", "suffix", "city", "state", "zip", "email", "phone_home", "phone_work", "phone_cell", "phone_othr", "phone_page", "phone_fax", "sourcecd", "size", "status", "comp_id", "altnum", "trackingid", "r_c", "title_cd", "route", "auditEmployeeID", "latitude", "longitude", "taxid1", "taxid2", "taxid3", "credit_lim", "unitcode")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'cust_no' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cust_no"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cust_no' missing."
        } else {
            $CustNo = $JsonParameters.PSobject.Properties["cust_no"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "firstname"))) {
            throw "Error! JSON cannot be serialized due to the required property 'firstname' missing."
        } else {
            $Firstname = $JsonParameters.PSobject.Properties["firstname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastname"))) {
            throw "Error! JSON cannot be serialized due to the required property 'lastname' missing."
        } else {
            $Lastname = $JsonParameters.PSobject.Properties["lastname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zip"))) {
            throw "Error! JSON cannot be serialized due to the required property 'zip' missing."
        } else {
            $Zip = $JsonParameters.PSobject.Properties["zip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) {
            throw "Error! JSON cannot be serialized due to the required property 'status' missing."
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "r_c"))) {
            throw "Error! JSON cannot be serialized due to the required property 'r_c' missing."
        } else {
            $RC = $JsonParameters.PSobject.Properties["r_c"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "auditEmployeeID"))) {
            throw "Error! JSON cannot be serialized due to the required property 'auditEmployeeID' missing."
        } else {
            $AuditEmployeeID = $JsonParameters.PSobject.Properties["auditEmployeeID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "company"))) { #optional property not found
            $Company = $null
        } else {
            $Company = $JsonParameters.PSobject.Properties["company"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "address"))) { #optional property not found
            $Address = $null
        } else {
            $Address = $JsonParameters.PSobject.Properties["address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "streetno"))) { #optional property not found
            $Streetno = $null
        } else {
            $Streetno = $JsonParameters.PSobject.Properties["streetno"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "streetnm"))) { #optional property not found
            $Streetnm = $null
        } else {
            $Streetnm = $JsonParameters.PSobject.Properties["streetnm"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "predir"))) { #optional property not found
            $Predir = $null
        } else {
            $Predir = $JsonParameters.PSobject.Properties["predir"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "postdir"))) { #optional property not found
            $Postdir = $null
        } else {
            $Postdir = $JsonParameters.PSobject.Properties["postdir"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "suffix"))) { #optional property not found
            $Suffix = $null
        } else {
            $Suffix = $JsonParameters.PSobject.Properties["suffix"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "city"))) { #optional property not found
            $City = $null
        } else {
            $City = $JsonParameters.PSobject.Properties["city"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "email"))) { #optional property not found
            $Email = $null
        } else {
            $Email = $JsonParameters.PSobject.Properties["email"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "phone_home"))) { #optional property not found
            $PhoneHome = $null
        } else {
            $PhoneHome = $JsonParameters.PSobject.Properties["phone_home"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "phone_work"))) { #optional property not found
            $PhoneWork = $null
        } else {
            $PhoneWork = $JsonParameters.PSobject.Properties["phone_work"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "phone_cell"))) { #optional property not found
            $PhoneCell = $null
        } else {
            $PhoneCell = $JsonParameters.PSobject.Properties["phone_cell"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "phone_othr"))) { #optional property not found
            $PhoneOthr = $null
        } else {
            $PhoneOthr = $JsonParameters.PSobject.Properties["phone_othr"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "phone_page"))) { #optional property not found
            $PhonePage = $null
        } else {
            $PhonePage = $JsonParameters.PSobject.Properties["phone_page"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "phone_fax"))) { #optional property not found
            $PhoneFax = $null
        } else {
            $PhoneFax = $JsonParameters.PSobject.Properties["phone_fax"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourcecd"))) { #optional property not found
            $Sourcecd = $null
        } else {
            $Sourcecd = $JsonParameters.PSobject.Properties["sourcecd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comp_id"))) { #optional property not found
            $CompId = $null
        } else {
            $CompId = $JsonParameters.PSobject.Properties["comp_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "altnum"))) { #optional property not found
            $Altnum = $null
        } else {
            $Altnum = $JsonParameters.PSobject.Properties["altnum"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "trackingid"))) { #optional property not found
            $Trackingid = $null
        } else {
            $Trackingid = $JsonParameters.PSobject.Properties["trackingid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title_cd"))) { #optional property not found
            $TitleCd = $null
        } else {
            $TitleCd = $JsonParameters.PSobject.Properties["title_cd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "route"))) { #optional property not found
            $Route = $null
        } else {
            $Route = $JsonParameters.PSobject.Properties["route"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "latitude"))) { #optional property not found
            $Latitude = $null
        } else {
            $Latitude = $JsonParameters.PSobject.Properties["latitude"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "longitude"))) { #optional property not found
            $Longitude = $null
        } else {
            $Longitude = $JsonParameters.PSobject.Properties["longitude"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "taxid1"))) { #optional property not found
            $Taxid1 = $null
        } else {
            $Taxid1 = $JsonParameters.PSobject.Properties["taxid1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "taxid2"))) { #optional property not found
            $Taxid2 = $null
        } else {
            $Taxid2 = $JsonParameters.PSobject.Properties["taxid2"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "taxid3"))) { #optional property not found
            $Taxid3 = $null
        } else {
            $Taxid3 = $JsonParameters.PSobject.Properties["taxid3"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "credit_lim"))) { #optional property not found
            $CreditLim = $null
        } else {
            $CreditLim = $JsonParameters.PSobject.Properties["credit_lim"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unitcode"))) { #optional property not found
            $Unitcode = $null
        } else {
            $Unitcode = $JsonParameters.PSobject.Properties["unitcode"].value
        }

        $PSO = [PSCustomObject]@{
            "cust_no" = ${CustNo}
            "firstname" = ${Firstname}
            "lastname" = ${Lastname}
            "company" = ${Company}
            "address" = ${Address}
            "streetno" = ${Streetno}
            "streetnm" = ${Streetnm}
            "predir" = ${Predir}
            "postdir" = ${Postdir}
            "suffix" = ${Suffix}
            "city" = ${City}
            "state" = ${State}
            "zip" = ${Zip}
            "email" = ${Email}
            "phone_home" = ${PhoneHome}
            "phone_work" = ${PhoneWork}
            "phone_cell" = ${PhoneCell}
            "phone_othr" = ${PhoneOthr}
            "phone_page" = ${PhonePage}
            "phone_fax" = ${PhoneFax}
            "sourcecd" = ${Sourcecd}
            "size" = ${Size}
            "status" = ${Status}
            "comp_id" = ${CompId}
            "altnum" = ${Altnum}
            "trackingid" = ${Trackingid}
            "r_c" = ${RC}
            "title_cd" = ${TitleCd}
            "route" = ${Route}
            "auditEmployeeID" = ${AuditEmployeeID}
            "latitude" = ${Latitude}
            "longitude" = ${Longitude}
            "taxid1" = ${Taxid1}
            "taxid2" = ${Taxid2}
            "taxid3" = ${Taxid3}
            "credit_lim" = ${CreditLim}
            "unitcode" = ${Unitcode}
        }

        return $PSO
    }

}

