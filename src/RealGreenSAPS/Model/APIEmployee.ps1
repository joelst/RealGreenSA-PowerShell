#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER Email
No description available.
.PARAMETER Position
No description available.
.PARAMETER Department
No description available.
.PARAMETER DateOfBirth
No description available.
.PARAMETER DateOfHire
No description available.
.PARAMETER DateOfTermination
No description available.
.PARAMETER Comments
No description available.
.PARAMETER Active
No description available.
.PARAMETER ApplicatorLicenseNumber
No description available.
.PARAMETER EmployeeNumber
No description available.
.PARAMETER CompanyID
No description available.
.OUTPUTS

APIEmployee<PSCustomObject>
#>

function Initialize-RgSaAPIEmployee {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Email},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Position},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Department},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateOfBirth},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateOfHire},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateOfTermination},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Active},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApplicatorLicenseNumber},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmployeeNumber},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CompanyID}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaAPIEmployee' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "email" = ${Email}
            "position" = ${Position}
            "department" = ${Department}
            "dateOfBirth" = ${DateOfBirth}
            "dateOfHire" = ${DateOfHire}
            "dateOfTermination" = ${DateOfTermination}
            "comments" = ${Comments}
            "active" = ${Active}
            "applicatorLicenseNumber" = ${ApplicatorLicenseNumber}
            "employeeNumber" = ${EmployeeNumber}
            "companyID" = ${CompanyID}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to APIEmployee<PSCustomObject>

.DESCRIPTION

Convert from JSON to APIEmployee<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

APIEmployee<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToAPIEmployee {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaAPIEmployee' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaAPIEmployee
        $AllProperties = ("id", "name", "email", "position", "department", "dateOfBirth", "dateOfHire", "dateOfTermination", "comments", "active", "applicatorLicenseNumber", "employeeNumber", "companyID")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "email"))) { #optional property not found
            $Email = $null
        } else {
            $Email = $JsonParameters.PSobject.Properties["email"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "position"))) { #optional property not found
            $Position = $null
        } else {
            $Position = $JsonParameters.PSobject.Properties["position"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "department"))) { #optional property not found
            $Department = $null
        } else {
            $Department = $JsonParameters.PSobject.Properties["department"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateOfBirth"))) { #optional property not found
            $DateOfBirth = $null
        } else {
            $DateOfBirth = $JsonParameters.PSobject.Properties["dateOfBirth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateOfHire"))) { #optional property not found
            $DateOfHire = $null
        } else {
            $DateOfHire = $JsonParameters.PSobject.Properties["dateOfHire"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateOfTermination"))) { #optional property not found
            $DateOfTermination = $null
        } else {
            $DateOfTermination = $JsonParameters.PSobject.Properties["dateOfTermination"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "active"))) { #optional property not found
            $Active = $null
        } else {
            $Active = $JsonParameters.PSobject.Properties["active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "applicatorLicenseNumber"))) { #optional property not found
            $ApplicatorLicenseNumber = $null
        } else {
            $ApplicatorLicenseNumber = $JsonParameters.PSobject.Properties["applicatorLicenseNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "employeeNumber"))) { #optional property not found
            $EmployeeNumber = $null
        } else {
            $EmployeeNumber = $JsonParameters.PSobject.Properties["employeeNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "companyID"))) { #optional property not found
            $CompanyID = $null
        } else {
            $CompanyID = $JsonParameters.PSobject.Properties["companyID"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "email" = ${Email}
            "position" = ${Position}
            "department" = ${Department}
            "dateOfBirth" = ${DateOfBirth}
            "dateOfHire" = ${DateOfHire}
            "dateOfTermination" = ${DateOfTermination}
            "comments" = ${Comments}
            "active" = ${Active}
            "applicatorLicenseNumber" = ${ApplicatorLicenseNumber}
            "employeeNumber" = ${EmployeeNumber}
            "companyID" = ${CompanyID}
        }

        return $PSO
    }

}

