#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER EmployeeID
No description available.
.PARAMETER Name
No description available.
.PARAMETER CompanyID
No description available.
.OUTPUTS

APIEmployeeInsert<PSCustomObject>
#>

function Initialize-RgSaAPIEmployeeInsert {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmployeeID},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${CompanyID}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaAPIEmployeeInsert' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 30) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 30."
        }

        if ($Name.length -lt 1) {
            throw "invalid value for 'Name', the character length must be great than or equal to 1."
        }

        if ($null -eq $CompanyID) {
            throw "invalid value for 'CompanyID', 'CompanyID' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "employeeID" = ${EmployeeID}
            "name" = ${Name}
            "companyID" = ${CompanyID}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to APIEmployeeInsert<PSCustomObject>

.DESCRIPTION

Convert from JSON to APIEmployeeInsert<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

APIEmployeeInsert<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToAPIEmployeeInsert {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaAPIEmployeeInsert' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaAPIEmployeeInsert
        $AllProperties = ("employeeID", "name", "companyID")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "companyID"))) {
            throw "Error! JSON cannot be serialized due to the required property 'companyID' missing."
        } else {
            $CompanyID = $JsonParameters.PSobject.Properties["companyID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "employeeID"))) { #optional property not found
            $EmployeeID = $null
        } else {
            $EmployeeID = $JsonParameters.PSobject.Properties["employeeID"].value
        }

        $PSO = [PSCustomObject]@{
            "employeeID" = ${EmployeeID}
            "name" = ${Name}
            "companyID" = ${CompanyID}
        }

        return $PSO
    }

}

