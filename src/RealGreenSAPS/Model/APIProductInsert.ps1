#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ProductCode
No description available.
.PARAMETER Description
No description available.
.PARAMETER EpaNumber
No description available.
.PARAMETER OnHand
No description available.
.PARAMETER UnitCost
No description available.
.PARAMETER UnitPrice
No description available.
.PARAMETER ProductCategoryId
No description available.
.PARAMETER UnitofMeasure
No description available.
.PARAMETER ProposalNotes
No description available.
.PARAMETER CrewNotes
No description available.
.OUTPUTS

APIProductInsert<PSCustomObject>
#>

function Initialize-RGSAAPIProductInsert {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProductCode},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EpaNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${OnHand},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${UnitCost},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${UnitPrice},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ProductCategoryId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${UnitofMeasure},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProposalNotes},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CrewNotes}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSAAPIProductInsert' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $ProductCode) {
            throw "invalid value for 'ProductCode', 'ProductCode' cannot be null."
        }

        if ($ProductCode.length -lt 1) {
            throw "invalid value for 'ProductCode', the character length must be great than or equal to 1."
        }

        if ($null -eq $Description) {
            throw "invalid value for 'Description', 'Description' cannot be null."
        }

        if ($Description.length -lt 1) {
            throw "invalid value for 'Description', the character length must be great than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "productCode" = ${ProductCode}
            "description" = ${Description}
            "epaNumber" = ${EpaNumber}
            "onHand" = ${OnHand}
            "unitCost" = ${UnitCost}
            "unitPrice" = ${UnitPrice}
            "productCategoryId" = ${ProductCategoryId}
            "unitofMeasure" = ${UnitofMeasure}
            "proposalNotes" = ${ProposalNotes}
            "crewNotes" = ${CrewNotes}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to APIProductInsert<PSCustomObject>

.DESCRIPTION

Convert from JSON to APIProductInsert<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

APIProductInsert<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToAPIProductInsert {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSAAPIProductInsert' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSAAPIProductInsert
        $AllProperties = ("productCode", "description", "epaNumber", "onHand", "unitCost", "unitPrice", "productCategoryId", "unitofMeasure", "proposalNotes", "crewNotes")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'productCode' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "productCode"))) {
            throw "Error! JSON cannot be serialized due to the required property 'productCode' missing."
        } else {
            $ProductCode = $JsonParameters.PSobject.Properties["productCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) {
            throw "Error! JSON cannot be serialized due to the required property 'description' missing."
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "epaNumber"))) { #optional property not found
            $EpaNumber = $null
        } else {
            $EpaNumber = $JsonParameters.PSobject.Properties["epaNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "onHand"))) { #optional property not found
            $OnHand = $null
        } else {
            $OnHand = $JsonParameters.PSobject.Properties["onHand"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unitCost"))) { #optional property not found
            $UnitCost = $null
        } else {
            $UnitCost = $JsonParameters.PSobject.Properties["unitCost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unitPrice"))) { #optional property not found
            $UnitPrice = $null
        } else {
            $UnitPrice = $JsonParameters.PSobject.Properties["unitPrice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "productCategoryId"))) { #optional property not found
            $ProductCategoryId = $null
        } else {
            $ProductCategoryId = $JsonParameters.PSobject.Properties["productCategoryId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unitofMeasure"))) { #optional property not found
            $UnitofMeasure = $null
        } else {
            $UnitofMeasure = $JsonParameters.PSobject.Properties["unitofMeasure"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proposalNotes"))) { #optional property not found
            $ProposalNotes = $null
        } else {
            $ProposalNotes = $JsonParameters.PSobject.Properties["proposalNotes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "crewNotes"))) { #optional property not found
            $CrewNotes = $null
        } else {
            $CrewNotes = $JsonParameters.PSobject.Properties["crewNotes"].value
        }

        $PSO = [PSCustomObject]@{
            "productCode" = ${ProductCode}
            "description" = ${Description}
            "epaNumber" = ${EpaNumber}
            "onHand" = ${OnHand}
            "unitCost" = ${UnitCost}
            "unitPrice" = ${UnitPrice}
            "productCategoryId" = ${ProductCategoryId}
            "unitofMeasure" = ${UnitofMeasure}
            "proposalNotes" = ${ProposalNotes}
            "crewNotes" = ${CrewNotes}
        }

        return $PSO
    }

}

