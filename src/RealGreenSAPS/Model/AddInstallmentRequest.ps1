#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CustomerNumber
No description available.
.PARAMETER NumberOfPayments
No description available.
.PARAMETER Status
No description available.
.PARAMETER AutoRenew
No description available.
.PARAMETER BillCC
No description available.
.PARAMETER Notes
No description available.
.PARAMETER ProgramIDs
No description available.
.PARAMETER OverrideDollarAmount
No description available.
.PARAMETER Frequency
No description available.
.PARAMETER FirstPaymentDate
No description available.
.PARAMETER AuditEmployee
No description available.
.PARAMETER PoNumber
No description available.
.OUTPUTS

AddInstallmentRequest<PSCustomObject>
#>

function Initialize-RGSAAddInstallmentRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CustomerNumber},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NumberOfPayments},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Cancelled", "Completed", "Rejected", "Proposed", "Active")]
        [PSCustomObject]
        ${Status},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AutoRenew},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${BillCC},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Notes},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${ProgramIDs},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${OverrideDollarAmount},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Every28Days", "Monthly", "BiMonthly", "Quarterly")]
        [PSCustomObject]
        ${Frequency},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${FirstPaymentDate},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AuditEmployee},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PoNumber}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSAAddInstallmentRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "customerNumber" = ${CustomerNumber}
            "numberOfPayments" = ${NumberOfPayments}
            "status" = ${Status}
            "autoRenew" = ${AutoRenew}
            "billCC" = ${BillCC}
            "notes" = ${Notes}
            "programIDs" = ${ProgramIDs}
            "overrideDollarAmount" = ${OverrideDollarAmount}
            "frequency" = ${Frequency}
            "firstPaymentDate" = ${FirstPaymentDate}
            "auditEmployee" = ${AuditEmployee}
            "poNumber" = ${PoNumber}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AddInstallmentRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to AddInstallmentRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AddInstallmentRequest<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToAddInstallmentRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSAAddInstallmentRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSAAddInstallmentRequest
        $AllProperties = ("customerNumber", "numberOfPayments", "status", "autoRenew", "billCC", "notes", "programIDs", "overrideDollarAmount", "frequency", "firstPaymentDate", "auditEmployee", "poNumber")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerNumber"))) { #optional property not found
            $CustomerNumber = $null
        } else {
            $CustomerNumber = $JsonParameters.PSobject.Properties["customerNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "numberOfPayments"))) { #optional property not found
            $NumberOfPayments = $null
        } else {
            $NumberOfPayments = $JsonParameters.PSobject.Properties["numberOfPayments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autoRenew"))) { #optional property not found
            $AutoRenew = $null
        } else {
            $AutoRenew = $JsonParameters.PSobject.Properties["autoRenew"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "billCC"))) { #optional property not found
            $BillCC = $null
        } else {
            $BillCC = $JsonParameters.PSobject.Properties["billCC"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "notes"))) { #optional property not found
            $Notes = $null
        } else {
            $Notes = $JsonParameters.PSobject.Properties["notes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "programIDs"))) { #optional property not found
            $ProgramIDs = $null
        } else {
            $ProgramIDs = $JsonParameters.PSobject.Properties["programIDs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "overrideDollarAmount"))) { #optional property not found
            $OverrideDollarAmount = $null
        } else {
            $OverrideDollarAmount = $JsonParameters.PSobject.Properties["overrideDollarAmount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "frequency"))) { #optional property not found
            $Frequency = $null
        } else {
            $Frequency = $JsonParameters.PSobject.Properties["frequency"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "firstPaymentDate"))) { #optional property not found
            $FirstPaymentDate = $null
        } else {
            $FirstPaymentDate = $JsonParameters.PSobject.Properties["firstPaymentDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "auditEmployee"))) { #optional property not found
            $AuditEmployee = $null
        } else {
            $AuditEmployee = $JsonParameters.PSobject.Properties["auditEmployee"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "poNumber"))) { #optional property not found
            $PoNumber = $null
        } else {
            $PoNumber = $JsonParameters.PSobject.Properties["poNumber"].value
        }

        $PSO = [PSCustomObject]@{
            "customerNumber" = ${CustomerNumber}
            "numberOfPayments" = ${NumberOfPayments}
            "status" = ${Status}
            "autoRenew" = ${AutoRenew}
            "billCC" = ${BillCC}
            "notes" = ${Notes}
            "programIDs" = ${ProgramIDs}
            "overrideDollarAmount" = ${OverrideDollarAmount}
            "frequency" = ${Frequency}
            "firstPaymentDate" = ${FirstPaymentDate}
            "auditEmployee" = ${AuditEmployee}
            "poNumber" = ${PoNumber}
        }

        return $PSO
    }

}

