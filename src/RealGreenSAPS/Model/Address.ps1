#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER HouseNumber
No description available.
.PARAMETER PreDirection
No description available.
.PARAMETER StreetName
No description available.
.PARAMETER StreetSuffix
No description available.
.PARAMETER PostDirection
No description available.
.PARAMETER AddressLine2
No description available.
.PARAMETER City
No description available.
.PARAMETER State
No description available.
.PARAMETER Zip
No description available.
.PARAMETER CountryCode
No description available.
.PARAMETER Latitude
No description available.
.PARAMETER Longitude
No description available.
.PARAMETER AddressLine1
No description available.
.PARAMETER AddressLine3
No description available.
.PARAMETER FormattedAddress
No description available.
.PARAMETER FormattedAddressWithCulture
No description available.
.PARAMETER FormattedZipWithCulture
No description available.
.PARAMETER FormattedZip
No description available.
.OUTPUTS

Address<PSCustomObject>
#>

function Initialize-RgSaAddress {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HouseNumber},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PreDirection},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StreetName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StreetSuffix},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PostDirection},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AddressLine2},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${City},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${State},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Zip},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CountryCode},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Latitude},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Longitude},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AddressLine1},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AddressLine3},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FormattedAddress},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FormattedAddressWithCulture},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FormattedZipWithCulture},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FormattedZip}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaAddress' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "houseNumber" = ${HouseNumber}
            "preDirection" = ${PreDirection}
            "streetName" = ${StreetName}
            "streetSuffix" = ${StreetSuffix}
            "postDirection" = ${PostDirection}
            "addressLine2" = ${AddressLine2}
            "city" = ${City}
            "state" = ${State}
            "zip" = ${Zip}
            "countryCode" = ${CountryCode}
            "latitude" = ${Latitude}
            "longitude" = ${Longitude}
            "addressLine1" = ${AddressLine1}
            "addressLine3" = ${AddressLine3}
            "formattedAddress" = ${FormattedAddress}
            "formattedAddressWithCulture" = ${FormattedAddressWithCulture}
            "formattedZipWithCulture" = ${FormattedZipWithCulture}
            "formattedZip" = ${FormattedZip}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Address<PSCustomObject>

.DESCRIPTION

Convert from JSON to Address<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Address<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToAddress {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaAddress' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaAddress
        $AllProperties = ("houseNumber", "preDirection", "streetName", "streetSuffix", "postDirection", "addressLine2", "city", "state", "zip", "countryCode", "latitude", "longitude", "addressLine1", "addressLine3", "formattedAddress", "formattedAddressWithCulture", "formattedZipWithCulture", "formattedZip")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "houseNumber"))) { #optional property not found
            $HouseNumber = $null
        } else {
            $HouseNumber = $JsonParameters.PSobject.Properties["houseNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "preDirection"))) { #optional property not found
            $PreDirection = $null
        } else {
            $PreDirection = $JsonParameters.PSobject.Properties["preDirection"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "streetName"))) { #optional property not found
            $StreetName = $null
        } else {
            $StreetName = $JsonParameters.PSobject.Properties["streetName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "streetSuffix"))) { #optional property not found
            $StreetSuffix = $null
        } else {
            $StreetSuffix = $JsonParameters.PSobject.Properties["streetSuffix"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "postDirection"))) { #optional property not found
            $PostDirection = $null
        } else {
            $PostDirection = $JsonParameters.PSobject.Properties["postDirection"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "addressLine2"))) { #optional property not found
            $AddressLine2 = $null
        } else {
            $AddressLine2 = $JsonParameters.PSobject.Properties["addressLine2"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "city"))) { #optional property not found
            $City = $null
        } else {
            $City = $JsonParameters.PSobject.Properties["city"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zip"))) { #optional property not found
            $Zip = $null
        } else {
            $Zip = $JsonParameters.PSobject.Properties["zip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "countryCode"))) { #optional property not found
            $CountryCode = $null
        } else {
            $CountryCode = $JsonParameters.PSobject.Properties["countryCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "latitude"))) { #optional property not found
            $Latitude = $null
        } else {
            $Latitude = $JsonParameters.PSobject.Properties["latitude"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "longitude"))) { #optional property not found
            $Longitude = $null
        } else {
            $Longitude = $JsonParameters.PSobject.Properties["longitude"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "addressLine1"))) { #optional property not found
            $AddressLine1 = $null
        } else {
            $AddressLine1 = $JsonParameters.PSobject.Properties["addressLine1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "addressLine3"))) { #optional property not found
            $AddressLine3 = $null
        } else {
            $AddressLine3 = $JsonParameters.PSobject.Properties["addressLine3"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formattedAddress"))) { #optional property not found
            $FormattedAddress = $null
        } else {
            $FormattedAddress = $JsonParameters.PSobject.Properties["formattedAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formattedAddressWithCulture"))) { #optional property not found
            $FormattedAddressWithCulture = $null
        } else {
            $FormattedAddressWithCulture = $JsonParameters.PSobject.Properties["formattedAddressWithCulture"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formattedZipWithCulture"))) { #optional property not found
            $FormattedZipWithCulture = $null
        } else {
            $FormattedZipWithCulture = $JsonParameters.PSobject.Properties["formattedZipWithCulture"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formattedZip"))) { #optional property not found
            $FormattedZip = $null
        } else {
            $FormattedZip = $JsonParameters.PSobject.Properties["formattedZip"].value
        }

        $PSO = [PSCustomObject]@{
            "houseNumber" = ${HouseNumber}
            "preDirection" = ${PreDirection}
            "streetName" = ${StreetName}
            "streetSuffix" = ${StreetSuffix}
            "postDirection" = ${PostDirection}
            "addressLine2" = ${AddressLine2}
            "city" = ${City}
            "state" = ${State}
            "zip" = ${Zip}
            "countryCode" = ${CountryCode}
            "latitude" = ${Latitude}
            "longitude" = ${Longitude}
            "addressLine1" = ${AddressLine1}
            "addressLine3" = ${AddressLine3}
            "formattedAddress" = ${FormattedAddress}
            "formattedAddressWithCulture" = ${FormattedAddressWithCulture}
            "formattedZipWithCulture" = ${FormattedZipWithCulture}
            "formattedZip" = ${FormattedZip}
        }

        return $PSO
    }

}

