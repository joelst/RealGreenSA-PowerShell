#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CustNo
No description available.
.PARAMETER FileName
No description available.
.PARAMETER EmpId
No description available.
.PARAMETER Category
No description available.
.PARAMETER EnterDate
No description available.
.PARAMETER Description
No description available.
.PARAMETER HandHeld
No description available.
.PARAMETER WebAvailable
No description available.
.OUTPUTS

Attachment<PSCustomObject>
#>

function Initialize-RgSaAttachment {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${CustNo},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FileName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmpId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Category},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EnterDate},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HandHeld},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${WebAvailable}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaAttachment' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $CustNo) {
            throw "invalid value for 'CustNo', 'CustNo' cannot be null."
        }

        if ($null -eq $FileName) {
            throw "invalid value for 'FileName', 'FileName' cannot be null."
        }

        if ($FileName.length -gt 250) {
            throw "invalid value for 'FileName', the character length must be smaller than or equal to 250."
        }

        if ($FileName.length -lt 1) {
            throw "invalid value for 'FileName', the character length must be great than or equal to 1."
        }

        if ($null -eq $EmpId) {
            throw "invalid value for 'EmpId', 'EmpId' cannot be null."
        }

        if ($EmpId.length -gt 8) {
            throw "invalid value for 'EmpId', the character length must be smaller than or equal to 8."
        }

        if ($EmpId.length -lt 1) {
            throw "invalid value for 'EmpId', the character length must be great than or equal to 1."
        }

        if ($null -eq $Category) {
            throw "invalid value for 'Category', 'Category' cannot be null."
        }

        if (!$Description -and $Description.length -gt 50) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 50."
        }

        if (!$Description -and $Description.length -lt 0) {
            throw "invalid value for 'Description', the character length must be great than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "cust_no" = ${CustNo}
            "fileName" = ${FileName}
            "emp_Id" = ${EmpId}
            "category" = ${Category}
            "enterDate" = ${EnterDate}
            "description" = ${Description}
            "handHeld" = ${HandHeld}
            "webAvailable" = ${WebAvailable}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Attachment<PSCustomObject>

.DESCRIPTION

Convert from JSON to Attachment<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Attachment<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToAttachment {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaAttachment' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaAttachment
        $AllProperties = ("cust_no", "fileName", "emp_Id", "category", "enterDate", "description", "handHeld", "webAvailable")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'cust_no' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cust_no"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cust_no' missing."
        } else {
            $CustNo = $JsonParameters.PSobject.Properties["cust_no"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileName"))) {
            throw "Error! JSON cannot be serialized due to the required property 'fileName' missing."
        } else {
            $FileName = $JsonParameters.PSobject.Properties["fileName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emp_Id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'emp_Id' missing."
        } else {
            $EmpId = $JsonParameters.PSobject.Properties["emp_Id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "category"))) {
            throw "Error! JSON cannot be serialized due to the required property 'category' missing."
        } else {
            $Category = $JsonParameters.PSobject.Properties["category"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enterDate"))) { #optional property not found
            $EnterDate = $null
        } else {
            $EnterDate = $JsonParameters.PSobject.Properties["enterDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "handHeld"))) { #optional property not found
            $HandHeld = $null
        } else {
            $HandHeld = $JsonParameters.PSobject.Properties["handHeld"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "webAvailable"))) { #optional property not found
            $WebAvailable = $null
        } else {
            $WebAvailable = $JsonParameters.PSobject.Properties["webAvailable"].value
        }

        $PSO = [PSCustomObject]@{
            "cust_no" = ${CustNo}
            "fileName" = ${FileName}
            "emp_Id" = ${EmpId}
            "category" = ${Category}
            "enterDate" = ${EnterDate}
            "description" = ${Description}
            "handHeld" = ${HandHeld}
            "webAvailable" = ${WebAvailable}
        }

        return $PSO
    }

}

