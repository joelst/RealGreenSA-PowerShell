#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER PrintDate
No description available.
.PARAMETER EmployeeId
No description available.
.PARAMETER Type
No description available.
.PARAMETER TypeDescription
No description available.
.PARAMETER UndoDate
No description available.
.PARAMETER UndoEmployeeId
No description available.
.PARAMETER ScheduleDate
No description available.
.PARAMETER DriveDist
No description available.
.PARAMETER LunchTime
No description available.
.PARAMETER LunchLength
No description available.
.PARAMETER BatchCount
No description available.
.OUTPUTS

Batch<PSCustomObject>
#>

function Initialize-RgSaBatch {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${PrintDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmployeeId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("None", "Estimates", "ConfirmationLetters", "Invoices", "CollectionLetters", "Postcards", "PrepayLetters", "ReferralLetters", "Statements", "Export", "UpsellInformationLetters", "CancelLetters")]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TypeDescription},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${UndoDate},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UndoEmployeeId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ScheduleDate},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${DriveDist},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LunchTime},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LunchLength},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${BatchCount}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaBatch' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "printDate" = ${PrintDate}
            "employeeId" = ${EmployeeId}
            "type" = ${Type}
            "typeDescription" = ${TypeDescription}
            "undoDate" = ${UndoDate}
            "undoEmployeeId" = ${UndoEmployeeId}
            "scheduleDate" = ${ScheduleDate}
            "driveDist" = ${DriveDist}
            "lunchTime" = ${LunchTime}
            "lunchLength" = ${LunchLength}
            "batchCount" = ${BatchCount}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Batch<PSCustomObject>

.DESCRIPTION

Convert from JSON to Batch<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Batch<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToBatch {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaBatch' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaBatch
        $AllProperties = ("id", "printDate", "employeeId", "type", "typeDescription", "undoDate", "undoEmployeeId", "scheduleDate", "driveDist", "lunchTime", "lunchLength", "batchCount")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "printDate"))) { #optional property not found
            $PrintDate = $null
        } else {
            $PrintDate = $JsonParameters.PSobject.Properties["printDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "employeeId"))) { #optional property not found
            $EmployeeId = $null
        } else {
            $EmployeeId = $JsonParameters.PSobject.Properties["employeeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "typeDescription"))) { #optional property not found
            $TypeDescription = $null
        } else {
            $TypeDescription = $JsonParameters.PSobject.Properties["typeDescription"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "undoDate"))) { #optional property not found
            $UndoDate = $null
        } else {
            $UndoDate = $JsonParameters.PSobject.Properties["undoDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "undoEmployeeId"))) { #optional property not found
            $UndoEmployeeId = $null
        } else {
            $UndoEmployeeId = $JsonParameters.PSobject.Properties["undoEmployeeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scheduleDate"))) { #optional property not found
            $ScheduleDate = $null
        } else {
            $ScheduleDate = $JsonParameters.PSobject.Properties["scheduleDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "driveDist"))) { #optional property not found
            $DriveDist = $null
        } else {
            $DriveDist = $JsonParameters.PSobject.Properties["driveDist"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lunchTime"))) { #optional property not found
            $LunchTime = $null
        } else {
            $LunchTime = $JsonParameters.PSobject.Properties["lunchTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lunchLength"))) { #optional property not found
            $LunchLength = $null
        } else {
            $LunchLength = $JsonParameters.PSobject.Properties["lunchLength"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "batchCount"))) { #optional property not found
            $BatchCount = $null
        } else {
            $BatchCount = $JsonParameters.PSobject.Properties["batchCount"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "printDate" = ${PrintDate}
            "employeeId" = ${EmployeeId}
            "type" = ${Type}
            "typeDescription" = ${TypeDescription}
            "undoDate" = ${UndoDate}
            "undoEmployeeId" = ${UndoEmployeeId}
            "scheduleDate" = ${ScheduleDate}
            "driveDist" = ${DriveDist}
            "lunchTime" = ${LunchTime}
            "lunchLength" = ${LunchLength}
            "batchCount" = ${BatchCount}
        }

        return $PSO
    }

}

