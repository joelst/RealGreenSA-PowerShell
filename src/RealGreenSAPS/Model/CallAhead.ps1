#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER CallAheadDescription
No description available.
.PARAMETER Renewable
No description available.
.PARAMETER Available
No description available.
.PARAMETER Highlight
No description available.
.PARAMETER CallDescFrench
No description available.
.PARAMETER CallDescSpanish
No description available.
.PARAMETER NotificationType
No description available.
.OUTPUTS

CallAhead<PSCustomObject>
#>

function Initialize-RgSaCallAhead {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CallAheadDescription},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Renewable},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Available},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Highlight},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CallDescFrench},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CallDescSpanish},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NotificationType}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaCallAhead' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "callAheadDescription" = ${CallAheadDescription}
            "renewable" = ${Renewable}
            "available" = ${Available}
            "highlight" = ${Highlight}
            "callDescFrench" = ${CallDescFrench}
            "callDescSpanish" = ${CallDescSpanish}
            "notificationType" = ${NotificationType}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CallAhead<PSCustomObject>

.DESCRIPTION

Convert from JSON to CallAhead<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CallAhead<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToCallAhead {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaCallAhead' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaCallAhead
        $AllProperties = ("id", "callAheadDescription", "renewable", "available", "highlight", "callDescFrench", "callDescSpanish", "notificationType")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "callAheadDescription"))) { #optional property not found
            $CallAheadDescription = $null
        } else {
            $CallAheadDescription = $JsonParameters.PSobject.Properties["callAheadDescription"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "renewable"))) { #optional property not found
            $Renewable = $null
        } else {
            $Renewable = $JsonParameters.PSobject.Properties["renewable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "available"))) { #optional property not found
            $Available = $null
        } else {
            $Available = $JsonParameters.PSobject.Properties["available"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "highlight"))) { #optional property not found
            $Highlight = $null
        } else {
            $Highlight = $JsonParameters.PSobject.Properties["highlight"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "callDescFrench"))) { #optional property not found
            $CallDescFrench = $null
        } else {
            $CallDescFrench = $JsonParameters.PSobject.Properties["callDescFrench"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "callDescSpanish"))) { #optional property not found
            $CallDescSpanish = $null
        } else {
            $CallDescSpanish = $JsonParameters.PSobject.Properties["callDescSpanish"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "notificationType"))) { #optional property not found
            $NotificationType = $null
        } else {
            $NotificationType = $JsonParameters.PSobject.Properties["notificationType"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "callAheadDescription" = ${CallAheadDescription}
            "renewable" = ${Renewable}
            "available" = ${Available}
            "highlight" = ${Highlight}
            "callDescFrench" = ${CallDescFrench}
            "callDescSpanish" = ${CallDescSpanish}
            "notificationType" = ${NotificationType}
        }

        return $PSO
    }

}

