#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER HeaderID
No description available.
.PARAMETER Date
No description available.
.PARAMETER Reason
No description available.
.PARAMETER Note
No description available.
.PARAMETER EmployeeID
No description available.
.OUTPUTS

CallLogNote<PSCustomObject>
#>

function Initialize-RgSaCallLogNote {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${HeaderID},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Date},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Reason},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Note},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmployeeID}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaCallLogNote' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "headerID" = ${HeaderID}
            "date" = ${Date}
            "reason" = ${Reason}
            "note" = ${Note}
            "employeeID" = ${EmployeeID}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CallLogNote<PSCustomObject>

.DESCRIPTION

Convert from JSON to CallLogNote<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CallLogNote<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToCallLogNote {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaCallLogNote' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaCallLogNote
        $AllProperties = ("id", "headerID", "date", "reason", "note", "employeeID")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "headerID"))) { #optional property not found
            $HeaderID = $null
        } else {
            $HeaderID = $JsonParameters.PSobject.Properties["headerID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "date"))) { #optional property not found
            $Date = $null
        } else {
            $Date = $JsonParameters.PSobject.Properties["date"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reason"))) { #optional property not found
            $Reason = $null
        } else {
            $Reason = $JsonParameters.PSobject.Properties["reason"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "note"))) { #optional property not found
            $Note = $null
        } else {
            $Note = $JsonParameters.PSobject.Properties["note"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "employeeID"))) { #optional property not found
            $EmployeeID = $null
        } else {
            $EmployeeID = $JsonParameters.PSobject.Properties["employeeID"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "headerID" = ${HeaderID}
            "date" = ${Date}
            "reason" = ${Reason}
            "note" = ${Note}
            "employeeID" = ${EmployeeID}
        }

        return $PSO
    }

}

