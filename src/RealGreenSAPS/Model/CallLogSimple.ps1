#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CustNo
No description available.
.PARAMETER EmpId
No description available.
.PARAMETER ActionReasonID
No description available.
.PARAMETER Status
No description available.
.PARAMETER Note
No description available.
.PARAMETER AuditEmployeeID
No description available.
.PARAMETER Name
No description available.
.PARAMETER PhoneNumber
No description available.
.OUTPUTS

CallLogSimple<PSCustomObject>
#>

function Initialize-RGSACallLogSimple {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CustNo},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmpId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${ActionReasonID},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Note},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AuditEmployeeID},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PhoneNumber}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSACallLogSimple' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $EmpId) {
            throw "invalid value for 'EmpId', 'EmpId' cannot be null."
        }

        if ($EmpId.length -gt 8) {
            throw "invalid value for 'EmpId', the character length must be smaller than or equal to 8."
        }

        if ($EmpId.length -lt 1) {
            throw "invalid value for 'EmpId', the character length must be great than or equal to 1."
        }

        if ($null -eq $ActionReasonID) {
            throw "invalid value for 'ActionReasonID', 'ActionReasonID' cannot be null."
        }

        if ($ActionReasonID -gt 2147483647) {
          throw "invalid value for 'ActionReasonID', must be smaller than or equal to 2147483647."
        }

        if ($ActionReasonID -lt 1) {
          throw "invalid value for 'ActionReasonID', must be greater than or equal to 1."
        }

        if ($null -eq $Note) {
            throw "invalid value for 'Note', 'Note' cannot be null."
        }

        if ($Note.length -gt 7000) {
            throw "invalid value for 'Note', the character length must be smaller than or equal to 7000."
        }

        if ($Note.length -lt 1) {
            throw "invalid value for 'Note', the character length must be great than or equal to 1."
        }

        if ($null -eq $AuditEmployeeID) {
            throw "invalid value for 'AuditEmployeeID', 'AuditEmployeeID' cannot be null."
        }

        if ($AuditEmployeeID.length -gt 8) {
            throw "invalid value for 'AuditEmployeeID', the character length must be smaller than or equal to 8."
        }

        if ($AuditEmployeeID.length -lt 1) {
            throw "invalid value for 'AuditEmployeeID', the character length must be great than or equal to 1."
        }

        if (!$Name -and $Name.length -gt 80) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 80."
        }

        if (!$Name -and $Name.length -lt 0) {
            throw "invalid value for 'Name', the character length must be great than or equal to 0."
        }

        if (!$PhoneNumber -and $PhoneNumber.length -gt 20) {
            throw "invalid value for 'PhoneNumber', the character length must be smaller than or equal to 20."
        }

        if (!$PhoneNumber -and $PhoneNumber.length -lt 0) {
            throw "invalid value for 'PhoneNumber', the character length must be great than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "cust_no" = ${CustNo}
            "emp_id" = ${EmpId}
            "actionReasonID" = ${ActionReasonID}
            "status" = ${Status}
            "note" = ${Note}
            "auditEmployeeID" = ${AuditEmployeeID}
            "name" = ${Name}
            "phoneNumber" = ${PhoneNumber}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CallLogSimple<PSCustomObject>

.DESCRIPTION

Convert from JSON to CallLogSimple<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CallLogSimple<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToCallLogSimple {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSACallLogSimple' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSACallLogSimple
        $AllProperties = ("cust_no", "emp_id", "actionReasonID", "status", "note", "auditEmployeeID", "name", "phoneNumber")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'emp_id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emp_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'emp_id' missing."
        } else {
            $EmpId = $JsonParameters.PSobject.Properties["emp_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actionReasonID"))) {
            throw "Error! JSON cannot be serialized due to the required property 'actionReasonID' missing."
        } else {
            $ActionReasonID = $JsonParameters.PSobject.Properties["actionReasonID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "note"))) {
            throw "Error! JSON cannot be serialized due to the required property 'note' missing."
        } else {
            $Note = $JsonParameters.PSobject.Properties["note"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "auditEmployeeID"))) {
            throw "Error! JSON cannot be serialized due to the required property 'auditEmployeeID' missing."
        } else {
            $AuditEmployeeID = $JsonParameters.PSobject.Properties["auditEmployeeID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cust_no"))) { #optional property not found
            $CustNo = $null
        } else {
            $CustNo = $JsonParameters.PSobject.Properties["cust_no"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "phoneNumber"))) { #optional property not found
            $PhoneNumber = $null
        } else {
            $PhoneNumber = $JsonParameters.PSobject.Properties["phoneNumber"].value
        }

        $PSO = [PSCustomObject]@{
            "cust_no" = ${CustNo}
            "emp_id" = ${EmpId}
            "actionReasonID" = ${ActionReasonID}
            "status" = ${Status}
            "note" = ${Note}
            "auditEmployeeID" = ${AuditEmployeeID}
            "name" = ${Name}
            "phoneNumber" = ${PhoneNumber}
        }

        return $PSO
    }

}

