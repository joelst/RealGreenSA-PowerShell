#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER TotalPaymentsCount
No description available.
.PARAMETER TotalPaymentDollar
No description available.
.PARAMETER CreditCardCount
No description available.
.PARAMETER CreditCardDollars
No description available.
.PARAMETER NonCreditCardCount
No description available.
.PARAMETER NonCreditCardDollars
No description available.
.PARAMETER PrepayCount
No description available.
.PARAMETER PrepayDollars
No description available.
.PARAMETER NonPrepayCount
No description available.
.PARAMETER NonPrepayDollars
No description available.
.OUTPUTS

CashIn<PSCustomObject>
#>

function Initialize-RgSaCashIn {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TotalPaymentsCount},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${TotalPaymentDollar},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CreditCardCount},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${CreditCardDollars},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NonCreditCardCount},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${NonCreditCardDollars},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PrepayCount},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${PrepayDollars},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NonPrepayCount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${NonPrepayDollars}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaCashIn' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "totalPaymentsCount" = ${TotalPaymentsCount}
            "totalPaymentDollar" = ${TotalPaymentDollar}
            "creditCardCount" = ${CreditCardCount}
            "creditCardDollars" = ${CreditCardDollars}
            "nonCreditCardCount" = ${NonCreditCardCount}
            "nonCreditCardDollars" = ${NonCreditCardDollars}
            "prepayCount" = ${PrepayCount}
            "prepayDollars" = ${PrepayDollars}
            "nonPrepayCount" = ${NonPrepayCount}
            "nonPrepayDollars" = ${NonPrepayDollars}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CashIn<PSCustomObject>

.DESCRIPTION

Convert from JSON to CashIn<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CashIn<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToCashIn {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaCashIn' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaCashIn
        $AllProperties = ("totalPaymentsCount", "totalPaymentDollar", "creditCardCount", "creditCardDollars", "nonCreditCardCount", "nonCreditCardDollars", "prepayCount", "prepayDollars", "nonPrepayCount", "nonPrepayDollars")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalPaymentsCount"))) { #optional property not found
            $TotalPaymentsCount = $null
        } else {
            $TotalPaymentsCount = $JsonParameters.PSobject.Properties["totalPaymentsCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalPaymentDollar"))) { #optional property not found
            $TotalPaymentDollar = $null
        } else {
            $TotalPaymentDollar = $JsonParameters.PSobject.Properties["totalPaymentDollar"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "creditCardCount"))) { #optional property not found
            $CreditCardCount = $null
        } else {
            $CreditCardCount = $JsonParameters.PSobject.Properties["creditCardCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "creditCardDollars"))) { #optional property not found
            $CreditCardDollars = $null
        } else {
            $CreditCardDollars = $JsonParameters.PSobject.Properties["creditCardDollars"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nonCreditCardCount"))) { #optional property not found
            $NonCreditCardCount = $null
        } else {
            $NonCreditCardCount = $JsonParameters.PSobject.Properties["nonCreditCardCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nonCreditCardDollars"))) { #optional property not found
            $NonCreditCardDollars = $null
        } else {
            $NonCreditCardDollars = $JsonParameters.PSobject.Properties["nonCreditCardDollars"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prepayCount"))) { #optional property not found
            $PrepayCount = $null
        } else {
            $PrepayCount = $JsonParameters.PSobject.Properties["prepayCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prepayDollars"))) { #optional property not found
            $PrepayDollars = $null
        } else {
            $PrepayDollars = $JsonParameters.PSobject.Properties["prepayDollars"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nonPrepayCount"))) { #optional property not found
            $NonPrepayCount = $null
        } else {
            $NonPrepayCount = $JsonParameters.PSobject.Properties["nonPrepayCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nonPrepayDollars"))) { #optional property not found
            $NonPrepayDollars = $null
        } else {
            $NonPrepayDollars = $JsonParameters.PSobject.Properties["nonPrepayDollars"].value
        }

        $PSO = [PSCustomObject]@{
            "totalPaymentsCount" = ${TotalPaymentsCount}
            "totalPaymentDollar" = ${TotalPaymentDollar}
            "creditCardCount" = ${CreditCardCount}
            "creditCardDollars" = ${CreditCardDollars}
            "nonCreditCardCount" = ${NonCreditCardCount}
            "nonCreditCardDollars" = ${NonCreditCardDollars}
            "prepayCount" = ${PrepayCount}
            "prepayDollars" = ${PrepayDollars}
            "nonPrepayCount" = ${NonPrepayCount}
            "nonPrepayDollars" = ${NonPrepayDollars}
        }

        return $PSO
    }

}

