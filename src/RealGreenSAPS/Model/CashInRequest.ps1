#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DateRange
No description available.
.PARAMETER CustomDateRange
No description available.
.PARAMETER DateType
No description available.
.PARAMETER PostedBy
No description available.
.PARAMETER PayType
No description available.
.PARAMETER CustomerStatus
No description available.
.PARAMETER IsPrepayment
No description available.
.PARAMETER CustomerType
No description available.
.PARAMETER Route
No description available.
.PARAMETER CompanyIDs
No description available.
.OUTPUTS

CashInRequest<PSCustomObject>
#>

function Initialize-RGSACashInRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Today", "Yesterday", "WeekToDate", "MonthToDate", "YearToDate", "LastYearToDateLastYear", "LastYear", "Custom")]
        [PSCustomObject]
        ${DateRange},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CustomDateRange},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("TransactionDate", "PostedDate", "ProcessedDate")]
        [PSCustomObject]
        ${DateType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PostedBy},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${PayType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${CustomerStatus},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsPrepayment},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerType},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Route},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${CompanyIDs}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSACashInRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $DateRange) {
            throw "invalid value for 'DateRange', 'DateRange' cannot be null."
        }

        if ($null -eq $DateType) {
            throw "invalid value for 'DateType', 'DateType' cannot be null."
        }

        if (!$PostedBy -and $PostedBy.length -gt 250) {
            throw "invalid value for 'PostedBy', the character length must be smaller than or equal to 250."
        }

        if (!$PostedBy -and $PostedBy.length -lt 1) {
            throw "invalid value for 'PostedBy', the character length must be great than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "dateRange" = ${DateRange}
            "customDateRange" = ${CustomDateRange}
            "dateType" = ${DateType}
            "postedBy" = ${PostedBy}
            "payType" = ${PayType}
            "customerStatus" = ${CustomerStatus}
            "isPrepayment" = ${IsPrepayment}
            "customerType" = ${CustomerType}
            "route" = ${Route}
            "companyIDs" = ${CompanyIDs}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CashInRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to CashInRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CashInRequest<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToCashInRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSACashInRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSACashInRequest
        $AllProperties = ("dateRange", "customDateRange", "dateType", "postedBy", "payType", "customerStatus", "isPrepayment", "customerType", "route", "companyIDs")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'dateRange' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateRange"))) {
            throw "Error! JSON cannot be serialized due to the required property 'dateRange' missing."
        } else {
            $DateRange = $JsonParameters.PSobject.Properties["dateRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'dateType' missing."
        } else {
            $DateType = $JsonParameters.PSobject.Properties["dateType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customDateRange"))) { #optional property not found
            $CustomDateRange = $null
        } else {
            $CustomDateRange = $JsonParameters.PSobject.Properties["customDateRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "postedBy"))) { #optional property not found
            $PostedBy = $null
        } else {
            $PostedBy = $JsonParameters.PSobject.Properties["postedBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "payType"))) { #optional property not found
            $PayType = $null
        } else {
            $PayType = $JsonParameters.PSobject.Properties["payType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerStatus"))) { #optional property not found
            $CustomerStatus = $null
        } else {
            $CustomerStatus = $JsonParameters.PSobject.Properties["customerStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isPrepayment"))) { #optional property not found
            $IsPrepayment = $null
        } else {
            $IsPrepayment = $JsonParameters.PSobject.Properties["isPrepayment"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerType"))) { #optional property not found
            $CustomerType = $null
        } else {
            $CustomerType = $JsonParameters.PSobject.Properties["customerType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "route"))) { #optional property not found
            $Route = $null
        } else {
            $Route = $JsonParameters.PSobject.Properties["route"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "companyIDs"))) { #optional property not found
            $CompanyIDs = $null
        } else {
            $CompanyIDs = $JsonParameters.PSobject.Properties["companyIDs"].value
        }

        $PSO = [PSCustomObject]@{
            "dateRange" = ${DateRange}
            "customDateRange" = ${CustomDateRange}
            "dateType" = ${DateType}
            "postedBy" = ${PostedBy}
            "payType" = ${PayType}
            "customerStatus" = ${CustomerStatus}
            "isPrepayment" = ${IsPrepayment}
            "customerType" = ${CustomerType}
            "route" = ${Route}
            "companyIDs" = ${CompanyIDs}
        }

        return $PSO
    }

}

