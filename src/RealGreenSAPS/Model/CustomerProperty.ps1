#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER InventoryTypeID
No description available.
.PARAMETER CustomerID
No description available.
.PARAMETER Quantity
No description available.
.PARAMETER LocationID
No description available.
.PARAMETER Note
No description available.
.PARAMETER UnitOfMeasureID
No description available.
.PARAMETER LocationType
No description available.
.PARAMETER PropertyItemType
No description available.
.OUTPUTS

CustomerProperty<PSCustomObject>
#>

function Initialize-RGSACustomerProperty {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${InventoryTypeID},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CustomerID},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Quantity},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LocationID},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Note},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${UnitOfMeasureID},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LocationType},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PropertyItemType}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSACustomerProperty' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "inventoryTypeID" = ${InventoryTypeID}
            "customerID" = ${CustomerID}
            "quantity" = ${Quantity}
            "locationID" = ${LocationID}
            "note" = ${Note}
            "unitOfMeasureID" = ${UnitOfMeasureID}
            "locationType" = ${LocationType}
            "propertyItemType" = ${PropertyItemType}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CustomerProperty<PSCustomObject>

.DESCRIPTION

Convert from JSON to CustomerProperty<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CustomerProperty<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToCustomerProperty {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSACustomerProperty' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSACustomerProperty
        $AllProperties = ("id", "inventoryTypeID", "customerID", "quantity", "locationID", "note", "unitOfMeasureID", "locationType", "propertyItemType")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inventoryTypeID"))) { #optional property not found
            $InventoryTypeID = $null
        } else {
            $InventoryTypeID = $JsonParameters.PSobject.Properties["inventoryTypeID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerID"))) { #optional property not found
            $CustomerID = $null
        } else {
            $CustomerID = $JsonParameters.PSobject.Properties["customerID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "quantity"))) { #optional property not found
            $Quantity = $null
        } else {
            $Quantity = $JsonParameters.PSobject.Properties["quantity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "locationID"))) { #optional property not found
            $LocationID = $null
        } else {
            $LocationID = $JsonParameters.PSobject.Properties["locationID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "note"))) { #optional property not found
            $Note = $null
        } else {
            $Note = $JsonParameters.PSobject.Properties["note"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unitOfMeasureID"))) { #optional property not found
            $UnitOfMeasureID = $null
        } else {
            $UnitOfMeasureID = $JsonParameters.PSobject.Properties["unitOfMeasureID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "locationType"))) { #optional property not found
            $LocationType = $null
        } else {
            $LocationType = $JsonParameters.PSobject.Properties["locationType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "propertyItemType"))) { #optional property not found
            $PropertyItemType = $null
        } else {
            $PropertyItemType = $JsonParameters.PSobject.Properties["propertyItemType"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "inventoryTypeID" = ${InventoryTypeID}
            "customerID" = ${CustomerID}
            "quantity" = ${Quantity}
            "locationID" = ${LocationID}
            "note" = ${Note}
            "unitOfMeasureID" = ${UnitOfMeasureID}
            "locationType" = ${LocationType}
            "propertyItemType" = ${PropertyItemType}
        }

        return $PSO
    }

}

