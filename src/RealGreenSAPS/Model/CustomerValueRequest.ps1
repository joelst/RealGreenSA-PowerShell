#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CompanyIDs
No description available.
.PARAMETER SourceCodes
No description available.
.PARAMETER ResidentialCommercial
No description available.
.PARAMETER Seasons
No description available.
.PARAMETER PostalCodes
No description available.
.PARAMETER Routes
No description available.
.PARAMETER Statuses
No description available.
.OUTPUTS

CustomerValueRequest<PSCustomObject>
#>

function Initialize-RgSaCustomerValueRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${CompanyIDs},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${SourceCodes},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResidentialCommercial},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Seasons},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${PostalCodes},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Routes},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Statuses}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaCustomerValueRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "companyIDs" = ${CompanyIDs}
            "sourceCodes" = ${SourceCodes}
            "residentialCommercial" = ${ResidentialCommercial}
            "seasons" = ${Seasons}
            "postalCodes" = ${PostalCodes}
            "routes" = ${Routes}
            "statuses" = ${Statuses}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CustomerValueRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to CustomerValueRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CustomerValueRequest<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToCustomerValueRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaCustomerValueRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaCustomerValueRequest
        $AllProperties = ("companyIDs", "sourceCodes", "residentialCommercial", "seasons", "postalCodes", "routes", "statuses")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "companyIDs"))) { #optional property not found
            $CompanyIDs = $null
        } else {
            $CompanyIDs = $JsonParameters.PSobject.Properties["companyIDs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceCodes"))) { #optional property not found
            $SourceCodes = $null
        } else {
            $SourceCodes = $JsonParameters.PSobject.Properties["sourceCodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "residentialCommercial"))) { #optional property not found
            $ResidentialCommercial = $null
        } else {
            $ResidentialCommercial = $JsonParameters.PSobject.Properties["residentialCommercial"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "seasons"))) { #optional property not found
            $Seasons = $null
        } else {
            $Seasons = $JsonParameters.PSobject.Properties["seasons"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "postalCodes"))) { #optional property not found
            $PostalCodes = $null
        } else {
            $PostalCodes = $JsonParameters.PSobject.Properties["postalCodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "routes"))) { #optional property not found
            $Routes = $null
        } else {
            $Routes = $JsonParameters.PSobject.Properties["routes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statuses"))) { #optional property not found
            $Statuses = $null
        } else {
            $Statuses = $JsonParameters.PSobject.Properties["statuses"].value
        }

        $PSO = [PSCustomObject]@{
            "companyIDs" = ${CompanyIDs}
            "sourceCodes" = ${SourceCodes}
            "residentialCommercial" = ${ResidentialCommercial}
            "seasons" = ${Seasons}
            "postalCodes" = ${PostalCodes}
            "routes" = ${Routes}
            "statuses" = ${Statuses}
        }

        return $PSO
    }

}

