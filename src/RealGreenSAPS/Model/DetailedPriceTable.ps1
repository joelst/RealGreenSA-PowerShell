#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Description
No description available.
.PARAMETER Available
No description available.
.PARAMETER MaxSize
No description available.
.PARAMETER MaxRate
No description available.
.PARAMETER MaxManHour
No description available.
.PARAMETER DescriptionFrench
No description available.
.PARAMETER DescriptionSpanish
No description available.
.PARAMETER Interpolate
No description available.
.PARAMETER RoundCalculatedPrices
No description available.
.PARAMETER RoundAmount
No description available.
.PARAMETER Ranges
No description available.
.OUTPUTS

DetailedPriceTable<PSCustomObject>
#>

function Initialize-RgSaDetailedPriceTable {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Available},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${MaxSize},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${MaxRate},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${MaxManHour},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DescriptionFrench},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DescriptionSpanish},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Interpolate},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RoundCalculatedPrices},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RoundAmount},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Ranges}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaDetailedPriceTable' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "description" = ${Description}
            "available" = ${Available}
            "maxSize" = ${MaxSize}
            "maxRate" = ${MaxRate}
            "maxManHour" = ${MaxManHour}
            "descriptionFrench" = ${DescriptionFrench}
            "descriptionSpanish" = ${DescriptionSpanish}
            "interpolate" = ${Interpolate}
            "roundCalculatedPrices" = ${RoundCalculatedPrices}
            "roundAmount" = ${RoundAmount}
            "ranges" = ${Ranges}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DetailedPriceTable<PSCustomObject>

.DESCRIPTION

Convert from JSON to DetailedPriceTable<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DetailedPriceTable<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToDetailedPriceTable {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaDetailedPriceTable' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaDetailedPriceTable
        $AllProperties = ("id", "description", "available", "maxSize", "maxRate", "maxManHour", "descriptionFrench", "descriptionSpanish", "interpolate", "roundCalculatedPrices", "roundAmount", "ranges")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "available"))) { #optional property not found
            $Available = $null
        } else {
            $Available = $JsonParameters.PSobject.Properties["available"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxSize"))) { #optional property not found
            $MaxSize = $null
        } else {
            $MaxSize = $JsonParameters.PSobject.Properties["maxSize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxRate"))) { #optional property not found
            $MaxRate = $null
        } else {
            $MaxRate = $JsonParameters.PSobject.Properties["maxRate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxManHour"))) { #optional property not found
            $MaxManHour = $null
        } else {
            $MaxManHour = $JsonParameters.PSobject.Properties["maxManHour"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "descriptionFrench"))) { #optional property not found
            $DescriptionFrench = $null
        } else {
            $DescriptionFrench = $JsonParameters.PSobject.Properties["descriptionFrench"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "descriptionSpanish"))) { #optional property not found
            $DescriptionSpanish = $null
        } else {
            $DescriptionSpanish = $JsonParameters.PSobject.Properties["descriptionSpanish"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "interpolate"))) { #optional property not found
            $Interpolate = $null
        } else {
            $Interpolate = $JsonParameters.PSobject.Properties["interpolate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "roundCalculatedPrices"))) { #optional property not found
            $RoundCalculatedPrices = $null
        } else {
            $RoundCalculatedPrices = $JsonParameters.PSobject.Properties["roundCalculatedPrices"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "roundAmount"))) { #optional property not found
            $RoundAmount = $null
        } else {
            $RoundAmount = $JsonParameters.PSobject.Properties["roundAmount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ranges"))) { #optional property not found
            $Ranges = $null
        } else {
            $Ranges = $JsonParameters.PSobject.Properties["ranges"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "description" = ${Description}
            "available" = ${Available}
            "maxSize" = ${MaxSize}
            "maxRate" = ${MaxRate}
            "maxManHour" = ${MaxManHour}
            "descriptionFrench" = ${DescriptionFrench}
            "descriptionSpanish" = ${DescriptionSpanish}
            "interpolate" = ${Interpolate}
            "roundCalculatedPrices" = ${RoundCalculatedPrices}
            "roundAmount" = ${RoundAmount}
            "ranges" = ${Ranges}
        }

        return $PSO
    }

}

