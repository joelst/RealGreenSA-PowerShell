#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DiscountCode
No description available.
.PARAMETER GivenCount
No description available.
.PARAMETER GivenAmount
No description available.
.PARAMETER RemainingCount
No description available.
.PARAMETER RemainingAmount
No description available.
.OUTPUTS

DiscountSummary<PSCustomObject>
#>

function Initialize-RGSADiscountSummary {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DiscountCode},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${GivenCount},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${GivenAmount},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RemainingCount},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${RemainingAmount}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSADiscountSummary' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "discountCode" = ${DiscountCode}
            "givenCount" = ${GivenCount}
            "givenAmount" = ${GivenAmount}
            "remainingCount" = ${RemainingCount}
            "remainingAmount" = ${RemainingAmount}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DiscountSummary<PSCustomObject>

.DESCRIPTION

Convert from JSON to DiscountSummary<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DiscountSummary<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToDiscountSummary {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSADiscountSummary' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSADiscountSummary
        $AllProperties = ("discountCode", "givenCount", "givenAmount", "remainingCount", "remainingAmount")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "discountCode"))) { #optional property not found
            $DiscountCode = $null
        } else {
            $DiscountCode = $JsonParameters.PSobject.Properties["discountCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "givenCount"))) { #optional property not found
            $GivenCount = $null
        } else {
            $GivenCount = $JsonParameters.PSobject.Properties["givenCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "givenAmount"))) { #optional property not found
            $GivenAmount = $null
        } else {
            $GivenAmount = $JsonParameters.PSobject.Properties["givenAmount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remainingCount"))) { #optional property not found
            $RemainingCount = $null
        } else {
            $RemainingCount = $JsonParameters.PSobject.Properties["remainingCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remainingAmount"))) { #optional property not found
            $RemainingAmount = $null
        } else {
            $RemainingAmount = $JsonParameters.PSobject.Properties["remainingAmount"].value
        }

        $PSO = [PSCustomObject]@{
            "discountCode" = ${DiscountCode}
            "givenCount" = ${GivenCount}
            "givenAmount" = ${GivenAmount}
            "remainingCount" = ${RemainingCount}
            "remainingAmount" = ${RemainingAmount}
        }

        return $PSO
    }

}

