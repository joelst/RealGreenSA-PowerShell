#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CompanyIDs
No description available.
.PARAMETER Statuses
No description available.
.OUTPUTS

EmailPenetrationCriteria<PSCustomObject>
#>

function Initialize-RgSaEmailPenetrationCriteria {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${CompanyIDs},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Statuses}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaEmailPenetrationCriteria' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "companyIDs" = ${CompanyIDs}
            "statuses" = ${Statuses}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EmailPenetrationCriteria<PSCustomObject>

.DESCRIPTION

Convert from JSON to EmailPenetrationCriteria<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EmailPenetrationCriteria<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToEmailPenetrationCriteria {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaEmailPenetrationCriteria' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaEmailPenetrationCriteria
        $AllProperties = ("companyIDs", "statuses")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "companyIDs"))) { #optional property not found
            $CompanyIDs = $null
        } else {
            $CompanyIDs = $JsonParameters.PSobject.Properties["companyIDs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statuses"))) { #optional property not found
            $Statuses = $null
        } else {
            $Statuses = $JsonParameters.PSobject.Properties["statuses"].value
        }

        $PSO = [PSCustomObject]@{
            "companyIDs" = ${CompanyIDs}
            "statuses" = ${Statuses}
        }

        return $PSO
    }

}

