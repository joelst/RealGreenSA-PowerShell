#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CustomerNumber
No description available.
.PARAMETER DateTimeRange
No description available.
.PARAMETER TransactionCodes
No description available.
.OUTPUTS

HistoryItemSearch<PSCustomObject>
#>

function Initialize-RgSaHistoryItemSearch {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${CustomerNumber},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DateTimeRange},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${TransactionCodes}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaHistoryItemSearch' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $CustomerNumber) {
            throw "invalid value for 'CustomerNumber', 'CustomerNumber' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "customerNumber" = ${CustomerNumber}
            "dateTimeRange" = ${DateTimeRange}
            "transactionCodes" = ${TransactionCodes}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HistoryItemSearch<PSCustomObject>

.DESCRIPTION

Convert from JSON to HistoryItemSearch<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HistoryItemSearch<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToHistoryItemSearch {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaHistoryItemSearch' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaHistoryItemSearch
        $AllProperties = ("customerNumber", "dateTimeRange", "transactionCodes")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'customerNumber' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerNumber"))) {
            throw "Error! JSON cannot be serialized due to the required property 'customerNumber' missing."
        } else {
            $CustomerNumber = $JsonParameters.PSobject.Properties["customerNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateTimeRange"))) { #optional property not found
            $DateTimeRange = $null
        } else {
            $DateTimeRange = $JsonParameters.PSobject.Properties["dateTimeRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "transactionCodes"))) { #optional property not found
            $TransactionCodes = $null
        } else {
            $TransactionCodes = $JsonParameters.PSobject.Properties["transactionCodes"].value
        }

        $PSO = [PSCustomObject]@{
            "customerNumber" = ${CustomerNumber}
            "dateTimeRange" = ${DateTimeRange}
            "transactionCodes" = ${TransactionCodes}
        }

        return $PSO
    }

}

