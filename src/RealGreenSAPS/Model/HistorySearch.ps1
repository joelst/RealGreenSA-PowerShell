#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Records
No description available.
.PARAMETER Offset
No description available.
.PARAMETER CustomerNumbers
No description available.
.PARAMETER CompanyIDs
No description available.
.PARAMETER TransactionDateRange
No description available.
.PARAMETER PostedDateRange
No description available.
.PARAMETER GeneralLedgerDateRange
No description available.
.PARAMETER EnteredBy
No description available.
.PARAMETER AdjustmentCodes
No description available.
.PARAMETER TransactionCodes
No description available.
.PARAMETER CreatedDateRange
No description available.
.PARAMETER UpdatedDateRange
No description available.
.OUTPUTS

HistorySearch<PSCustomObject>
#>

function Initialize-RgSaHistorySearch {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Records},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${CustomerNumbers},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${CompanyIDs},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${TransactionDateRange},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PostedDateRange},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${GeneralLedgerDateRange},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${EnteredBy},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${AdjustmentCodes},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${TransactionCodes},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CreatedDateRange},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UpdatedDateRange}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaHistorySearch' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Records -and $Records -gt 500) {
          throw "invalid value for 'Records', must be smaller than or equal to 500."
        }

        if ($Records -and $Records -lt 0) {
          throw "invalid value for 'Records', must be greater than or equal to 0."
        }

        if ($Offset -and $Offset -gt 2147483647) {
          throw "invalid value for 'Offset', must be smaller than or equal to 2147483647."
        }

        if ($Offset -and $Offset -lt 0) {
          throw "invalid value for 'Offset', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "records" = ${Records}
            "offset" = ${Offset}
            "customerNumbers" = ${CustomerNumbers}
            "companyIDs" = ${CompanyIDs}
            "transactionDateRange" = ${TransactionDateRange}
            "postedDateRange" = ${PostedDateRange}
            "generalLedgerDateRange" = ${GeneralLedgerDateRange}
            "enteredBy" = ${EnteredBy}
            "adjustmentCodes" = ${AdjustmentCodes}
            "transactionCodes" = ${TransactionCodes}
            "createdDateRange" = ${CreatedDateRange}
            "updatedDateRange" = ${UpdatedDateRange}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HistorySearch<PSCustomObject>

.DESCRIPTION

Convert from JSON to HistorySearch<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HistorySearch<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToHistorySearch {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaHistorySearch' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaHistorySearch
        $AllProperties = ("records", "offset", "customerNumbers", "companyIDs", "transactionDateRange", "postedDateRange", "generalLedgerDateRange", "enteredBy", "adjustmentCodes", "transactionCodes", "createdDateRange", "updatedDateRange")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "records"))) { #optional property not found
            $Records = $null
        } else {
            $Records = $JsonParameters.PSobject.Properties["records"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "offset"))) { #optional property not found
            $Offset = $null
        } else {
            $Offset = $JsonParameters.PSobject.Properties["offset"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerNumbers"))) { #optional property not found
            $CustomerNumbers = $null
        } else {
            $CustomerNumbers = $JsonParameters.PSobject.Properties["customerNumbers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "companyIDs"))) { #optional property not found
            $CompanyIDs = $null
        } else {
            $CompanyIDs = $JsonParameters.PSobject.Properties["companyIDs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "transactionDateRange"))) { #optional property not found
            $TransactionDateRange = $null
        } else {
            $TransactionDateRange = $JsonParameters.PSobject.Properties["transactionDateRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "postedDateRange"))) { #optional property not found
            $PostedDateRange = $null
        } else {
            $PostedDateRange = $JsonParameters.PSobject.Properties["postedDateRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generalLedgerDateRange"))) { #optional property not found
            $GeneralLedgerDateRange = $null
        } else {
            $GeneralLedgerDateRange = $JsonParameters.PSobject.Properties["generalLedgerDateRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enteredBy"))) { #optional property not found
            $EnteredBy = $null
        } else {
            $EnteredBy = $JsonParameters.PSobject.Properties["enteredBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "adjustmentCodes"))) { #optional property not found
            $AdjustmentCodes = $null
        } else {
            $AdjustmentCodes = $JsonParameters.PSobject.Properties["adjustmentCodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "transactionCodes"))) { #optional property not found
            $TransactionCodes = $null
        } else {
            $TransactionCodes = $JsonParameters.PSobject.Properties["transactionCodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdDateRange"))) { #optional property not found
            $CreatedDateRange = $null
        } else {
            $CreatedDateRange = $JsonParameters.PSobject.Properties["createdDateRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updatedDateRange"))) { #optional property not found
            $UpdatedDateRange = $null
        } else {
            $UpdatedDateRange = $JsonParameters.PSobject.Properties["updatedDateRange"].value
        }

        $PSO = [PSCustomObject]@{
            "records" = ${Records}
            "offset" = ${Offset}
            "customerNumbers" = ${CustomerNumbers}
            "companyIDs" = ${CompanyIDs}
            "transactionDateRange" = ${TransactionDateRange}
            "postedDateRange" = ${PostedDateRange}
            "generalLedgerDateRange" = ${GeneralLedgerDateRange}
            "enteredBy" = ${EnteredBy}
            "adjustmentCodes" = ${AdjustmentCodes}
            "transactionCodes" = ${TransactionCodes}
            "createdDateRange" = ${CreatedDateRange}
            "updatedDateRange" = ${UpdatedDateRange}
        }

        return $PSO
    }

}

