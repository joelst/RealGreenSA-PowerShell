#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ContractPaymentId
No description available.
.PARAMETER DueDate
No description available.
.PARAMETER Amount
No description available.
.PARAMETER Tax1
No description available.
.PARAMETER Tax2
No description available.
.PARAMETER Tax3
No description available.
.PARAMETER Total
No description available.
.PARAMETER Billed
No description available.
.PARAMETER InvoiceNumber
No description available.
.PARAMETER PrePayId
No description available.
.PARAMETER PrePayment
No description available.
.OUTPUTS

IndividualInstallment<PSCustomObject>
#>

function Initialize-RGSAIndividualInstallment {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ContractPaymentId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DueDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Amount},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Tax1},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Tax2},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Tax3},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Total},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Billed},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${InvoiceNumber},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PrePayId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${PrePayment}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSAIndividualInstallment' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "contractPaymentId" = ${ContractPaymentId}
            "dueDate" = ${DueDate}
            "amount" = ${Amount}
            "tax1" = ${Tax1}
            "tax2" = ${Tax2}
            "tax3" = ${Tax3}
            "total" = ${Total}
            "billed" = ${Billed}
            "invoiceNumber" = ${InvoiceNumber}
            "prePayId" = ${PrePayId}
            "prePayment" = ${PrePayment}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IndividualInstallment<PSCustomObject>

.DESCRIPTION

Convert from JSON to IndividualInstallment<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IndividualInstallment<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToIndividualInstallment {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSAIndividualInstallment' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSAIndividualInstallment
        $AllProperties = ("contractPaymentId", "dueDate", "amount", "tax1", "tax2", "tax3", "total", "billed", "invoiceNumber", "prePayId", "prePayment")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contractPaymentId"))) { #optional property not found
            $ContractPaymentId = $null
        } else {
            $ContractPaymentId = $JsonParameters.PSobject.Properties["contractPaymentId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dueDate"))) { #optional property not found
            $DueDate = $null
        } else {
            $DueDate = $JsonParameters.PSobject.Properties["dueDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "amount"))) { #optional property not found
            $Amount = $null
        } else {
            $Amount = $JsonParameters.PSobject.Properties["amount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tax1"))) { #optional property not found
            $Tax1 = $null
        } else {
            $Tax1 = $JsonParameters.PSobject.Properties["tax1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tax2"))) { #optional property not found
            $Tax2 = $null
        } else {
            $Tax2 = $JsonParameters.PSobject.Properties["tax2"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tax3"))) { #optional property not found
            $Tax3 = $null
        } else {
            $Tax3 = $JsonParameters.PSobject.Properties["tax3"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total"))) { #optional property not found
            $Total = $null
        } else {
            $Total = $JsonParameters.PSobject.Properties["total"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "billed"))) { #optional property not found
            $Billed = $null
        } else {
            $Billed = $JsonParameters.PSobject.Properties["billed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "invoiceNumber"))) { #optional property not found
            $InvoiceNumber = $null
        } else {
            $InvoiceNumber = $JsonParameters.PSobject.Properties["invoiceNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prePayId"))) { #optional property not found
            $PrePayId = $null
        } else {
            $PrePayId = $JsonParameters.PSobject.Properties["prePayId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prePayment"))) { #optional property not found
            $PrePayment = $null
        } else {
            $PrePayment = $JsonParameters.PSobject.Properties["prePayment"].value
        }

        $PSO = [PSCustomObject]@{
            "contractPaymentId" = ${ContractPaymentId}
            "dueDate" = ${DueDate}
            "amount" = ${Amount}
            "tax1" = ${Tax1}
            "tax2" = ${Tax2}
            "tax3" = ${Tax3}
            "total" = ${Total}
            "billed" = ${Billed}
            "invoiceNumber" = ${InvoiceNumber}
            "prePayId" = ${PrePayId}
            "prePayment" = ${PrePayment}
        }

        return $PSO
    }

}

