#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
No description available.
.PARAMETER Zipcode
No description available.
.PARAMETER StreetNumberAndName
No description available.
.PARAMETER EmailAddress
No description available.
.PARAMETER HomePhoneNumber
No description available.
.PARAMETER WorkPhoneNumber
No description available.
.PARAMETER CellPhoneNumber
No description available.
.PARAMETER FaxPhoneNumber
No description available.
.PARAMETER PagePhoneNumber
No description available.
.PARAMETER OtherPhoneNumber
No description available.
.PARAMETER SourceCode
No description available.
.PARAMETER FirstName
No description available.
.PARAMETER LastName
No description available.
.PARAMETER FormattedAddress
No description available.
.PARAMETER ActionReasonID
No description available.
.PARAMETER EmployeeId
No description available.
.PARAMETER CountryOrRegionCode
No description available.
.PARAMETER ShortZip
No description available.
.PARAMETER ClosedLoopId
No description available.
.PARAMETER CallLogNotes
No description available.
.PARAMETER ClearMemoOnLastNameChange
No description available.
.PARAMETER ClearTechNotesOnLastNameChange
No description available.
.PARAMETER BranchID
No description available.
.OUTPUTS

LeadForm<PSCustomObject>
#>

function Initialize-RGSALeadForm {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Zipcode},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StreetNumberAndName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmailAddress},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HomePhoneNumber},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WorkPhoneNumber},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CellPhoneNumber},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FaxPhoneNumber},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PagePhoneNumber},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OtherPhoneNumber},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SourceCode},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FirstName},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastName},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FormattedAddress},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ActionReasonID},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmployeeId},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CountryOrRegionCode},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ShortZip},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ClosedLoopId},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CallLogNotes},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ClearMemoOnLastNameChange},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ClearTechNotesOnLastNameChange},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${BranchID}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSALeadForm' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "zipcode" = ${Zipcode}
            "streetNumberAndName" = ${StreetNumberAndName}
            "emailAddress" = ${EmailAddress}
            "homePhoneNumber" = ${HomePhoneNumber}
            "workPhoneNumber" = ${WorkPhoneNumber}
            "cellPhoneNumber" = ${CellPhoneNumber}
            "faxPhoneNumber" = ${FaxPhoneNumber}
            "pagePhoneNumber" = ${PagePhoneNumber}
            "otherPhoneNumber" = ${OtherPhoneNumber}
            "sourceCode" = ${SourceCode}
            "firstName" = ${FirstName}
            "lastName" = ${LastName}
            "formattedAddress" = ${FormattedAddress}
            "actionReasonID" = ${ActionReasonID}
            "employeeId" = ${EmployeeId}
            "countryOrRegionCode" = ${CountryOrRegionCode}
            "shortZip" = ${ShortZip}
            "closedLoopId" = ${ClosedLoopId}
            "callLogNotes" = ${CallLogNotes}
            "clearMemoOnLastNameChange" = ${ClearMemoOnLastNameChange}
            "clearTechNotesOnLastNameChange" = ${ClearTechNotesOnLastNameChange}
            "branchID" = ${BranchID}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to LeadForm<PSCustomObject>

.DESCRIPTION

Convert from JSON to LeadForm<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

LeadForm<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToLeadForm {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSALeadForm' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSALeadForm
        $AllProperties = ("name", "zipcode", "streetNumberAndName", "emailAddress", "homePhoneNumber", "workPhoneNumber", "cellPhoneNumber", "faxPhoneNumber", "pagePhoneNumber", "otherPhoneNumber", "sourceCode", "firstName", "lastName", "formattedAddress", "actionReasonID", "employeeId", "countryOrRegionCode", "shortZip", "closedLoopId", "callLogNotes", "clearMemoOnLastNameChange", "clearTechNotesOnLastNameChange", "branchID")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zipcode"))) { #optional property not found
            $Zipcode = $null
        } else {
            $Zipcode = $JsonParameters.PSobject.Properties["zipcode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "streetNumberAndName"))) { #optional property not found
            $StreetNumberAndName = $null
        } else {
            $StreetNumberAndName = $JsonParameters.PSobject.Properties["streetNumberAndName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emailAddress"))) { #optional property not found
            $EmailAddress = $null
        } else {
            $EmailAddress = $JsonParameters.PSobject.Properties["emailAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "homePhoneNumber"))) { #optional property not found
            $HomePhoneNumber = $null
        } else {
            $HomePhoneNumber = $JsonParameters.PSobject.Properties["homePhoneNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "workPhoneNumber"))) { #optional property not found
            $WorkPhoneNumber = $null
        } else {
            $WorkPhoneNumber = $JsonParameters.PSobject.Properties["workPhoneNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cellPhoneNumber"))) { #optional property not found
            $CellPhoneNumber = $null
        } else {
            $CellPhoneNumber = $JsonParameters.PSobject.Properties["cellPhoneNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "faxPhoneNumber"))) { #optional property not found
            $FaxPhoneNumber = $null
        } else {
            $FaxPhoneNumber = $JsonParameters.PSobject.Properties["faxPhoneNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pagePhoneNumber"))) { #optional property not found
            $PagePhoneNumber = $null
        } else {
            $PagePhoneNumber = $JsonParameters.PSobject.Properties["pagePhoneNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "otherPhoneNumber"))) { #optional property not found
            $OtherPhoneNumber = $null
        } else {
            $OtherPhoneNumber = $JsonParameters.PSobject.Properties["otherPhoneNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceCode"))) { #optional property not found
            $SourceCode = $null
        } else {
            $SourceCode = $JsonParameters.PSobject.Properties["sourceCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "firstName"))) { #optional property not found
            $FirstName = $null
        } else {
            $FirstName = $JsonParameters.PSobject.Properties["firstName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastName"))) { #optional property not found
            $LastName = $null
        } else {
            $LastName = $JsonParameters.PSobject.Properties["lastName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formattedAddress"))) { #optional property not found
            $FormattedAddress = $null
        } else {
            $FormattedAddress = $JsonParameters.PSobject.Properties["formattedAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actionReasonID"))) { #optional property not found
            $ActionReasonID = $null
        } else {
            $ActionReasonID = $JsonParameters.PSobject.Properties["actionReasonID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "employeeId"))) { #optional property not found
            $EmployeeId = $null
        } else {
            $EmployeeId = $JsonParameters.PSobject.Properties["employeeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "countryOrRegionCode"))) { #optional property not found
            $CountryOrRegionCode = $null
        } else {
            $CountryOrRegionCode = $JsonParameters.PSobject.Properties["countryOrRegionCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shortZip"))) { #optional property not found
            $ShortZip = $null
        } else {
            $ShortZip = $JsonParameters.PSobject.Properties["shortZip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "closedLoopId"))) { #optional property not found
            $ClosedLoopId = $null
        } else {
            $ClosedLoopId = $JsonParameters.PSobject.Properties["closedLoopId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "callLogNotes"))) { #optional property not found
            $CallLogNotes = $null
        } else {
            $CallLogNotes = $JsonParameters.PSobject.Properties["callLogNotes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "clearMemoOnLastNameChange"))) { #optional property not found
            $ClearMemoOnLastNameChange = $null
        } else {
            $ClearMemoOnLastNameChange = $JsonParameters.PSobject.Properties["clearMemoOnLastNameChange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "clearTechNotesOnLastNameChange"))) { #optional property not found
            $ClearTechNotesOnLastNameChange = $null
        } else {
            $ClearTechNotesOnLastNameChange = $JsonParameters.PSobject.Properties["clearTechNotesOnLastNameChange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "branchID"))) { #optional property not found
            $BranchID = $null
        } else {
            $BranchID = $JsonParameters.PSobject.Properties["branchID"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "zipcode" = ${Zipcode}
            "streetNumberAndName" = ${StreetNumberAndName}
            "emailAddress" = ${EmailAddress}
            "homePhoneNumber" = ${HomePhoneNumber}
            "workPhoneNumber" = ${WorkPhoneNumber}
            "cellPhoneNumber" = ${CellPhoneNumber}
            "faxPhoneNumber" = ${FaxPhoneNumber}
            "pagePhoneNumber" = ${PagePhoneNumber}
            "otherPhoneNumber" = ${OtherPhoneNumber}
            "sourceCode" = ${SourceCode}
            "firstName" = ${FirstName}
            "lastName" = ${LastName}
            "formattedAddress" = ${FormattedAddress}
            "actionReasonID" = ${ActionReasonID}
            "employeeId" = ${EmployeeId}
            "countryOrRegionCode" = ${CountryOrRegionCode}
            "shortZip" = ${ShortZip}
            "closedLoopId" = ${ClosedLoopId}
            "callLogNotes" = ${CallLogNotes}
            "clearMemoOnLastNameChange" = ${ClearMemoOnLastNameChange}
            "clearTechNotesOnLastNameChange" = ${ClearTechNotesOnLastNameChange}
            "branchID" = ${BranchID}
        }

        return $PSO
    }

}

