#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CompanyIDs
No description available.
.PARAMETER ProgramDefinitionIDs
No description available.
.PARAMETER SourceCodes
No description available.
.PARAMETER EstimateRequestedDateRange
No description available.
.PARAMETER CustomDateRange
No description available.
.PARAMETER EstimateGivenBy
No description available.
.PARAMETER SoldBy1
No description available.
.PARAMETER SoldBy2
No description available.
.OUTPUTS

LeadSourceSummaryRequest<PSCustomObject>
#>

function Initialize-RgSaLeadSourceSummaryRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${CompanyIDs},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${ProgramDefinitionIDs},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${SourceCodes},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Today", "Yesterday", "WeekToDate", "MonthToDate", "YearToDate", "LastYearToDateLastYear", "LastYear", "Custom")]
        [PSCustomObject]
        ${EstimateRequestedDateRange},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CustomDateRange},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${EstimateGivenBy},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${SoldBy1},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${SoldBy2}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaLeadSourceSummaryRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $EstimateRequestedDateRange) {
            throw "invalid value for 'EstimateRequestedDateRange', 'EstimateRequestedDateRange' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "companyIDs" = ${CompanyIDs}
            "programDefinitionIDs" = ${ProgramDefinitionIDs}
            "sourceCodes" = ${SourceCodes}
            "estimateRequestedDateRange" = ${EstimateRequestedDateRange}
            "customDateRange" = ${CustomDateRange}
            "estimateGivenBy" = ${EstimateGivenBy}
            "soldBy1" = ${SoldBy1}
            "soldBy2" = ${SoldBy2}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to LeadSourceSummaryRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to LeadSourceSummaryRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

LeadSourceSummaryRequest<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToLeadSourceSummaryRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaLeadSourceSummaryRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaLeadSourceSummaryRequest
        $AllProperties = ("companyIDs", "programDefinitionIDs", "sourceCodes", "estimateRequestedDateRange", "customDateRange", "estimateGivenBy", "soldBy1", "soldBy2")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'estimateRequestedDateRange' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "estimateRequestedDateRange"))) {
            throw "Error! JSON cannot be serialized due to the required property 'estimateRequestedDateRange' missing."
        } else {
            $EstimateRequestedDateRange = $JsonParameters.PSobject.Properties["estimateRequestedDateRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "companyIDs"))) { #optional property not found
            $CompanyIDs = $null
        } else {
            $CompanyIDs = $JsonParameters.PSobject.Properties["companyIDs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "programDefinitionIDs"))) { #optional property not found
            $ProgramDefinitionIDs = $null
        } else {
            $ProgramDefinitionIDs = $JsonParameters.PSobject.Properties["programDefinitionIDs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceCodes"))) { #optional property not found
            $SourceCodes = $null
        } else {
            $SourceCodes = $JsonParameters.PSobject.Properties["sourceCodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customDateRange"))) { #optional property not found
            $CustomDateRange = $null
        } else {
            $CustomDateRange = $JsonParameters.PSobject.Properties["customDateRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "estimateGivenBy"))) { #optional property not found
            $EstimateGivenBy = $null
        } else {
            $EstimateGivenBy = $JsonParameters.PSobject.Properties["estimateGivenBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "soldBy1"))) { #optional property not found
            $SoldBy1 = $null
        } else {
            $SoldBy1 = $JsonParameters.PSobject.Properties["soldBy1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "soldBy2"))) { #optional property not found
            $SoldBy2 = $null
        } else {
            $SoldBy2 = $JsonParameters.PSobject.Properties["soldBy2"].value
        }

        $PSO = [PSCustomObject]@{
            "companyIDs" = ${CompanyIDs}
            "programDefinitionIDs" = ${ProgramDefinitionIDs}
            "sourceCodes" = ${SourceCodes}
            "estimateRequestedDateRange" = ${EstimateRequestedDateRange}
            "customDateRange" = ${CustomDateRange}
            "estimateGivenBy" = ${EstimateGivenBy}
            "soldBy1" = ${SoldBy1}
            "soldBy2" = ${SoldBy2}
        }

        return $PSO
    }

}

