#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CompanyID
No description available.
.PARAMETER Detractors
No description available.
.PARAMETER Passives
No description available.
.PARAMETER Promoters
No description available.
.PARAMETER NpsScore
No description available.
.OUTPUTS

NPSResult<PSCustomObject>
#>

function Initialize-RGSANPSResult {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CompanyID},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Detractors},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Passives},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Promoters},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${NpsScore}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSANPSResult' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "companyID" = ${CompanyID}
            "detractors" = ${Detractors}
            "passives" = ${Passives}
            "promoters" = ${Promoters}
            "npsScore" = ${NpsScore}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NPSResult<PSCustomObject>

.DESCRIPTION

Convert from JSON to NPSResult<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NPSResult<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToNPSResult {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSANPSResult' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSANPSResult
        $AllProperties = ("companyID", "detractors", "passives", "promoters", "npsScore")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "companyID"))) { #optional property not found
            $CompanyID = $null
        } else {
            $CompanyID = $JsonParameters.PSobject.Properties["companyID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "detractors"))) { #optional property not found
            $Detractors = $null
        } else {
            $Detractors = $JsonParameters.PSobject.Properties["detractors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "passives"))) { #optional property not found
            $Passives = $null
        } else {
            $Passives = $JsonParameters.PSobject.Properties["passives"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "promoters"))) { #optional property not found
            $Promoters = $null
        } else {
            $Promoters = $JsonParameters.PSobject.Properties["promoters"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "npsScore"))) { #optional property not found
            $NpsScore = $null
        } else {
            $NpsScore = $JsonParameters.PSobject.Properties["npsScore"].value
        }

        $PSO = [PSCustomObject]@{
            "companyID" = ${CompanyID}
            "detractors" = ${Detractors}
            "passives" = ${Passives}
            "promoters" = ${Promoters}
            "npsScore" = ${NpsScore}
        }

        return $PSO
    }

}

