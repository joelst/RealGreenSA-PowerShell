#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CompanyIDs
No description available.
.PARAMETER ProgramDefinitionIDs
No description available.
.PARAMETER SourceCodes
No description available.
.PARAMETER CancelReasonIDs
No description available.
.PARAMETER SoldDateRange
No description available.
.PARAMETER CustomSoldDateRange
No description available.
.PARAMETER CancelDateRange
No description available.
.PARAMETER CustomCancelDateRange
No description available.
.OUTPUTS

NewSaleCancelsRequest<PSCustomObject>
#>

function Initialize-RGSANewSaleCancelsRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${CompanyIDs},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${ProgramDefinitionIDs},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${SourceCodes},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${CancelReasonIDs},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Today", "Yesterday", "WeekToDate", "MonthToDate", "YearToDate", "LastYearToDateLastYear", "LastYear", "Custom")]
        [PSCustomObject]
        ${SoldDateRange},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CustomSoldDateRange},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Today", "Yesterday", "WeekToDate", "MonthToDate", "YearToDate", "LastYearToDateLastYear", "LastYear", "Custom")]
        [PSCustomObject]
        ${CancelDateRange},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CustomCancelDateRange}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSANewSaleCancelsRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $SoldDateRange) {
            throw "invalid value for 'SoldDateRange', 'SoldDateRange' cannot be null."
        }

        if ($null -eq $CancelDateRange) {
            throw "invalid value for 'CancelDateRange', 'CancelDateRange' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "companyIDs" = ${CompanyIDs}
            "programDefinitionIDs" = ${ProgramDefinitionIDs}
            "sourceCodes" = ${SourceCodes}
            "cancelReasonIDs" = ${CancelReasonIDs}
            "soldDateRange" = ${SoldDateRange}
            "customSoldDateRange" = ${CustomSoldDateRange}
            "cancelDateRange" = ${CancelDateRange}
            "customCancelDateRange" = ${CustomCancelDateRange}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NewSaleCancelsRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to NewSaleCancelsRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NewSaleCancelsRequest<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToNewSaleCancelsRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSANewSaleCancelsRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSANewSaleCancelsRequest
        $AllProperties = ("companyIDs", "programDefinitionIDs", "sourceCodes", "cancelReasonIDs", "soldDateRange", "customSoldDateRange", "cancelDateRange", "customCancelDateRange")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'soldDateRange' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "soldDateRange"))) {
            throw "Error! JSON cannot be serialized due to the required property 'soldDateRange' missing."
        } else {
            $SoldDateRange = $JsonParameters.PSobject.Properties["soldDateRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cancelDateRange"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cancelDateRange' missing."
        } else {
            $CancelDateRange = $JsonParameters.PSobject.Properties["cancelDateRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "companyIDs"))) { #optional property not found
            $CompanyIDs = $null
        } else {
            $CompanyIDs = $JsonParameters.PSobject.Properties["companyIDs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "programDefinitionIDs"))) { #optional property not found
            $ProgramDefinitionIDs = $null
        } else {
            $ProgramDefinitionIDs = $JsonParameters.PSobject.Properties["programDefinitionIDs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceCodes"))) { #optional property not found
            $SourceCodes = $null
        } else {
            $SourceCodes = $JsonParameters.PSobject.Properties["sourceCodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cancelReasonIDs"))) { #optional property not found
            $CancelReasonIDs = $null
        } else {
            $CancelReasonIDs = $JsonParameters.PSobject.Properties["cancelReasonIDs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customSoldDateRange"))) { #optional property not found
            $CustomSoldDateRange = $null
        } else {
            $CustomSoldDateRange = $JsonParameters.PSobject.Properties["customSoldDateRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customCancelDateRange"))) { #optional property not found
            $CustomCancelDateRange = $null
        } else {
            $CustomCancelDateRange = $JsonParameters.PSobject.Properties["customCancelDateRange"].value
        }

        $PSO = [PSCustomObject]@{
            "companyIDs" = ${CompanyIDs}
            "programDefinitionIDs" = ${ProgramDefinitionIDs}
            "sourceCodes" = ${SourceCodes}
            "cancelReasonIDs" = ${CancelReasonIDs}
            "soldDateRange" = ${SoldDateRange}
            "customSoldDateRange" = ${CustomSoldDateRange}
            "cancelDateRange" = ${CancelDateRange}
            "customCancelDateRange" = ${CustomCancelDateRange}
        }

        return $PSO
    }

}

