#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER NonServiceReasonID
No description available.
.PARAMETER NonServicedReason
No description available.
.PARAMETER NonServicedReasonCount
No description available.
.PARAMETER ServicedCount
No description available.
.PARAMETER Skipped
No description available.
.PARAMETER Serviceable
No description available.
.OUTPUTS

NonServiceDetail<PSCustomObject>
#>

function Initialize-RgSaNonServiceDetail {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NonServiceReasonID},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NonServicedReason},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NonServicedReasonCount},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ServicedCount},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Skipped},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Serviceable}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaNonServiceDetail' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "nonServiceReasonID" = ${NonServiceReasonID}
            "nonServicedReason" = ${NonServicedReason}
            "nonServicedReasonCount" = ${NonServicedReasonCount}
            "servicedCount" = ${ServicedCount}
            "skipped" = ${Skipped}
            "serviceable" = ${Serviceable}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NonServiceDetail<PSCustomObject>

.DESCRIPTION

Convert from JSON to NonServiceDetail<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NonServiceDetail<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToNonServiceDetail {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaNonServiceDetail' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaNonServiceDetail
        $AllProperties = ("nonServiceReasonID", "nonServicedReason", "nonServicedReasonCount", "servicedCount", "skipped", "serviceable")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nonServiceReasonID"))) { #optional property not found
            $NonServiceReasonID = $null
        } else {
            $NonServiceReasonID = $JsonParameters.PSobject.Properties["nonServiceReasonID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nonServicedReason"))) { #optional property not found
            $NonServicedReason = $null
        } else {
            $NonServicedReason = $JsonParameters.PSobject.Properties["nonServicedReason"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nonServicedReasonCount"))) { #optional property not found
            $NonServicedReasonCount = $null
        } else {
            $NonServicedReasonCount = $JsonParameters.PSobject.Properties["nonServicedReasonCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "servicedCount"))) { #optional property not found
            $ServicedCount = $null
        } else {
            $ServicedCount = $JsonParameters.PSobject.Properties["servicedCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "skipped"))) { #optional property not found
            $Skipped = $null
        } else {
            $Skipped = $JsonParameters.PSobject.Properties["skipped"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceable"))) { #optional property not found
            $Serviceable = $null
        } else {
            $Serviceable = $JsonParameters.PSobject.Properties["serviceable"].value
        }

        $PSO = [PSCustomObject]@{
            "nonServiceReasonID" = ${NonServiceReasonID}
            "nonServicedReason" = ${NonServicedReason}
            "nonServicedReasonCount" = ${NonServicedReasonCount}
            "servicedCount" = ${ServicedCount}
            "skipped" = ${Skipped}
            "serviceable" = ${Serviceable}
        }

        return $PSO
    }

}

