#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Code
No description available.
.PARAMETER Description
No description available.
.PARAMETER PackageID
No description available.
.PARAMETER ProgramDefinitionID
No description available.
.PARAMETER DiscountCode
No description available.
.PARAMETER ApplyDiscount
No description available.
.OUTPUTS

PackageProgram<PSCustomObject>
#>

function Initialize-RGSAPackageProgram {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PackageID},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ProgramDefinitionID},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DiscountCode},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ApplyDiscount}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSAPackageProgram' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "code" = ${Code}
            "description" = ${Description}
            "packageID" = ${PackageID}
            "programDefinitionID" = ${ProgramDefinitionID}
            "discountCode" = ${DiscountCode}
            "applyDiscount" = ${ApplyDiscount}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PackageProgram<PSCustomObject>

.DESCRIPTION

Convert from JSON to PackageProgram<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PackageProgram<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToPackageProgram {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSAPackageProgram' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSAPackageProgram
        $AllProperties = ("id", "code", "description", "packageID", "programDefinitionID", "discountCode", "applyDiscount")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) { #optional property not found
            $Code = $null
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "packageID"))) { #optional property not found
            $PackageID = $null
        } else {
            $PackageID = $JsonParameters.PSobject.Properties["packageID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "programDefinitionID"))) { #optional property not found
            $ProgramDefinitionID = $null
        } else {
            $ProgramDefinitionID = $JsonParameters.PSobject.Properties["programDefinitionID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "discountCode"))) { #optional property not found
            $DiscountCode = $null
        } else {
            $DiscountCode = $JsonParameters.PSobject.Properties["discountCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "applyDiscount"))) { #optional property not found
            $ApplyDiscount = $null
        } else {
            $ApplyDiscount = $JsonParameters.PSobject.Properties["applyDiscount"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "code" = ${Code}
            "description" = ${Description}
            "packageID" = ${PackageID}
            "programDefinitionID" = ${ProgramDefinitionID}
            "discountCode" = ${DiscountCode}
            "applyDiscount" = ${ApplyDiscount}
        }

        return $PSO
    }

}

