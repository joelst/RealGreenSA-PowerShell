#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Number
No description available.
.PARAMETER Type
No description available.
.PARAMETER PhoneType
No description available.
.PARAMETER TypeDescription
No description available.
.PARAMETER IsPreferred
No description available.
.OUTPUTS

Phone<PSCustomObject>
#>

function Initialize-RgSaPhone {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Number},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("None", "Cell", "Fax", "Home", "Other", "Text", "Work")]
        [PSCustomObject]
        ${PhoneType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TypeDescription},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsPreferred}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaPhone' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "number" = ${Number}
            "type" = ${Type}
            "phoneType" = ${PhoneType}
            "typeDescription" = ${TypeDescription}
            "isPreferred" = ${IsPreferred}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Phone<PSCustomObject>

.DESCRIPTION

Convert from JSON to Phone<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Phone<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToPhone {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaPhone' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaPhone
        $AllProperties = ("number", "type", "phoneType", "typeDescription", "isPreferred")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "number"))) { #optional property not found
            $Number = $null
        } else {
            $Number = $JsonParameters.PSobject.Properties["number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "phoneType"))) { #optional property not found
            $PhoneType = $null
        } else {
            $PhoneType = $JsonParameters.PSobject.Properties["phoneType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "typeDescription"))) { #optional property not found
            $TypeDescription = $null
        } else {
            $TypeDescription = $JsonParameters.PSobject.Properties["typeDescription"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isPreferred"))) { #optional property not found
            $IsPreferred = $null
        } else {
            $IsPreferred = $JsonParameters.PSobject.Properties["isPreferred"].value
        }

        $PSO = [PSCustomObject]@{
            "number" = ${Number}
            "type" = ${Type}
            "phoneType" = ${PhoneType}
            "typeDescription" = ${TypeDescription}
            "isPreferred" = ${IsPreferred}
        }

        return $PSO
    }

}

