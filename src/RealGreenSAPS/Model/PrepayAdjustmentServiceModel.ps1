#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CustomerNumber
No description available.
.PARAMETER PrepayCode
No description available.
.PARAMETER ProgIds
No description available.
.PARAMETER EmpId
No description available.
.OUTPUTS

PrepayAdjustmentServiceModel<PSCustomObject>
#>

function Initialize-RgSaPrepayAdjustmentServiceModel {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CustomerNumber},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PrepayCode},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${ProgIds},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmpId}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaPrepayAdjustmentServiceModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "customerNumber" = ${CustomerNumber}
            "prepayCode" = ${PrepayCode}
            "progIds" = ${ProgIds}
            "empId" = ${EmpId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PrepayAdjustmentServiceModel<PSCustomObject>

.DESCRIPTION

Convert from JSON to PrepayAdjustmentServiceModel<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PrepayAdjustmentServiceModel<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToPrepayAdjustmentServiceModel {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaPrepayAdjustmentServiceModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaPrepayAdjustmentServiceModel
        $AllProperties = ("customerNumber", "prepayCode", "progIds", "empId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerNumber"))) { #optional property not found
            $CustomerNumber = $null
        } else {
            $CustomerNumber = $JsonParameters.PSobject.Properties["customerNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prepayCode"))) { #optional property not found
            $PrepayCode = $null
        } else {
            $PrepayCode = $JsonParameters.PSobject.Properties["prepayCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "progIds"))) { #optional property not found
            $ProgIds = $null
        } else {
            $ProgIds = $JsonParameters.PSobject.Properties["progIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "empId"))) { #optional property not found
            $EmpId = $null
        } else {
            $EmpId = $JsonParameters.PSobject.Properties["empId"].value
        }

        $PSO = [PSCustomObject]@{
            "customerNumber" = ${CustomerNumber}
            "prepayCode" = ${PrepayCode}
            "progIds" = ${ProgIds}
            "empId" = ${EmpId}
        }

        return $PSO
    }

}

