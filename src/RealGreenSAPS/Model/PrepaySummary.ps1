#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PrepayCode
No description available.
.PARAMETER ServicesRemaining
No description available.
.PARAMETER DollarsRemaining
No description available.
.PARAMETER GrossDollarsRemaining
No description available.
.PARAMETER NumberGiven
No description available.
.PARAMETER DollarsGiven
No description available.
.OUTPUTS

PrepaySummary<PSCustomObject>
#>

function Initialize-RgSaPrepaySummary {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PrepayCode},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ServicesRemaining},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${DollarsRemaining},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${GrossDollarsRemaining},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NumberGiven},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${DollarsGiven}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaPrepaySummary' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "prepayCode" = ${PrepayCode}
            "servicesRemaining" = ${ServicesRemaining}
            "dollarsRemaining" = ${DollarsRemaining}
            "grossDollarsRemaining" = ${GrossDollarsRemaining}
            "numberGiven" = ${NumberGiven}
            "dollarsGiven" = ${DollarsGiven}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PrepaySummary<PSCustomObject>

.DESCRIPTION

Convert from JSON to PrepaySummary<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PrepaySummary<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToPrepaySummary {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaPrepaySummary' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaPrepaySummary
        $AllProperties = ("prepayCode", "servicesRemaining", "dollarsRemaining", "grossDollarsRemaining", "numberGiven", "dollarsGiven")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prepayCode"))) { #optional property not found
            $PrepayCode = $null
        } else {
            $PrepayCode = $JsonParameters.PSobject.Properties["prepayCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "servicesRemaining"))) { #optional property not found
            $ServicesRemaining = $null
        } else {
            $ServicesRemaining = $JsonParameters.PSobject.Properties["servicesRemaining"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dollarsRemaining"))) { #optional property not found
            $DollarsRemaining = $null
        } else {
            $DollarsRemaining = $JsonParameters.PSobject.Properties["dollarsRemaining"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "grossDollarsRemaining"))) { #optional property not found
            $GrossDollarsRemaining = $null
        } else {
            $GrossDollarsRemaining = $JsonParameters.PSobject.Properties["grossDollarsRemaining"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "numberGiven"))) { #optional property not found
            $NumberGiven = $null
        } else {
            $NumberGiven = $JsonParameters.PSobject.Properties["numberGiven"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dollarsGiven"))) { #optional property not found
            $DollarsGiven = $null
        } else {
            $DollarsGiven = $JsonParameters.PSobject.Properties["dollarsGiven"].value
        }

        $PSO = [PSCustomObject]@{
            "prepayCode" = ${PrepayCode}
            "servicesRemaining" = ${ServicesRemaining}
            "dollarsRemaining" = ${DollarsRemaining}
            "grossDollarsRemaining" = ${GrossDollarsRemaining}
            "numberGiven" = ${NumberGiven}
            "dollarsGiven" = ${DollarsGiven}
        }

        return $PSO
    }

}

