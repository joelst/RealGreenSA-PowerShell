#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ProgramIDs
No description available.
.PARAMETER IncreaseAmount
No description available.
.PARAMETER IsPercentIncrease
No description available.
.PARAMETER OnlyIncreaseRenewalPrice
No description available.
.OUTPUTS

PriceIncreaseCriteria<PSCustomObject>
#>

function Initialize-RGSAPriceIncreaseCriteria {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${ProgramIDs},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Double]
        ${IncreaseAmount},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsPercentIncrease},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${OnlyIncreaseRenewalPrice}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSAPriceIncreaseCriteria' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $ProgramIDs) {
            throw "invalid value for 'ProgramIDs', 'ProgramIDs' cannot be null."
        }

        if ($null -eq $IncreaseAmount) {
            throw "invalid value for 'IncreaseAmount', 'IncreaseAmount' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "programIDs" = ${ProgramIDs}
            "increaseAmount" = ${IncreaseAmount}
            "isPercentIncrease" = ${IsPercentIncrease}
            "onlyIncreaseRenewalPrice" = ${OnlyIncreaseRenewalPrice}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PriceIncreaseCriteria<PSCustomObject>

.DESCRIPTION

Convert from JSON to PriceIncreaseCriteria<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PriceIncreaseCriteria<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToPriceIncreaseCriteria {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSAPriceIncreaseCriteria' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSAPriceIncreaseCriteria
        $AllProperties = ("programIDs", "increaseAmount", "isPercentIncrease", "onlyIncreaseRenewalPrice")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'programIDs' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "programIDs"))) {
            throw "Error! JSON cannot be serialized due to the required property 'programIDs' missing."
        } else {
            $ProgramIDs = $JsonParameters.PSobject.Properties["programIDs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "increaseAmount"))) {
            throw "Error! JSON cannot be serialized due to the required property 'increaseAmount' missing."
        } else {
            $IncreaseAmount = $JsonParameters.PSobject.Properties["increaseAmount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isPercentIncrease"))) { #optional property not found
            $IsPercentIncrease = $null
        } else {
            $IsPercentIncrease = $JsonParameters.PSobject.Properties["isPercentIncrease"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "onlyIncreaseRenewalPrice"))) { #optional property not found
            $OnlyIncreaseRenewalPrice = $null
        } else {
            $OnlyIncreaseRenewalPrice = $JsonParameters.PSobject.Properties["onlyIncreaseRenewalPrice"].value
        }

        $PSO = [PSCustomObject]@{
            "programIDs" = ${ProgramIDs}
            "increaseAmount" = ${IncreaseAmount}
            "isPercentIncrease" = ${IsPercentIncrease}
            "onlyIncreaseRenewalPrice" = ${OnlyIncreaseRenewalPrice}
        }

        return $PSO
    }

}

