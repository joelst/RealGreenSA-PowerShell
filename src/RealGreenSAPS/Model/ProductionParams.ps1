#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CanUseProducts
No description available.
.PARAMETER CanEnterStartTime
No description available.
.PARAMETER CanEnterEndTime
No description available.
.PARAMETER CanEnterCrew
No description available.
.PARAMETER CanEnterWind
No description available.
.PARAMETER CanEnterTemperature
No description available.
.PARAMETER CanEnterPH
No description available.
.PARAMETER CanSaveAssociatedConditionCodes
No description available.
.PARAMETER CanEnterConditionCodes
No description available.
.PARAMETER CanEnterRating
No description available.
.PARAMETER CanChangeProductionSize
No description available.
.PARAMETER CanChangeProductionPrice
No description available.
.PARAMETER PreNotify
No description available.
.PARAMETER NoScheduleDate
No description available.
.OUTPUTS

ProductionParams<PSCustomObject>
#>

function Initialize-RgSaProductionParams {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanUseProducts},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanEnterStartTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanEnterEndTime},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanEnterCrew},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanEnterWind},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanEnterTemperature},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanEnterPH},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanSaveAssociatedConditionCodes},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanEnterConditionCodes},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanEnterRating},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanChangeProductionSize},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanChangeProductionPrice},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${PreNotify},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${NoScheduleDate}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaProductionParams' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "canUseProducts" = ${CanUseProducts}
            "canEnterStartTime" = ${CanEnterStartTime}
            "canEnterEndTime" = ${CanEnterEndTime}
            "canEnterCrew" = ${CanEnterCrew}
            "canEnterWind" = ${CanEnterWind}
            "canEnterTemperature" = ${CanEnterTemperature}
            "canEnterPH" = ${CanEnterPH}
            "canSaveAssociatedConditionCodes" = ${CanSaveAssociatedConditionCodes}
            "canEnterConditionCodes" = ${CanEnterConditionCodes}
            "canEnterRating" = ${CanEnterRating}
            "canChangeProductionSize" = ${CanChangeProductionSize}
            "canChangeProductionPrice" = ${CanChangeProductionPrice}
            "preNotify" = ${PreNotify}
            "noScheduleDate" = ${NoScheduleDate}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProductionParams<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProductionParams<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProductionParams<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToProductionParams {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaProductionParams' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaProductionParams
        $AllProperties = ("canUseProducts", "canEnterStartTime", "canEnterEndTime", "canEnterCrew", "canEnterWind", "canEnterTemperature", "canEnterPH", "canSaveAssociatedConditionCodes", "canEnterConditionCodes", "canEnterRating", "canChangeProductionSize", "canChangeProductionPrice", "preNotify", "noScheduleDate")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canUseProducts"))) { #optional property not found
            $CanUseProducts = $null
        } else {
            $CanUseProducts = $JsonParameters.PSobject.Properties["canUseProducts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canEnterStartTime"))) { #optional property not found
            $CanEnterStartTime = $null
        } else {
            $CanEnterStartTime = $JsonParameters.PSobject.Properties["canEnterStartTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canEnterEndTime"))) { #optional property not found
            $CanEnterEndTime = $null
        } else {
            $CanEnterEndTime = $JsonParameters.PSobject.Properties["canEnterEndTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canEnterCrew"))) { #optional property not found
            $CanEnterCrew = $null
        } else {
            $CanEnterCrew = $JsonParameters.PSobject.Properties["canEnterCrew"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canEnterWind"))) { #optional property not found
            $CanEnterWind = $null
        } else {
            $CanEnterWind = $JsonParameters.PSobject.Properties["canEnterWind"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canEnterTemperature"))) { #optional property not found
            $CanEnterTemperature = $null
        } else {
            $CanEnterTemperature = $JsonParameters.PSobject.Properties["canEnterTemperature"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canEnterPH"))) { #optional property not found
            $CanEnterPH = $null
        } else {
            $CanEnterPH = $JsonParameters.PSobject.Properties["canEnterPH"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canSaveAssociatedConditionCodes"))) { #optional property not found
            $CanSaveAssociatedConditionCodes = $null
        } else {
            $CanSaveAssociatedConditionCodes = $JsonParameters.PSobject.Properties["canSaveAssociatedConditionCodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canEnterConditionCodes"))) { #optional property not found
            $CanEnterConditionCodes = $null
        } else {
            $CanEnterConditionCodes = $JsonParameters.PSobject.Properties["canEnterConditionCodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canEnterRating"))) { #optional property not found
            $CanEnterRating = $null
        } else {
            $CanEnterRating = $JsonParameters.PSobject.Properties["canEnterRating"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canChangeProductionSize"))) { #optional property not found
            $CanChangeProductionSize = $null
        } else {
            $CanChangeProductionSize = $JsonParameters.PSobject.Properties["canChangeProductionSize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canChangeProductionPrice"))) { #optional property not found
            $CanChangeProductionPrice = $null
        } else {
            $CanChangeProductionPrice = $JsonParameters.PSobject.Properties["canChangeProductionPrice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "preNotify"))) { #optional property not found
            $PreNotify = $null
        } else {
            $PreNotify = $JsonParameters.PSobject.Properties["preNotify"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "noScheduleDate"))) { #optional property not found
            $NoScheduleDate = $null
        } else {
            $NoScheduleDate = $JsonParameters.PSobject.Properties["noScheduleDate"].value
        }

        $PSO = [PSCustomObject]@{
            "canUseProducts" = ${CanUseProducts}
            "canEnterStartTime" = ${CanEnterStartTime}
            "canEnterEndTime" = ${CanEnterEndTime}
            "canEnterCrew" = ${CanEnterCrew}
            "canEnterWind" = ${CanEnterWind}
            "canEnterTemperature" = ${CanEnterTemperature}
            "canEnterPH" = ${CanEnterPH}
            "canSaveAssociatedConditionCodes" = ${CanSaveAssociatedConditionCodes}
            "canEnterConditionCodes" = ${CanEnterConditionCodes}
            "canEnterRating" = ${CanEnterRating}
            "canChangeProductionSize" = ${CanChangeProductionSize}
            "canChangeProductionPrice" = ${CanChangeProductionPrice}
            "preNotify" = ${PreNotify}
            "noScheduleDate" = ${NoScheduleDate}
        }

        return $PSO
    }

}

