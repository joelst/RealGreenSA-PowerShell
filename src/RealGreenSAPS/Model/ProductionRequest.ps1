#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DoneDateRange
No description available.
.PARAMETER CustomDoneDateRange
No description available.
.PARAMETER DoneBy
No description available.
.PARAMETER Codes
No description available.
.PARAMETER Prepaid
No description available.
.PARAMETER CustomerType
No description available.
.PARAMETER Route
No description available.
.PARAMETER PaidDate
No description available.
.OUTPUTS

ProductionRequest<PSCustomObject>
#>

function Initialize-RgSaProductionRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Today", "Yesterday", "WeekToDate", "MonthToDate", "YearToDate", "LastYearToDateLastYear", "LastYear", "Custom")]
        [PSCustomObject]
        ${DoneDateRange},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CustomDoneDateRange},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${DoneBy},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Codes},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Prepaid},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerType},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Route},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PaidDate}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaProductionRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $DoneDateRange) {
            throw "invalid value for 'DoneDateRange', 'DoneDateRange' cannot be null."
        }

        if (!$CustomerType -and $CustomerType.length -gt 1) {
            throw "invalid value for 'CustomerType', the character length must be smaller than or equal to 1."
        }

        if (!$CustomerType -and $CustomerType.length -lt 1) {
            throw "invalid value for 'CustomerType', the character length must be great than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "doneDateRange" = ${DoneDateRange}
            "customDoneDateRange" = ${CustomDoneDateRange}
            "doneBy" = ${DoneBy}
            "codes" = ${Codes}
            "prepaid" = ${Prepaid}
            "customerType" = ${CustomerType}
            "route" = ${Route}
            "paidDate" = ${PaidDate}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProductionRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProductionRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProductionRequest<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToProductionRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaProductionRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaProductionRequest
        $AllProperties = ("doneDateRange", "customDoneDateRange", "doneBy", "codes", "prepaid", "customerType", "route", "paidDate")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'doneDateRange' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "doneDateRange"))) {
            throw "Error! JSON cannot be serialized due to the required property 'doneDateRange' missing."
        } else {
            $DoneDateRange = $JsonParameters.PSobject.Properties["doneDateRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customDoneDateRange"))) { #optional property not found
            $CustomDoneDateRange = $null
        } else {
            $CustomDoneDateRange = $JsonParameters.PSobject.Properties["customDoneDateRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "doneBy"))) { #optional property not found
            $DoneBy = $null
        } else {
            $DoneBy = $JsonParameters.PSobject.Properties["doneBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "codes"))) { #optional property not found
            $Codes = $null
        } else {
            $Codes = $JsonParameters.PSobject.Properties["codes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prepaid"))) { #optional property not found
            $Prepaid = $null
        } else {
            $Prepaid = $JsonParameters.PSobject.Properties["prepaid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerType"))) { #optional property not found
            $CustomerType = $null
        } else {
            $CustomerType = $JsonParameters.PSobject.Properties["customerType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "route"))) { #optional property not found
            $Route = $null
        } else {
            $Route = $JsonParameters.PSobject.Properties["route"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "paidDate"))) { #optional property not found
            $PaidDate = $null
        } else {
            $PaidDate = $JsonParameters.PSobject.Properties["paidDate"].value
        }

        $PSO = [PSCustomObject]@{
            "doneDateRange" = ${DoneDateRange}
            "customDoneDateRange" = ${CustomDoneDateRange}
            "doneBy" = ${DoneBy}
            "codes" = ${Codes}
            "prepaid" = ${Prepaid}
            "customerType" = ${CustomerType}
            "route" = ${Route}
            "paidDate" = ${PaidDate}
        }

        return $PSO
    }

}

