#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER AverageTime
No description available.
.PARAMETER AveragePrice
No description available.
.PARAMETER BillingType
No description available.
.PARAMETER CallAhead
No description available.
.PARAMETER CallBackDate
No description available.
.PARAMETER CanceledBy
No description available.
.PARAMETER CancelCode
No description available.
.PARAMETER CancelDate
No description available.
.PARAMETER ConfirmationDate
No description available.
.PARAMETER ConfirmedBy
No description available.
.PARAMETER ContactDate
No description available.
.PARAMETER ContractId
No description available.
.PARAMETER CustomerLetterId
No description available.
.PARAMETER CustomerNote
No description available.
.PARAMETER CustomerNoteExpiration
No description available.
.PARAMETER CustomerNumber
No description available.
.PARAMETER DateSold
No description available.
.PARAMETER DayCode
No description available.
.PARAMETER Difficulty
No description available.
.PARAMETER DiscountCodeId
No description available.
.PARAMETER DoneToDate
No description available.
.PARAMETER EndOn
No description available.
.PARAMETER EstimateAssignedDate
No description available.
.PARAMETER EstimatedBy
No description available.
.PARAMETER EstimateGivenDate
No description available.
.PARAMETER EstimatePrintDate
No description available.
.PARAMETER EstimateReferredBy
No description available.
.PARAMETER EstimateRequestedBy
No description available.
.PARAMETER EstimateRequestDate
No description available.
.PARAMETER EstimateRequestTakenBy
No description available.
.PARAMETER HoldBeginDate
No description available.
.PARAMETER HoldCode
No description available.
.PARAMETER HoldDate
No description available.
.PARAMETER IncludeInConfirmationLetter
No description available.
.PARAMETER IsAutoRenew
No description available.
.PARAMETER IsComplete
No description available.
.PARAMETER IsFullProgram
No description available.
.PARAMETER IsRenewed
No description available.
.PARAMETER LastPriceChange
No description available.
.PARAMETER LatestDependentServiceCompletionDate
No description available.
.PARAMETER LockSchedule
No description available.
.PARAMETER MaximumRepetitions
No description available.
.PARAMETER NextDate
No description available.
.PARAMETER NumberOfServices
No description available.
.PARAMETER PaymentPlanByEmployee
No description available.
.PARAMETER PaymentPlanDate
No description available.
.PARAMETER Price
No description available.
.PARAMETER ProgramCodeId
No description available.
.PARAMETER PurchaseOrderNumber
No description available.
.PARAMETER RejectionCode
No description available.
.PARAMETER RejectionDate
No description available.
.PARAMETER Repeat
No description available.
.PARAMETER RepeatBy
No description available.
.PARAMETER RepeatEvery
No description available.
.PARAMETER Route
No description available.
.PARAMETER Season
No description available.
.PARAMETER Sequence
No description available.
.PARAMETER Size
No description available.
.PARAMETER Soldby1
No description available.
.PARAMETER Soldby2
No description available.
.PARAMETER SourceCode
No description available.
.PARAMETER StandardPrice
No description available.
.PARAMETER Status
No description available.
.PARAMETER TechnicianNote
No description available.
.PARAMETER TechnicianNoteExpiration
No description available.
.PARAMETER TemporaryDayCode
No description available.
.PARAMETER TemporaryRoute
No description available.
.PARAMETER TemporarySequence
No description available.
.PARAMETER WorkOrderPricing
No description available.
.PARAMETER IsNonServiceYear
No description available.
.PARAMETER IsProgram
No description available.
.PARAMETER Year
No description available.
.PARAMETER StartYear
No description available.
.PARAMETER EstimateAssignedTo
No description available.
.PARAMETER IsWorkOrder
No description available.
.PARAMETER ProgramCode
No description available.
.PARAMETER Created
No description available.
.PARAMETER Updated
No description available.
.PARAMETER ProgramDescription
No description available.
.OUTPUTS

Program<PSCustomObject>
#>

function Initialize-RgSaProgram {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${AverageTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${AveragePrice},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BillingType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CallAhead},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${CallBackDate},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CanceledBy},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CancelCode},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${CancelDate},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ConfirmationDate},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConfirmedBy},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ContactDate},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ContractId},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CustomerLetterId},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerNote},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${CustomerNoteExpiration},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CustomerNumber},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateSold},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DayCode},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Difficulty},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DiscountCodeId},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DoneToDate},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EndOn},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EstimateAssignedDate},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EstimatedBy},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EstimateGivenDate},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EstimatePrintDate},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${EstimateReferredBy},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EstimateRequestedBy},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EstimateRequestDate},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EstimateRequestTakenBy},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${HoldBeginDate},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${HoldCode},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${HoldDate},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IncludeInConfirmationLetter},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsAutoRenew},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsComplete},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsFullProgram},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsRenewed},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastPriceChange},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LatestDependentServiceCompletionDate},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${LockSchedule},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaximumRepetitions},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${NextDate},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NumberOfServices},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PaymentPlanByEmployee},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${PaymentPlanDate},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Price},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ProgramCodeId},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PurchaseOrderNumber},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RejectionCode},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RejectionDate},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Repeat},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RepeatBy},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RepeatEvery},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Route},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Season},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Sequence},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Size},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Soldby1},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Soldby2},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SourceCode},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${StandardPrice},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TechnicianNote},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${TechnicianNoteExpiration},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TemporaryDayCode},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TemporaryRoute},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TemporarySequence},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${WorkOrderPricing},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsNonServiceYear},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsProgram},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Year},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${StartYear},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EstimateAssignedTo},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsWorkOrder},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProgramCode},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Updated},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProgramDescription}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaProgram' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "averageTime" = ${AverageTime}
            "averagePrice" = ${AveragePrice}
            "billingType" = ${BillingType}
            "callAhead" = ${CallAhead}
            "callBackDate" = ${CallBackDate}
            "canceledBy" = ${CanceledBy}
            "cancelCode" = ${CancelCode}
            "cancelDate" = ${CancelDate}
            "confirmationDate" = ${ConfirmationDate}
            "confirmedBy" = ${ConfirmedBy}
            "contactDate" = ${ContactDate}
            "contractId" = ${ContractId}
            "customerLetterId" = ${CustomerLetterId}
            "customerNote" = ${CustomerNote}
            "customerNoteExpiration" = ${CustomerNoteExpiration}
            "customerNumber" = ${CustomerNumber}
            "dateSold" = ${DateSold}
            "dayCode" = ${DayCode}
            "difficulty" = ${Difficulty}
            "discountCodeId" = ${DiscountCodeId}
            "doneToDate" = ${DoneToDate}
            "endOn" = ${EndOn}
            "estimateAssignedDate" = ${EstimateAssignedDate}
            "estimatedBy" = ${EstimatedBy}
            "estimateGivenDate" = ${EstimateGivenDate}
            "estimatePrintDate" = ${EstimatePrintDate}
            "estimateReferredBy" = ${EstimateReferredBy}
            "estimateRequestedBy" = ${EstimateRequestedBy}
            "estimateRequestDate" = ${EstimateRequestDate}
            "estimateRequestTakenBy" = ${EstimateRequestTakenBy}
            "holdBeginDate" = ${HoldBeginDate}
            "holdCode" = ${HoldCode}
            "holdDate" = ${HoldDate}
            "includeInConfirmationLetter" = ${IncludeInConfirmationLetter}
            "isAutoRenew" = ${IsAutoRenew}
            "isComplete" = ${IsComplete}
            "isFullProgram" = ${IsFullProgram}
            "isRenewed" = ${IsRenewed}
            "lastPriceChange" = ${LastPriceChange}
            "latestDependentServiceCompletionDate" = ${LatestDependentServiceCompletionDate}
            "lockSchedule" = ${LockSchedule}
            "maximumRepetitions" = ${MaximumRepetitions}
            "nextDate" = ${NextDate}
            "numberOfServices" = ${NumberOfServices}
            "paymentPlanByEmployee" = ${PaymentPlanByEmployee}
            "paymentPlanDate" = ${PaymentPlanDate}
            "price" = ${Price}
            "programCodeId" = ${ProgramCodeId}
            "purchaseOrderNumber" = ${PurchaseOrderNumber}
            "rejectionCode" = ${RejectionCode}
            "rejectionDate" = ${RejectionDate}
            "repeat" = ${Repeat}
            "repeatBy" = ${RepeatBy}
            "repeatEvery" = ${RepeatEvery}
            "route" = ${Route}
            "season" = ${Season}
            "sequence" = ${Sequence}
            "size" = ${Size}
            "soldby1" = ${Soldby1}
            "soldby2" = ${Soldby2}
            "sourceCode" = ${SourceCode}
            "standardPrice" = ${StandardPrice}
            "status" = ${Status}
            "technicianNote" = ${TechnicianNote}
            "technicianNoteExpiration" = ${TechnicianNoteExpiration}
            "temporaryDayCode" = ${TemporaryDayCode}
            "temporaryRoute" = ${TemporaryRoute}
            "temporarySequence" = ${TemporarySequence}
            "workOrderPricing" = ${WorkOrderPricing}
            "isNonServiceYear" = ${IsNonServiceYear}
            "isProgram" = ${IsProgram}
            "year" = ${Year}
            "startYear" = ${StartYear}
            "estimateAssignedTo" = ${EstimateAssignedTo}
            "isWorkOrder" = ${IsWorkOrder}
            "programCode" = ${ProgramCode}
            "created" = ${Created}
            "updated" = ${Updated}
            "programDescription" = ${ProgramDescription}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Program<PSCustomObject>

.DESCRIPTION

Convert from JSON to Program<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Program<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToProgram {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaProgram' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaProgram
        $AllProperties = ("id", "averageTime", "averagePrice", "billingType", "callAhead", "callBackDate", "canceledBy", "cancelCode", "cancelDate", "confirmationDate", "confirmedBy", "contactDate", "contractId", "customerLetterId", "customerNote", "customerNoteExpiration", "customerNumber", "dateSold", "dayCode", "difficulty", "discountCodeId", "doneToDate", "endOn", "estimateAssignedDate", "estimatedBy", "estimateGivenDate", "estimatePrintDate", "estimateReferredBy", "estimateRequestedBy", "estimateRequestDate", "estimateRequestTakenBy", "holdBeginDate", "holdCode", "holdDate", "includeInConfirmationLetter", "isAutoRenew", "isComplete", "isFullProgram", "isRenewed", "lastPriceChange", "latestDependentServiceCompletionDate", "lockSchedule", "maximumRepetitions", "nextDate", "numberOfServices", "paymentPlanByEmployee", "paymentPlanDate", "price", "programCodeId", "purchaseOrderNumber", "rejectionCode", "rejectionDate", "repeat", "repeatBy", "repeatEvery", "route", "season", "sequence", "size", "soldby1", "soldby2", "sourceCode", "standardPrice", "status", "technicianNote", "technicianNoteExpiration", "temporaryDayCode", "temporaryRoute", "temporarySequence", "workOrderPricing", "isNonServiceYear", "isProgram", "year", "startYear", "estimateAssignedTo", "isWorkOrder", "programCode", "created", "updated", "programDescription")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "averageTime"))) { #optional property not found
            $AverageTime = $null
        } else {
            $AverageTime = $JsonParameters.PSobject.Properties["averageTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "averagePrice"))) { #optional property not found
            $AveragePrice = $null
        } else {
            $AveragePrice = $JsonParameters.PSobject.Properties["averagePrice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "billingType"))) { #optional property not found
            $BillingType = $null
        } else {
            $BillingType = $JsonParameters.PSobject.Properties["billingType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "callAhead"))) { #optional property not found
            $CallAhead = $null
        } else {
            $CallAhead = $JsonParameters.PSobject.Properties["callAhead"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "callBackDate"))) { #optional property not found
            $CallBackDate = $null
        } else {
            $CallBackDate = $JsonParameters.PSobject.Properties["callBackDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canceledBy"))) { #optional property not found
            $CanceledBy = $null
        } else {
            $CanceledBy = $JsonParameters.PSobject.Properties["canceledBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cancelCode"))) { #optional property not found
            $CancelCode = $null
        } else {
            $CancelCode = $JsonParameters.PSobject.Properties["cancelCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cancelDate"))) { #optional property not found
            $CancelDate = $null
        } else {
            $CancelDate = $JsonParameters.PSobject.Properties["cancelDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "confirmationDate"))) { #optional property not found
            $ConfirmationDate = $null
        } else {
            $ConfirmationDate = $JsonParameters.PSobject.Properties["confirmationDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "confirmedBy"))) { #optional property not found
            $ConfirmedBy = $null
        } else {
            $ConfirmedBy = $JsonParameters.PSobject.Properties["confirmedBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contactDate"))) { #optional property not found
            $ContactDate = $null
        } else {
            $ContactDate = $JsonParameters.PSobject.Properties["contactDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contractId"))) { #optional property not found
            $ContractId = $null
        } else {
            $ContractId = $JsonParameters.PSobject.Properties["contractId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerLetterId"))) { #optional property not found
            $CustomerLetterId = $null
        } else {
            $CustomerLetterId = $JsonParameters.PSobject.Properties["customerLetterId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerNote"))) { #optional property not found
            $CustomerNote = $null
        } else {
            $CustomerNote = $JsonParameters.PSobject.Properties["customerNote"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerNoteExpiration"))) { #optional property not found
            $CustomerNoteExpiration = $null
        } else {
            $CustomerNoteExpiration = $JsonParameters.PSobject.Properties["customerNoteExpiration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerNumber"))) { #optional property not found
            $CustomerNumber = $null
        } else {
            $CustomerNumber = $JsonParameters.PSobject.Properties["customerNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateSold"))) { #optional property not found
            $DateSold = $null
        } else {
            $DateSold = $JsonParameters.PSobject.Properties["dateSold"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dayCode"))) { #optional property not found
            $DayCode = $null
        } else {
            $DayCode = $JsonParameters.PSobject.Properties["dayCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "difficulty"))) { #optional property not found
            $Difficulty = $null
        } else {
            $Difficulty = $JsonParameters.PSobject.Properties["difficulty"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "discountCodeId"))) { #optional property not found
            $DiscountCodeId = $null
        } else {
            $DiscountCodeId = $JsonParameters.PSobject.Properties["discountCodeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "doneToDate"))) { #optional property not found
            $DoneToDate = $null
        } else {
            $DoneToDate = $JsonParameters.PSobject.Properties["doneToDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endOn"))) { #optional property not found
            $EndOn = $null
        } else {
            $EndOn = $JsonParameters.PSobject.Properties["endOn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "estimateAssignedDate"))) { #optional property not found
            $EstimateAssignedDate = $null
        } else {
            $EstimateAssignedDate = $JsonParameters.PSobject.Properties["estimateAssignedDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "estimatedBy"))) { #optional property not found
            $EstimatedBy = $null
        } else {
            $EstimatedBy = $JsonParameters.PSobject.Properties["estimatedBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "estimateGivenDate"))) { #optional property not found
            $EstimateGivenDate = $null
        } else {
            $EstimateGivenDate = $JsonParameters.PSobject.Properties["estimateGivenDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "estimatePrintDate"))) { #optional property not found
            $EstimatePrintDate = $null
        } else {
            $EstimatePrintDate = $JsonParameters.PSobject.Properties["estimatePrintDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "estimateReferredBy"))) { #optional property not found
            $EstimateReferredBy = $null
        } else {
            $EstimateReferredBy = $JsonParameters.PSobject.Properties["estimateReferredBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "estimateRequestedBy"))) { #optional property not found
            $EstimateRequestedBy = $null
        } else {
            $EstimateRequestedBy = $JsonParameters.PSobject.Properties["estimateRequestedBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "estimateRequestDate"))) { #optional property not found
            $EstimateRequestDate = $null
        } else {
            $EstimateRequestDate = $JsonParameters.PSobject.Properties["estimateRequestDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "estimateRequestTakenBy"))) { #optional property not found
            $EstimateRequestTakenBy = $null
        } else {
            $EstimateRequestTakenBy = $JsonParameters.PSobject.Properties["estimateRequestTakenBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "holdBeginDate"))) { #optional property not found
            $HoldBeginDate = $null
        } else {
            $HoldBeginDate = $JsonParameters.PSobject.Properties["holdBeginDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "holdCode"))) { #optional property not found
            $HoldCode = $null
        } else {
            $HoldCode = $JsonParameters.PSobject.Properties["holdCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "holdDate"))) { #optional property not found
            $HoldDate = $null
        } else {
            $HoldDate = $JsonParameters.PSobject.Properties["holdDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "includeInConfirmationLetter"))) { #optional property not found
            $IncludeInConfirmationLetter = $null
        } else {
            $IncludeInConfirmationLetter = $JsonParameters.PSobject.Properties["includeInConfirmationLetter"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isAutoRenew"))) { #optional property not found
            $IsAutoRenew = $null
        } else {
            $IsAutoRenew = $JsonParameters.PSobject.Properties["isAutoRenew"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isComplete"))) { #optional property not found
            $IsComplete = $null
        } else {
            $IsComplete = $JsonParameters.PSobject.Properties["isComplete"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isFullProgram"))) { #optional property not found
            $IsFullProgram = $null
        } else {
            $IsFullProgram = $JsonParameters.PSobject.Properties["isFullProgram"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isRenewed"))) { #optional property not found
            $IsRenewed = $null
        } else {
            $IsRenewed = $JsonParameters.PSobject.Properties["isRenewed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastPriceChange"))) { #optional property not found
            $LastPriceChange = $null
        } else {
            $LastPriceChange = $JsonParameters.PSobject.Properties["lastPriceChange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "latestDependentServiceCompletionDate"))) { #optional property not found
            $LatestDependentServiceCompletionDate = $null
        } else {
            $LatestDependentServiceCompletionDate = $JsonParameters.PSobject.Properties["latestDependentServiceCompletionDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lockSchedule"))) { #optional property not found
            $LockSchedule = $null
        } else {
            $LockSchedule = $JsonParameters.PSobject.Properties["lockSchedule"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maximumRepetitions"))) { #optional property not found
            $MaximumRepetitions = $null
        } else {
            $MaximumRepetitions = $JsonParameters.PSobject.Properties["maximumRepetitions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nextDate"))) { #optional property not found
            $NextDate = $null
        } else {
            $NextDate = $JsonParameters.PSobject.Properties["nextDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "numberOfServices"))) { #optional property not found
            $NumberOfServices = $null
        } else {
            $NumberOfServices = $JsonParameters.PSobject.Properties["numberOfServices"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "paymentPlanByEmployee"))) { #optional property not found
            $PaymentPlanByEmployee = $null
        } else {
            $PaymentPlanByEmployee = $JsonParameters.PSobject.Properties["paymentPlanByEmployee"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "paymentPlanDate"))) { #optional property not found
            $PaymentPlanDate = $null
        } else {
            $PaymentPlanDate = $JsonParameters.PSobject.Properties["paymentPlanDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price"))) { #optional property not found
            $Price = $null
        } else {
            $Price = $JsonParameters.PSobject.Properties["price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "programCodeId"))) { #optional property not found
            $ProgramCodeId = $null
        } else {
            $ProgramCodeId = $JsonParameters.PSobject.Properties["programCodeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "purchaseOrderNumber"))) { #optional property not found
            $PurchaseOrderNumber = $null
        } else {
            $PurchaseOrderNumber = $JsonParameters.PSobject.Properties["purchaseOrderNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rejectionCode"))) { #optional property not found
            $RejectionCode = $null
        } else {
            $RejectionCode = $JsonParameters.PSobject.Properties["rejectionCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rejectionDate"))) { #optional property not found
            $RejectionDate = $null
        } else {
            $RejectionDate = $JsonParameters.PSobject.Properties["rejectionDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "repeat"))) { #optional property not found
            $Repeat = $null
        } else {
            $Repeat = $JsonParameters.PSobject.Properties["repeat"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "repeatBy"))) { #optional property not found
            $RepeatBy = $null
        } else {
            $RepeatBy = $JsonParameters.PSobject.Properties["repeatBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "repeatEvery"))) { #optional property not found
            $RepeatEvery = $null
        } else {
            $RepeatEvery = $JsonParameters.PSobject.Properties["repeatEvery"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "route"))) { #optional property not found
            $Route = $null
        } else {
            $Route = $JsonParameters.PSobject.Properties["route"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "season"))) { #optional property not found
            $Season = $null
        } else {
            $Season = $JsonParameters.PSobject.Properties["season"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sequence"))) { #optional property not found
            $Sequence = $null
        } else {
            $Sequence = $JsonParameters.PSobject.Properties["sequence"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "soldby1"))) { #optional property not found
            $Soldby1 = $null
        } else {
            $Soldby1 = $JsonParameters.PSobject.Properties["soldby1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "soldby2"))) { #optional property not found
            $Soldby2 = $null
        } else {
            $Soldby2 = $JsonParameters.PSobject.Properties["soldby2"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceCode"))) { #optional property not found
            $SourceCode = $null
        } else {
            $SourceCode = $JsonParameters.PSobject.Properties["sourceCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "standardPrice"))) { #optional property not found
            $StandardPrice = $null
        } else {
            $StandardPrice = $JsonParameters.PSobject.Properties["standardPrice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "technicianNote"))) { #optional property not found
            $TechnicianNote = $null
        } else {
            $TechnicianNote = $JsonParameters.PSobject.Properties["technicianNote"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "technicianNoteExpiration"))) { #optional property not found
            $TechnicianNoteExpiration = $null
        } else {
            $TechnicianNoteExpiration = $JsonParameters.PSobject.Properties["technicianNoteExpiration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "temporaryDayCode"))) { #optional property not found
            $TemporaryDayCode = $null
        } else {
            $TemporaryDayCode = $JsonParameters.PSobject.Properties["temporaryDayCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "temporaryRoute"))) { #optional property not found
            $TemporaryRoute = $null
        } else {
            $TemporaryRoute = $JsonParameters.PSobject.Properties["temporaryRoute"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "temporarySequence"))) { #optional property not found
            $TemporarySequence = $null
        } else {
            $TemporarySequence = $JsonParameters.PSobject.Properties["temporarySequence"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "workOrderPricing"))) { #optional property not found
            $WorkOrderPricing = $null
        } else {
            $WorkOrderPricing = $JsonParameters.PSobject.Properties["workOrderPricing"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isNonServiceYear"))) { #optional property not found
            $IsNonServiceYear = $null
        } else {
            $IsNonServiceYear = $JsonParameters.PSobject.Properties["isNonServiceYear"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isProgram"))) { #optional property not found
            $IsProgram = $null
        } else {
            $IsProgram = $JsonParameters.PSobject.Properties["isProgram"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "year"))) { #optional property not found
            $Year = $null
        } else {
            $Year = $JsonParameters.PSobject.Properties["year"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startYear"))) { #optional property not found
            $StartYear = $null
        } else {
            $StartYear = $JsonParameters.PSobject.Properties["startYear"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "estimateAssignedTo"))) { #optional property not found
            $EstimateAssignedTo = $null
        } else {
            $EstimateAssignedTo = $JsonParameters.PSobject.Properties["estimateAssignedTo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isWorkOrder"))) { #optional property not found
            $IsWorkOrder = $null
        } else {
            $IsWorkOrder = $JsonParameters.PSobject.Properties["isWorkOrder"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "programCode"))) { #optional property not found
            $ProgramCode = $null
        } else {
            $ProgramCode = $JsonParameters.PSobject.Properties["programCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) { #optional property not found
            $Created = $null
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updated"))) { #optional property not found
            $Updated = $null
        } else {
            $Updated = $JsonParameters.PSobject.Properties["updated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "programDescription"))) { #optional property not found
            $ProgramDescription = $null
        } else {
            $ProgramDescription = $JsonParameters.PSobject.Properties["programDescription"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "averageTime" = ${AverageTime}
            "averagePrice" = ${AveragePrice}
            "billingType" = ${BillingType}
            "callAhead" = ${CallAhead}
            "callBackDate" = ${CallBackDate}
            "canceledBy" = ${CanceledBy}
            "cancelCode" = ${CancelCode}
            "cancelDate" = ${CancelDate}
            "confirmationDate" = ${ConfirmationDate}
            "confirmedBy" = ${ConfirmedBy}
            "contactDate" = ${ContactDate}
            "contractId" = ${ContractId}
            "customerLetterId" = ${CustomerLetterId}
            "customerNote" = ${CustomerNote}
            "customerNoteExpiration" = ${CustomerNoteExpiration}
            "customerNumber" = ${CustomerNumber}
            "dateSold" = ${DateSold}
            "dayCode" = ${DayCode}
            "difficulty" = ${Difficulty}
            "discountCodeId" = ${DiscountCodeId}
            "doneToDate" = ${DoneToDate}
            "endOn" = ${EndOn}
            "estimateAssignedDate" = ${EstimateAssignedDate}
            "estimatedBy" = ${EstimatedBy}
            "estimateGivenDate" = ${EstimateGivenDate}
            "estimatePrintDate" = ${EstimatePrintDate}
            "estimateReferredBy" = ${EstimateReferredBy}
            "estimateRequestedBy" = ${EstimateRequestedBy}
            "estimateRequestDate" = ${EstimateRequestDate}
            "estimateRequestTakenBy" = ${EstimateRequestTakenBy}
            "holdBeginDate" = ${HoldBeginDate}
            "holdCode" = ${HoldCode}
            "holdDate" = ${HoldDate}
            "includeInConfirmationLetter" = ${IncludeInConfirmationLetter}
            "isAutoRenew" = ${IsAutoRenew}
            "isComplete" = ${IsComplete}
            "isFullProgram" = ${IsFullProgram}
            "isRenewed" = ${IsRenewed}
            "lastPriceChange" = ${LastPriceChange}
            "latestDependentServiceCompletionDate" = ${LatestDependentServiceCompletionDate}
            "lockSchedule" = ${LockSchedule}
            "maximumRepetitions" = ${MaximumRepetitions}
            "nextDate" = ${NextDate}
            "numberOfServices" = ${NumberOfServices}
            "paymentPlanByEmployee" = ${PaymentPlanByEmployee}
            "paymentPlanDate" = ${PaymentPlanDate}
            "price" = ${Price}
            "programCodeId" = ${ProgramCodeId}
            "purchaseOrderNumber" = ${PurchaseOrderNumber}
            "rejectionCode" = ${RejectionCode}
            "rejectionDate" = ${RejectionDate}
            "repeat" = ${Repeat}
            "repeatBy" = ${RepeatBy}
            "repeatEvery" = ${RepeatEvery}
            "route" = ${Route}
            "season" = ${Season}
            "sequence" = ${Sequence}
            "size" = ${Size}
            "soldby1" = ${Soldby1}
            "soldby2" = ${Soldby2}
            "sourceCode" = ${SourceCode}
            "standardPrice" = ${StandardPrice}
            "status" = ${Status}
            "technicianNote" = ${TechnicianNote}
            "technicianNoteExpiration" = ${TechnicianNoteExpiration}
            "temporaryDayCode" = ${TemporaryDayCode}
            "temporaryRoute" = ${TemporaryRoute}
            "temporarySequence" = ${TemporarySequence}
            "workOrderPricing" = ${WorkOrderPricing}
            "isNonServiceYear" = ${IsNonServiceYear}
            "isProgram" = ${IsProgram}
            "year" = ${Year}
            "startYear" = ${StartYear}
            "estimateAssignedTo" = ${EstimateAssignedTo}
            "isWorkOrder" = ${IsWorkOrder}
            "programCode" = ${ProgramCode}
            "created" = ${Created}
            "updated" = ${Updated}
            "programDescription" = ${ProgramDescription}
        }

        return $PSO
    }

}

