#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CompanyIDs
No description available.
.PARAMETER ProgramDefinitionIDs
No description available.
.PARAMETER DateRange
No description available.
.PARAMETER CustomDateRange
No description available.
.PARAMETER CancelCodes
No description available.
.OUTPUTS

ProgramCancelReasonStatsCriteria<PSCustomObject>
#>

function Initialize-RGSAProgramCancelReasonStatsCriteria {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${CompanyIDs},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${ProgramDefinitionIDs},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Today", "Yesterday", "WeekToDate", "MonthToDate", "YearToDate", "LastYearToDateLastYear", "LastYear", "Custom")]
        [PSCustomObject]
        ${DateRange},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CustomDateRange},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${CancelCodes}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSAProgramCancelReasonStatsCriteria' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $DateRange) {
            throw "invalid value for 'DateRange', 'DateRange' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "companyIDs" = ${CompanyIDs}
            "programDefinitionIDs" = ${ProgramDefinitionIDs}
            "dateRange" = ${DateRange}
            "customDateRange" = ${CustomDateRange}
            "cancelCodes" = ${CancelCodes}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProgramCancelReasonStatsCriteria<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProgramCancelReasonStatsCriteria<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProgramCancelReasonStatsCriteria<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToProgramCancelReasonStatsCriteria {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSAProgramCancelReasonStatsCriteria' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSAProgramCancelReasonStatsCriteria
        $AllProperties = ("companyIDs", "programDefinitionIDs", "dateRange", "customDateRange", "cancelCodes")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'dateRange' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateRange"))) {
            throw "Error! JSON cannot be serialized due to the required property 'dateRange' missing."
        } else {
            $DateRange = $JsonParameters.PSobject.Properties["dateRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "companyIDs"))) { #optional property not found
            $CompanyIDs = $null
        } else {
            $CompanyIDs = $JsonParameters.PSobject.Properties["companyIDs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "programDefinitionIDs"))) { #optional property not found
            $ProgramDefinitionIDs = $null
        } else {
            $ProgramDefinitionIDs = $JsonParameters.PSobject.Properties["programDefinitionIDs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customDateRange"))) { #optional property not found
            $CustomDateRange = $null
        } else {
            $CustomDateRange = $JsonParameters.PSobject.Properties["customDateRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cancelCodes"))) { #optional property not found
            $CancelCodes = $null
        } else {
            $CancelCodes = $JsonParameters.PSobject.Properties["cancelCodes"].value
        }

        $PSO = [PSCustomObject]@{
            "companyIDs" = ${CompanyIDs}
            "programDefinitionIDs" = ${ProgramDefinitionIDs}
            "dateRange" = ${DateRange}
            "customDateRange" = ${CustomDateRange}
            "cancelCodes" = ${CancelCodes}
        }

        return $PSO
    }

}

