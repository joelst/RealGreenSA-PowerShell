#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CancelCode
No description available.
.PARAMETER Reason
No description available.
.PARAMETER CustomerCount
No description available.
.PARAMETER ProgramSpecialCount
No description available.
.PARAMETER GrossAmount
No description available.
.PARAMETER NetAmount
No description available.
.PARAMETER IncompleteGrossAmount
No description available.
.PARAMETER IncompleteNetAmount
No description available.
.PARAMETER CompleteGrossAmount
No description available.
.PARAMETER CompleteNetAmount
No description available.
.OUTPUTS

ProgramCancelReasonStatsResult<PSCustomObject>
#>

function Initialize-RgSaProgramCancelReasonStatsResult {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CancelCode},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Reason},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CustomerCount},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ProgramSpecialCount},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${GrossAmount},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${NetAmount},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${IncompleteGrossAmount},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${IncompleteNetAmount},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${CompleteGrossAmount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${CompleteNetAmount}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaProgramCancelReasonStatsResult' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "cancelCode" = ${CancelCode}
            "reason" = ${Reason}
            "customerCount" = ${CustomerCount}
            "programSpecialCount" = ${ProgramSpecialCount}
            "grossAmount" = ${GrossAmount}
            "netAmount" = ${NetAmount}
            "incompleteGrossAmount" = ${IncompleteGrossAmount}
            "incompleteNetAmount" = ${IncompleteNetAmount}
            "completeGrossAmount" = ${CompleteGrossAmount}
            "completeNetAmount" = ${CompleteNetAmount}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProgramCancelReasonStatsResult<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProgramCancelReasonStatsResult<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProgramCancelReasonStatsResult<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToProgramCancelReasonStatsResult {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaProgramCancelReasonStatsResult' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaProgramCancelReasonStatsResult
        $AllProperties = ("cancelCode", "reason", "customerCount", "programSpecialCount", "grossAmount", "netAmount", "incompleteGrossAmount", "incompleteNetAmount", "completeGrossAmount", "completeNetAmount")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cancelCode"))) { #optional property not found
            $CancelCode = $null
        } else {
            $CancelCode = $JsonParameters.PSobject.Properties["cancelCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reason"))) { #optional property not found
            $Reason = $null
        } else {
            $Reason = $JsonParameters.PSobject.Properties["reason"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerCount"))) { #optional property not found
            $CustomerCount = $null
        } else {
            $CustomerCount = $JsonParameters.PSobject.Properties["customerCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "programSpecialCount"))) { #optional property not found
            $ProgramSpecialCount = $null
        } else {
            $ProgramSpecialCount = $JsonParameters.PSobject.Properties["programSpecialCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "grossAmount"))) { #optional property not found
            $GrossAmount = $null
        } else {
            $GrossAmount = $JsonParameters.PSobject.Properties["grossAmount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "netAmount"))) { #optional property not found
            $NetAmount = $null
        } else {
            $NetAmount = $JsonParameters.PSobject.Properties["netAmount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "incompleteGrossAmount"))) { #optional property not found
            $IncompleteGrossAmount = $null
        } else {
            $IncompleteGrossAmount = $JsonParameters.PSobject.Properties["incompleteGrossAmount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "incompleteNetAmount"))) { #optional property not found
            $IncompleteNetAmount = $null
        } else {
            $IncompleteNetAmount = $JsonParameters.PSobject.Properties["incompleteNetAmount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "completeGrossAmount"))) { #optional property not found
            $CompleteGrossAmount = $null
        } else {
            $CompleteGrossAmount = $JsonParameters.PSobject.Properties["completeGrossAmount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "completeNetAmount"))) { #optional property not found
            $CompleteNetAmount = $null
        } else {
            $CompleteNetAmount = $JsonParameters.PSobject.Properties["completeNetAmount"].value
        }

        $PSO = [PSCustomObject]@{
            "cancelCode" = ${CancelCode}
            "reason" = ${Reason}
            "customerCount" = ${CustomerCount}
            "programSpecialCount" = ${ProgramSpecialCount}
            "grossAmount" = ${GrossAmount}
            "netAmount" = ${NetAmount}
            "incompleteGrossAmount" = ${IncompleteGrossAmount}
            "incompleteNetAmount" = ${IncompleteNetAmount}
            "completeGrossAmount" = ${CompleteGrossAmount}
            "completeNetAmount" = ${CompleteNetAmount}
        }

        return $PSO
    }

}

