#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CustomerNumber
No description available.
.PARAMETER Size
No description available.
.PARAMETER ProgramDefinitionID
No description available.
.PARAMETER ProgramCode
No description available.
.PARAMETER Description
No description available.
.PARAMETER Installments
No description available.
.PARAMETER InstallmentPrice
No description available.
.PARAMETER GrossPrice
No description available.
.PARAMETER NetPrice
No description available.
.PARAMETER TotalPriceWithTax
No description available.
.PARAMETER TotalSavings
No description available.
.PARAMETER Services
No description available.
.OUTPUTS

ProgramPrice<PSCustomObject>
#>

function Initialize-RgSaProgramPrice {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CustomerNumber},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Size},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ProgramDefinitionID},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProgramCode},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Installments},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${InstallmentPrice},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${GrossPrice},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${NetPrice},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${TotalPriceWithTax},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${TotalSavings},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Services}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaProgramPrice' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "customerNumber" = ${CustomerNumber}
            "size" = ${Size}
            "programDefinitionID" = ${ProgramDefinitionID}
            "programCode" = ${ProgramCode}
            "description" = ${Description}
            "installments" = ${Installments}
            "installmentPrice" = ${InstallmentPrice}
            "grossPrice" = ${GrossPrice}
            "netPrice" = ${NetPrice}
            "totalPriceWithTax" = ${TotalPriceWithTax}
            "totalSavings" = ${TotalSavings}
            "services" = ${Services}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProgramPrice<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProgramPrice<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProgramPrice<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToProgramPrice {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaProgramPrice' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaProgramPrice
        $AllProperties = ("customerNumber", "size", "programDefinitionID", "programCode", "description", "installments", "installmentPrice", "grossPrice", "netPrice", "totalPriceWithTax", "totalSavings", "services")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerNumber"))) { #optional property not found
            $CustomerNumber = $null
        } else {
            $CustomerNumber = $JsonParameters.PSobject.Properties["customerNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "programDefinitionID"))) { #optional property not found
            $ProgramDefinitionID = $null
        } else {
            $ProgramDefinitionID = $JsonParameters.PSobject.Properties["programDefinitionID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "programCode"))) { #optional property not found
            $ProgramCode = $null
        } else {
            $ProgramCode = $JsonParameters.PSobject.Properties["programCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "installments"))) { #optional property not found
            $Installments = $null
        } else {
            $Installments = $JsonParameters.PSobject.Properties["installments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "installmentPrice"))) { #optional property not found
            $InstallmentPrice = $null
        } else {
            $InstallmentPrice = $JsonParameters.PSobject.Properties["installmentPrice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "grossPrice"))) { #optional property not found
            $GrossPrice = $null
        } else {
            $GrossPrice = $JsonParameters.PSobject.Properties["grossPrice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "netPrice"))) { #optional property not found
            $NetPrice = $null
        } else {
            $NetPrice = $JsonParameters.PSobject.Properties["netPrice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalPriceWithTax"))) { #optional property not found
            $TotalPriceWithTax = $null
        } else {
            $TotalPriceWithTax = $JsonParameters.PSobject.Properties["totalPriceWithTax"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalSavings"))) { #optional property not found
            $TotalSavings = $null
        } else {
            $TotalSavings = $JsonParameters.PSobject.Properties["totalSavings"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "services"))) { #optional property not found
            $Services = $null
        } else {
            $Services = $JsonParameters.PSobject.Properties["services"].value
        }

        $PSO = [PSCustomObject]@{
            "customerNumber" = ${CustomerNumber}
            "size" = ${Size}
            "programDefinitionID" = ${ProgramDefinitionID}
            "programCode" = ${ProgramCode}
            "description" = ${Description}
            "installments" = ${Installments}
            "installmentPrice" = ${InstallmentPrice}
            "grossPrice" = ${GrossPrice}
            "netPrice" = ${NetPrice}
            "totalPriceWithTax" = ${TotalPriceWithTax}
            "totalSavings" = ${TotalSavings}
            "services" = ${Services}
        }

        return $PSO
    }

}

