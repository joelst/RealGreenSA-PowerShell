#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ProgramDefinitionIDs
No description available.
.PARAMETER CustomerNumber
No description available.
.PARAMETER Size
No description available.
.PARAMETER Difficulty
No description available.
.PARAMETER ServiceDiscount
No description available.
.PARAMETER Installments
No description available.
.OUTPUTS

ProgramPriceRequest<PSCustomObject>
#>

function Initialize-RgSaProgramPriceRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${ProgramDefinitionIDs},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${CustomerNumber},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Double]
        ${Size},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Difficulty},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceDiscount},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Installments}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaProgramPriceRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $ProgramDefinitionIDs) {
            throw "invalid value for 'ProgramDefinitionIDs', 'ProgramDefinitionIDs' cannot be null."
        }

        if ($null -eq $CustomerNumber) {
            throw "invalid value for 'CustomerNumber', 'CustomerNumber' cannot be null."
        }

        if ($CustomerNumber -gt 2147483647) {
          throw "invalid value for 'CustomerNumber', must be smaller than or equal to 2147483647."
        }

        if ($CustomerNumber -lt 1) {
          throw "invalid value for 'CustomerNumber', must be greater than or equal to 1."
        }

        if ($null -eq $Size) {
            throw "invalid value for 'Size', 'Size' cannot be null."
        }

        if ($Size -lt 0.00010) {
          throw "invalid value for 'Size', must be greater than or equal to 0.00010."
        }

        if ($Difficulty -and $Difficulty -lt 0.00010) {
          throw "invalid value for 'Difficulty', must be greater than or equal to 0.00010."
        }

        if (!$ServiceDiscount -and $ServiceDiscount.length -gt 3) {
            throw "invalid value for 'ServiceDiscount', the character length must be smaller than or equal to 3."
        }

        if (!$ServiceDiscount -and $ServiceDiscount.length -lt 1) {
            throw "invalid value for 'ServiceDiscount', the character length must be great than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "programDefinitionIDs" = ${ProgramDefinitionIDs}
            "customerNumber" = ${CustomerNumber}
            "size" = ${Size}
            "difficulty" = ${Difficulty}
            "serviceDiscount" = ${ServiceDiscount}
            "installments" = ${Installments}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProgramPriceRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProgramPriceRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProgramPriceRequest<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToProgramPriceRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaProgramPriceRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaProgramPriceRequest
        $AllProperties = ("programDefinitionIDs", "customerNumber", "size", "difficulty", "serviceDiscount", "installments")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'programDefinitionIDs' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "programDefinitionIDs"))) {
            throw "Error! JSON cannot be serialized due to the required property 'programDefinitionIDs' missing."
        } else {
            $ProgramDefinitionIDs = $JsonParameters.PSobject.Properties["programDefinitionIDs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerNumber"))) {
            throw "Error! JSON cannot be serialized due to the required property 'customerNumber' missing."
        } else {
            $CustomerNumber = $JsonParameters.PSobject.Properties["customerNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) {
            throw "Error! JSON cannot be serialized due to the required property 'size' missing."
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "difficulty"))) { #optional property not found
            $Difficulty = $null
        } else {
            $Difficulty = $JsonParameters.PSobject.Properties["difficulty"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceDiscount"))) { #optional property not found
            $ServiceDiscount = $null
        } else {
            $ServiceDiscount = $JsonParameters.PSobject.Properties["serviceDiscount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "installments"))) { #optional property not found
            $Installments = $null
        } else {
            $Installments = $JsonParameters.PSobject.Properties["installments"].value
        }

        $PSO = [PSCustomObject]@{
            "programDefinitionIDs" = ${ProgramDefinitionIDs}
            "customerNumber" = ${CustomerNumber}
            "size" = ${Size}
            "difficulty" = ${Difficulty}
            "serviceDiscount" = ${ServiceDiscount}
            "installments" = ${Installments}
        }

        return $PSO
    }

}

