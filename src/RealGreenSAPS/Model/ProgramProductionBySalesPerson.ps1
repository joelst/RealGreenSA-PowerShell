#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER EmployeeID
No description available.
.PARAMETER EmployeeName
No description available.
.PARAMETER Sales
No description available.
.PARAMETER GrossAmount
No description available.
.PARAMETER NetAmount
No description available.
.OUTPUTS

ProgramProductionBySalesPerson<PSCustomObject>
#>

function Initialize-RGSAProgramProductionBySalesPerson {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmployeeID},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmployeeName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Sales},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${GrossAmount},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${NetAmount}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSAProgramProductionBySalesPerson' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "employeeID" = ${EmployeeID}
            "employeeName" = ${EmployeeName}
            "sales" = ${Sales}
            "grossAmount" = ${GrossAmount}
            "netAmount" = ${NetAmount}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProgramProductionBySalesPerson<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProgramProductionBySalesPerson<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProgramProductionBySalesPerson<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToProgramProductionBySalesPerson {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSAProgramProductionBySalesPerson' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSAProgramProductionBySalesPerson
        $AllProperties = ("employeeID", "employeeName", "sales", "grossAmount", "netAmount")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "employeeID"))) { #optional property not found
            $EmployeeID = $null
        } else {
            $EmployeeID = $JsonParameters.PSobject.Properties["employeeID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "employeeName"))) { #optional property not found
            $EmployeeName = $null
        } else {
            $EmployeeName = $JsonParameters.PSobject.Properties["employeeName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sales"))) { #optional property not found
            $Sales = $null
        } else {
            $Sales = $JsonParameters.PSobject.Properties["sales"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "grossAmount"))) { #optional property not found
            $GrossAmount = $null
        } else {
            $GrossAmount = $JsonParameters.PSobject.Properties["grossAmount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "netAmount"))) { #optional property not found
            $NetAmount = $null
        } else {
            $NetAmount = $JsonParameters.PSobject.Properties["netAmount"].value
        }

        $PSO = [PSCustomObject]@{
            "employeeID" = ${EmployeeID}
            "employeeName" = ${EmployeeName}
            "sales" = ${Sales}
            "grossAmount" = ${GrossAmount}
            "netAmount" = ${NetAmount}
        }

        return $PSO
    }

}

