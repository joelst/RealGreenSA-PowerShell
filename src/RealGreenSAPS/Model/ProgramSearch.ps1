#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER CustomerNumber
No description available.
.PARAMETER Status
No description available.
.PARAMETER ProgramDefinitionID
No description available.
.PARAMETER Size
No description available.
.PARAMETER SourceCode
No description available.
.PARAMETER DateSold
No description available.
.PARAMETER TechnicianNote
No description available.
.PARAMETER TechnicianNoteExpiration
No description available.
.PARAMETER CustomerNote
No description available.
.PARAMETER CustomerNoteExpiration
No description available.
.PARAMETER EstimateRequestDate
No description available.
.PARAMETER Route
No description available.
.PARAMETER DayCode
No description available.
.PARAMETER Sequence
No description available.
.PARAMETER SoldBy1
No description available.
.PARAMETER SoldBy2
No description available.
.PARAMETER DiscountCode
No description available.
.PARAMETER StandardPrice
No description available.
.PARAMETER AveragePrice
No description available.
.PARAMETER Price
No description available.
.PARAMETER NumberOfServices
No description available.
.PARAMETER BillingType
No description available.
.PARAMETER RejectCode
No description available.
.PARAMETER RejectDate
No description available.
.PARAMETER CancelCode
No description available.
.PARAMETER CancelDate
No description available.
.PARAMETER CanceledBy
No description available.
.PARAMETER HoldCOde
No description available.
.PARAMETER HoldBegin
No description available.
.PARAMETER HoldDate
No description available.
.PARAMETER LatestDependentServiceCompletionDate
No description available.
.PARAMETER EstimateRequestTakenBy
No description available.
.PARAMETER EstimatedBy
No description available.
.PARAMETER EstimatePrinted
No description available.
.PARAMETER EstimateGiven
No description available.
.PARAMETER ContactDate
No description available.
.PARAMETER CallBackDate
No description available.
.PARAMETER CustomerLetterID
No description available.
.PARAMETER IncludeInConfirmationLetter
No description available.
.PARAMETER AverageTime
No description available.
.PARAMETER Complete
No description available.
.PARAMETER Repeat
No description available.
.PARAMETER RepeatEvery
No description available.
.PARAMETER EndOn
No description available.
.PARAMETER RepeatBy
No description available.
.PARAMETER CallAhead
No description available.
.PARAMETER ContractID
No description available.
.PARAMETER MaximumRepetitions
No description available.
.PARAMETER DoneToDate
No description available.
.PARAMETER IsAutoRenew
No description available.
.PARAMETER NextDate
No description available.
.PARAMETER TemporaryRoute
No description available.
.PARAMETER TemporarySequence
No description available.
.PARAMETER TemporaryDaycode
No description available.
.PARAMETER EstimateRequestedBy
No description available.
.PARAMETER EstimateReferredBy
No description available.
.PARAMETER LastPriceChange
No description available.
.PARAMETER ServiceYear
No description available.
.PARAMETER Difficulty
No description available.
.PARAMETER ConfirmationDate
No description available.
.PARAMETER PurchaseOrderNumber
No description available.
.PARAMETER ConfirmedBy
No description available.
.PARAMETER IsRenewed
No description available.
.PARAMETER WorkOrderPricing
No description available.
.PARAMETER IsFullProgram
No description available.
.PARAMETER PaymentPlanByEmployee
No description available.
.PARAMETER PaymentPlanDate
No description available.
.PARAMETER LockSchedule
No description available.
.PARAMETER Records
No description available.
.PARAMETER Offset
No description available.
.PARAMETER Created
No description available.
.PARAMETER Updated
No description available.
.OUTPUTS

ProgramSearch<PSCustomObject>
#>

function Initialize-RGSAProgramSearch {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${CustomerNumber},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Status},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${ProgramDefinitionID},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Size},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${SourceCode},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DateSold},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TechnicianNote},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${TechnicianNoteExpiration},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerNote},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CustomerNoteExpiration},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${EstimateRequestDate},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Route},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DayCode},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Sequence},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SoldBy1},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SoldBy2},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DiscountCode},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${StandardPrice},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AveragePrice},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Price},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${NumberOfServices},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BillingType},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RejectCode},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${RejectDate},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CancelCode},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CancelDate},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CanceledBy},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${HoldCOde},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${HoldBegin},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${HoldDate},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LatestDependentServiceCompletionDate},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EstimateRequestTakenBy},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EstimatedBy},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${EstimatePrinted},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${EstimateGiven},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ContactDate},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CallBackDate},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CustomerLetterID},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IncludeInConfirmationLetter},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AverageTime},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Complete},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Repeat},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RepeatEvery},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${EndOn},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RepeatBy},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CallAhead},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ContractID},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaximumRepetitions},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DoneToDate},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsAutoRenew},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${NextDate},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TemporaryRoute},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TemporarySequence},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TemporaryDaycode},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EstimateRequestedBy},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${EstimateReferredBy},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LastPriceChange},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ServiceYear},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Difficulty},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ConfirmationDate},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PurchaseOrderNumber},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConfirmedBy},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsRenewed},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${WorkOrderPricing},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsFullProgram},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PaymentPlanByEmployee},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PaymentPlanDate},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${LockSchedule},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Records},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Created},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Updated}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSAProgramSearch' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Records -and $Records -gt 500) {
          throw "invalid value for 'Records', must be smaller than or equal to 500."
        }

        if ($Records -and $Records -lt 0) {
          throw "invalid value for 'Records', must be greater than or equal to 0."
        }

        if ($Offset -and $Offset -gt 2147483647) {
          throw "invalid value for 'Offset', must be smaller than or equal to 2147483647."
        }

        if ($Offset -and $Offset -lt 0) {
          throw "invalid value for 'Offset', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "customerNumber" = ${CustomerNumber}
            "status" = ${Status}
            "programDefinitionID" = ${ProgramDefinitionID}
            "size" = ${Size}
            "sourceCode" = ${SourceCode}
            "dateSold" = ${DateSold}
            "technicianNote" = ${TechnicianNote}
            "technicianNoteExpiration" = ${TechnicianNoteExpiration}
            "customerNote" = ${CustomerNote}
            "customerNoteExpiration" = ${CustomerNoteExpiration}
            "estimateRequestDate" = ${EstimateRequestDate}
            "route" = ${Route}
            "dayCode" = ${DayCode}
            "sequence" = ${Sequence}
            "soldBy1" = ${SoldBy1}
            "soldBy2" = ${SoldBy2}
            "discountCode" = ${DiscountCode}
            "standardPrice" = ${StandardPrice}
            "averagePrice" = ${AveragePrice}
            "price" = ${Price}
            "numberOfServices" = ${NumberOfServices}
            "billingType" = ${BillingType}
            "rejectCode" = ${RejectCode}
            "rejectDate" = ${RejectDate}
            "cancelCode" = ${CancelCode}
            "cancelDate" = ${CancelDate}
            "canceledBy" = ${CanceledBy}
            "holdCOde" = ${HoldCOde}
            "holdBegin" = ${HoldBegin}
            "holdDate" = ${HoldDate}
            "latestDependentServiceCompletionDate" = ${LatestDependentServiceCompletionDate}
            "estimateRequestTakenBy" = ${EstimateRequestTakenBy}
            "estimatedBy" = ${EstimatedBy}
            "estimatePrinted" = ${EstimatePrinted}
            "estimateGiven" = ${EstimateGiven}
            "contactDate" = ${ContactDate}
            "callBackDate" = ${CallBackDate}
            "customerLetterID" = ${CustomerLetterID}
            "includeInConfirmationLetter" = ${IncludeInConfirmationLetter}
            "averageTime" = ${AverageTime}
            "complete" = ${Complete}
            "repeat" = ${Repeat}
            "repeatEvery" = ${RepeatEvery}
            "endOn" = ${EndOn}
            "repeatBy" = ${RepeatBy}
            "callAhead" = ${CallAhead}
            "contractID" = ${ContractID}
            "maximumRepetitions" = ${MaximumRepetitions}
            "doneToDate" = ${DoneToDate}
            "isAutoRenew" = ${IsAutoRenew}
            "nextDate" = ${NextDate}
            "temporaryRoute" = ${TemporaryRoute}
            "temporarySequence" = ${TemporarySequence}
            "temporaryDaycode" = ${TemporaryDaycode}
            "estimateRequestedBy" = ${EstimateRequestedBy}
            "estimateReferredBy" = ${EstimateReferredBy}
            "lastPriceChange" = ${LastPriceChange}
            "serviceYear" = ${ServiceYear}
            "difficulty" = ${Difficulty}
            "confirmationDate" = ${ConfirmationDate}
            "purchaseOrderNumber" = ${PurchaseOrderNumber}
            "confirmedBy" = ${ConfirmedBy}
            "isRenewed" = ${IsRenewed}
            "workOrderPricing" = ${WorkOrderPricing}
            "isFullProgram" = ${IsFullProgram}
            "paymentPlanByEmployee" = ${PaymentPlanByEmployee}
            "paymentPlanDate" = ${PaymentPlanDate}
            "lockSchedule" = ${LockSchedule}
            "records" = ${Records}
            "offset" = ${Offset}
            "created" = ${Created}
            "updated" = ${Updated}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProgramSearch<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProgramSearch<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProgramSearch<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToProgramSearch {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSAProgramSearch' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSAProgramSearch
        $AllProperties = ("id", "customerNumber", "status", "programDefinitionID", "size", "sourceCode", "dateSold", "technicianNote", "technicianNoteExpiration", "customerNote", "customerNoteExpiration", "estimateRequestDate", "route", "dayCode", "sequence", "soldBy1", "soldBy2", "discountCode", "standardPrice", "averagePrice", "price", "numberOfServices", "billingType", "rejectCode", "rejectDate", "cancelCode", "cancelDate", "canceledBy", "holdCOde", "holdBegin", "holdDate", "latestDependentServiceCompletionDate", "estimateRequestTakenBy", "estimatedBy", "estimatePrinted", "estimateGiven", "contactDate", "callBackDate", "customerLetterID", "includeInConfirmationLetter", "averageTime", "complete", "repeat", "repeatEvery", "endOn", "repeatBy", "callAhead", "contractID", "maximumRepetitions", "doneToDate", "isAutoRenew", "nextDate", "temporaryRoute", "temporarySequence", "temporaryDaycode", "estimateRequestedBy", "estimateReferredBy", "lastPriceChange", "serviceYear", "difficulty", "confirmationDate", "purchaseOrderNumber", "confirmedBy", "isRenewed", "workOrderPricing", "isFullProgram", "paymentPlanByEmployee", "paymentPlanDate", "lockSchedule", "records", "offset", "created", "updated")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerNumber"))) { #optional property not found
            $CustomerNumber = $null
        } else {
            $CustomerNumber = $JsonParameters.PSobject.Properties["customerNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "programDefinitionID"))) { #optional property not found
            $ProgramDefinitionID = $null
        } else {
            $ProgramDefinitionID = $JsonParameters.PSobject.Properties["programDefinitionID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceCode"))) { #optional property not found
            $SourceCode = $null
        } else {
            $SourceCode = $JsonParameters.PSobject.Properties["sourceCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateSold"))) { #optional property not found
            $DateSold = $null
        } else {
            $DateSold = $JsonParameters.PSobject.Properties["dateSold"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "technicianNote"))) { #optional property not found
            $TechnicianNote = $null
        } else {
            $TechnicianNote = $JsonParameters.PSobject.Properties["technicianNote"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "technicianNoteExpiration"))) { #optional property not found
            $TechnicianNoteExpiration = $null
        } else {
            $TechnicianNoteExpiration = $JsonParameters.PSobject.Properties["technicianNoteExpiration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerNote"))) { #optional property not found
            $CustomerNote = $null
        } else {
            $CustomerNote = $JsonParameters.PSobject.Properties["customerNote"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerNoteExpiration"))) { #optional property not found
            $CustomerNoteExpiration = $null
        } else {
            $CustomerNoteExpiration = $JsonParameters.PSobject.Properties["customerNoteExpiration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "estimateRequestDate"))) { #optional property not found
            $EstimateRequestDate = $null
        } else {
            $EstimateRequestDate = $JsonParameters.PSobject.Properties["estimateRequestDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "route"))) { #optional property not found
            $Route = $null
        } else {
            $Route = $JsonParameters.PSobject.Properties["route"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dayCode"))) { #optional property not found
            $DayCode = $null
        } else {
            $DayCode = $JsonParameters.PSobject.Properties["dayCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sequence"))) { #optional property not found
            $Sequence = $null
        } else {
            $Sequence = $JsonParameters.PSobject.Properties["sequence"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "soldBy1"))) { #optional property not found
            $SoldBy1 = $null
        } else {
            $SoldBy1 = $JsonParameters.PSobject.Properties["soldBy1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "soldBy2"))) { #optional property not found
            $SoldBy2 = $null
        } else {
            $SoldBy2 = $JsonParameters.PSobject.Properties["soldBy2"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "discountCode"))) { #optional property not found
            $DiscountCode = $null
        } else {
            $DiscountCode = $JsonParameters.PSobject.Properties["discountCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "standardPrice"))) { #optional property not found
            $StandardPrice = $null
        } else {
            $StandardPrice = $JsonParameters.PSobject.Properties["standardPrice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "averagePrice"))) { #optional property not found
            $AveragePrice = $null
        } else {
            $AveragePrice = $JsonParameters.PSobject.Properties["averagePrice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price"))) { #optional property not found
            $Price = $null
        } else {
            $Price = $JsonParameters.PSobject.Properties["price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "numberOfServices"))) { #optional property not found
            $NumberOfServices = $null
        } else {
            $NumberOfServices = $JsonParameters.PSobject.Properties["numberOfServices"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "billingType"))) { #optional property not found
            $BillingType = $null
        } else {
            $BillingType = $JsonParameters.PSobject.Properties["billingType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rejectCode"))) { #optional property not found
            $RejectCode = $null
        } else {
            $RejectCode = $JsonParameters.PSobject.Properties["rejectCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rejectDate"))) { #optional property not found
            $RejectDate = $null
        } else {
            $RejectDate = $JsonParameters.PSobject.Properties["rejectDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cancelCode"))) { #optional property not found
            $CancelCode = $null
        } else {
            $CancelCode = $JsonParameters.PSobject.Properties["cancelCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cancelDate"))) { #optional property not found
            $CancelDate = $null
        } else {
            $CancelDate = $JsonParameters.PSobject.Properties["cancelDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canceledBy"))) { #optional property not found
            $CanceledBy = $null
        } else {
            $CanceledBy = $JsonParameters.PSobject.Properties["canceledBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "holdCOde"))) { #optional property not found
            $HoldCOde = $null
        } else {
            $HoldCOde = $JsonParameters.PSobject.Properties["holdCOde"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "holdBegin"))) { #optional property not found
            $HoldBegin = $null
        } else {
            $HoldBegin = $JsonParameters.PSobject.Properties["holdBegin"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "holdDate"))) { #optional property not found
            $HoldDate = $null
        } else {
            $HoldDate = $JsonParameters.PSobject.Properties["holdDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "latestDependentServiceCompletionDate"))) { #optional property not found
            $LatestDependentServiceCompletionDate = $null
        } else {
            $LatestDependentServiceCompletionDate = $JsonParameters.PSobject.Properties["latestDependentServiceCompletionDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "estimateRequestTakenBy"))) { #optional property not found
            $EstimateRequestTakenBy = $null
        } else {
            $EstimateRequestTakenBy = $JsonParameters.PSobject.Properties["estimateRequestTakenBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "estimatedBy"))) { #optional property not found
            $EstimatedBy = $null
        } else {
            $EstimatedBy = $JsonParameters.PSobject.Properties["estimatedBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "estimatePrinted"))) { #optional property not found
            $EstimatePrinted = $null
        } else {
            $EstimatePrinted = $JsonParameters.PSobject.Properties["estimatePrinted"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "estimateGiven"))) { #optional property not found
            $EstimateGiven = $null
        } else {
            $EstimateGiven = $JsonParameters.PSobject.Properties["estimateGiven"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contactDate"))) { #optional property not found
            $ContactDate = $null
        } else {
            $ContactDate = $JsonParameters.PSobject.Properties["contactDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "callBackDate"))) { #optional property not found
            $CallBackDate = $null
        } else {
            $CallBackDate = $JsonParameters.PSobject.Properties["callBackDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerLetterID"))) { #optional property not found
            $CustomerLetterID = $null
        } else {
            $CustomerLetterID = $JsonParameters.PSobject.Properties["customerLetterID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "includeInConfirmationLetter"))) { #optional property not found
            $IncludeInConfirmationLetter = $null
        } else {
            $IncludeInConfirmationLetter = $JsonParameters.PSobject.Properties["includeInConfirmationLetter"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "averageTime"))) { #optional property not found
            $AverageTime = $null
        } else {
            $AverageTime = $JsonParameters.PSobject.Properties["averageTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "complete"))) { #optional property not found
            $Complete = $null
        } else {
            $Complete = $JsonParameters.PSobject.Properties["complete"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "repeat"))) { #optional property not found
            $Repeat = $null
        } else {
            $Repeat = $JsonParameters.PSobject.Properties["repeat"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "repeatEvery"))) { #optional property not found
            $RepeatEvery = $null
        } else {
            $RepeatEvery = $JsonParameters.PSobject.Properties["repeatEvery"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endOn"))) { #optional property not found
            $EndOn = $null
        } else {
            $EndOn = $JsonParameters.PSobject.Properties["endOn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "repeatBy"))) { #optional property not found
            $RepeatBy = $null
        } else {
            $RepeatBy = $JsonParameters.PSobject.Properties["repeatBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "callAhead"))) { #optional property not found
            $CallAhead = $null
        } else {
            $CallAhead = $JsonParameters.PSobject.Properties["callAhead"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contractID"))) { #optional property not found
            $ContractID = $null
        } else {
            $ContractID = $JsonParameters.PSobject.Properties["contractID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maximumRepetitions"))) { #optional property not found
            $MaximumRepetitions = $null
        } else {
            $MaximumRepetitions = $JsonParameters.PSobject.Properties["maximumRepetitions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "doneToDate"))) { #optional property not found
            $DoneToDate = $null
        } else {
            $DoneToDate = $JsonParameters.PSobject.Properties["doneToDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isAutoRenew"))) { #optional property not found
            $IsAutoRenew = $null
        } else {
            $IsAutoRenew = $JsonParameters.PSobject.Properties["isAutoRenew"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nextDate"))) { #optional property not found
            $NextDate = $null
        } else {
            $NextDate = $JsonParameters.PSobject.Properties["nextDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "temporaryRoute"))) { #optional property not found
            $TemporaryRoute = $null
        } else {
            $TemporaryRoute = $JsonParameters.PSobject.Properties["temporaryRoute"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "temporarySequence"))) { #optional property not found
            $TemporarySequence = $null
        } else {
            $TemporarySequence = $JsonParameters.PSobject.Properties["temporarySequence"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "temporaryDaycode"))) { #optional property not found
            $TemporaryDaycode = $null
        } else {
            $TemporaryDaycode = $JsonParameters.PSobject.Properties["temporaryDaycode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "estimateRequestedBy"))) { #optional property not found
            $EstimateRequestedBy = $null
        } else {
            $EstimateRequestedBy = $JsonParameters.PSobject.Properties["estimateRequestedBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "estimateReferredBy"))) { #optional property not found
            $EstimateReferredBy = $null
        } else {
            $EstimateReferredBy = $JsonParameters.PSobject.Properties["estimateReferredBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastPriceChange"))) { #optional property not found
            $LastPriceChange = $null
        } else {
            $LastPriceChange = $JsonParameters.PSobject.Properties["lastPriceChange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceYear"))) { #optional property not found
            $ServiceYear = $null
        } else {
            $ServiceYear = $JsonParameters.PSobject.Properties["serviceYear"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "difficulty"))) { #optional property not found
            $Difficulty = $null
        } else {
            $Difficulty = $JsonParameters.PSobject.Properties["difficulty"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "confirmationDate"))) { #optional property not found
            $ConfirmationDate = $null
        } else {
            $ConfirmationDate = $JsonParameters.PSobject.Properties["confirmationDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "purchaseOrderNumber"))) { #optional property not found
            $PurchaseOrderNumber = $null
        } else {
            $PurchaseOrderNumber = $JsonParameters.PSobject.Properties["purchaseOrderNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "confirmedBy"))) { #optional property not found
            $ConfirmedBy = $null
        } else {
            $ConfirmedBy = $JsonParameters.PSobject.Properties["confirmedBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isRenewed"))) { #optional property not found
            $IsRenewed = $null
        } else {
            $IsRenewed = $JsonParameters.PSobject.Properties["isRenewed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "workOrderPricing"))) { #optional property not found
            $WorkOrderPricing = $null
        } else {
            $WorkOrderPricing = $JsonParameters.PSobject.Properties["workOrderPricing"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isFullProgram"))) { #optional property not found
            $IsFullProgram = $null
        } else {
            $IsFullProgram = $JsonParameters.PSobject.Properties["isFullProgram"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "paymentPlanByEmployee"))) { #optional property not found
            $PaymentPlanByEmployee = $null
        } else {
            $PaymentPlanByEmployee = $JsonParameters.PSobject.Properties["paymentPlanByEmployee"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "paymentPlanDate"))) { #optional property not found
            $PaymentPlanDate = $null
        } else {
            $PaymentPlanDate = $JsonParameters.PSobject.Properties["paymentPlanDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lockSchedule"))) { #optional property not found
            $LockSchedule = $null
        } else {
            $LockSchedule = $JsonParameters.PSobject.Properties["lockSchedule"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "records"))) { #optional property not found
            $Records = $null
        } else {
            $Records = $JsonParameters.PSobject.Properties["records"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "offset"))) { #optional property not found
            $Offset = $null
        } else {
            $Offset = $JsonParameters.PSobject.Properties["offset"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) { #optional property not found
            $Created = $null
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updated"))) { #optional property not found
            $Updated = $null
        } else {
            $Updated = $JsonParameters.PSobject.Properties["updated"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "customerNumber" = ${CustomerNumber}
            "status" = ${Status}
            "programDefinitionID" = ${ProgramDefinitionID}
            "size" = ${Size}
            "sourceCode" = ${SourceCode}
            "dateSold" = ${DateSold}
            "technicianNote" = ${TechnicianNote}
            "technicianNoteExpiration" = ${TechnicianNoteExpiration}
            "customerNote" = ${CustomerNote}
            "customerNoteExpiration" = ${CustomerNoteExpiration}
            "estimateRequestDate" = ${EstimateRequestDate}
            "route" = ${Route}
            "dayCode" = ${DayCode}
            "sequence" = ${Sequence}
            "soldBy1" = ${SoldBy1}
            "soldBy2" = ${SoldBy2}
            "discountCode" = ${DiscountCode}
            "standardPrice" = ${StandardPrice}
            "averagePrice" = ${AveragePrice}
            "price" = ${Price}
            "numberOfServices" = ${NumberOfServices}
            "billingType" = ${BillingType}
            "rejectCode" = ${RejectCode}
            "rejectDate" = ${RejectDate}
            "cancelCode" = ${CancelCode}
            "cancelDate" = ${CancelDate}
            "canceledBy" = ${CanceledBy}
            "holdCOde" = ${HoldCOde}
            "holdBegin" = ${HoldBegin}
            "holdDate" = ${HoldDate}
            "latestDependentServiceCompletionDate" = ${LatestDependentServiceCompletionDate}
            "estimateRequestTakenBy" = ${EstimateRequestTakenBy}
            "estimatedBy" = ${EstimatedBy}
            "estimatePrinted" = ${EstimatePrinted}
            "estimateGiven" = ${EstimateGiven}
            "contactDate" = ${ContactDate}
            "callBackDate" = ${CallBackDate}
            "customerLetterID" = ${CustomerLetterID}
            "includeInConfirmationLetter" = ${IncludeInConfirmationLetter}
            "averageTime" = ${AverageTime}
            "complete" = ${Complete}
            "repeat" = ${Repeat}
            "repeatEvery" = ${RepeatEvery}
            "endOn" = ${EndOn}
            "repeatBy" = ${RepeatBy}
            "callAhead" = ${CallAhead}
            "contractID" = ${ContractID}
            "maximumRepetitions" = ${MaximumRepetitions}
            "doneToDate" = ${DoneToDate}
            "isAutoRenew" = ${IsAutoRenew}
            "nextDate" = ${NextDate}
            "temporaryRoute" = ${TemporaryRoute}
            "temporarySequence" = ${TemporarySequence}
            "temporaryDaycode" = ${TemporaryDaycode}
            "estimateRequestedBy" = ${EstimateRequestedBy}
            "estimateReferredBy" = ${EstimateReferredBy}
            "lastPriceChange" = ${LastPriceChange}
            "serviceYear" = ${ServiceYear}
            "difficulty" = ${Difficulty}
            "confirmationDate" = ${ConfirmationDate}
            "purchaseOrderNumber" = ${PurchaseOrderNumber}
            "confirmedBy" = ${ConfirmedBy}
            "isRenewed" = ${IsRenewed}
            "workOrderPricing" = ${WorkOrderPricing}
            "isFullProgram" = ${IsFullProgram}
            "paymentPlanByEmployee" = ${PaymentPlanByEmployee}
            "paymentPlanDate" = ${PaymentPlanDate}
            "lockSchedule" = ${LockSchedule}
            "records" = ${Records}
            "offset" = ${Offset}
            "created" = ${Created}
            "updated" = ${Updated}
        }

        return $PSO
    }

}

