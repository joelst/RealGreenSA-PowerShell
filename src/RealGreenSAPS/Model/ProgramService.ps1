#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER ProgramDefinitionID
No description available.
.PARAMETER ServiceCode
No description available.
.PARAMETER Round
No description available.
.PARAMETER IsDependent
No description available.
.PARAMETER VarDo
No description available.
.PARAMETER SkipAfter
No description available.
.OUTPUTS

ProgramService<PSCustomObject>
#>

function Initialize-RGSAProgramService {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ProgramDefinitionID},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceCode},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Round},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsDependent},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${VarDo},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${SkipAfter}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSAProgramService' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "programDefinitionID" = ${ProgramDefinitionID}
            "serviceCode" = ${ServiceCode}
            "round" = ${Round}
            "isDependent" = ${IsDependent}
            "do" = ${VarDo}
            "skipAfter" = ${SkipAfter}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProgramService<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProgramService<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProgramService<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToProgramService {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSAProgramService' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSAProgramService
        $AllProperties = ("id", "programDefinitionID", "serviceCode", "round", "isDependent", "do", "skipAfter")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "programDefinitionID"))) { #optional property not found
            $ProgramDefinitionID = $null
        } else {
            $ProgramDefinitionID = $JsonParameters.PSobject.Properties["programDefinitionID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceCode"))) { #optional property not found
            $ServiceCode = $null
        } else {
            $ServiceCode = $JsonParameters.PSobject.Properties["serviceCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "round"))) { #optional property not found
            $Round = $null
        } else {
            $Round = $JsonParameters.PSobject.Properties["round"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isDependent"))) { #optional property not found
            $IsDependent = $null
        } else {
            $IsDependent = $JsonParameters.PSobject.Properties["isDependent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "do"))) { #optional property not found
            $VarDo = $null
        } else {
            $VarDo = $JsonParameters.PSobject.Properties["do"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "skipAfter"))) { #optional property not found
            $SkipAfter = $null
        } else {
            $SkipAfter = $JsonParameters.PSobject.Properties["skipAfter"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "programDefinitionID" = ${ProgramDefinitionID}
            "serviceCode" = ${ServiceCode}
            "round" = ${Round}
            "isDependent" = ${IsDependent}
            "do" = ${VarDo}
            "skipAfter" = ${SkipAfter}
        }

        return $PSO
    }

}

