#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Round
No description available.
.PARAMETER ServiceCode
No description available.
.PARAMETER ServiceLongName
No description available.
.PARAMETER GrossPrice
No description available.
.PARAMETER GrossTax
No description available.
.PARAMETER GrossTotal
No description available.
.PARAMETER NetPrice
No description available.
.PARAMETER NetTax
No description available.
.PARAMETER NetTotal
No description available.
.PARAMETER Savings
No description available.
.PARAMETER TooLateToDo
No description available.
.PARAMETER Taxes
No description available.
.PARAMETER Discounts
No description available.
.OUTPUTS

ProgramServicePrice<PSCustomObject>
#>

function Initialize-RGSAProgramServicePrice {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Round},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceCode},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceLongName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${GrossPrice},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${GrossTax},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${GrossTotal},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${NetPrice},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${NetTax},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${NetTotal},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Savings},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${TooLateToDo},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Taxes},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Discounts}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSAProgramServicePrice' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "round" = ${Round}
            "serviceCode" = ${ServiceCode}
            "serviceLongName" = ${ServiceLongName}
            "grossPrice" = ${GrossPrice}
            "grossTax" = ${GrossTax}
            "grossTotal" = ${GrossTotal}
            "netPrice" = ${NetPrice}
            "netTax" = ${NetTax}
            "netTotal" = ${NetTotal}
            "savings" = ${Savings}
            "tooLateToDo" = ${TooLateToDo}
            "taxes" = ${Taxes}
            "discounts" = ${Discounts}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProgramServicePrice<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProgramServicePrice<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProgramServicePrice<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToProgramServicePrice {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSAProgramServicePrice' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSAProgramServicePrice
        $AllProperties = ("round", "serviceCode", "serviceLongName", "grossPrice", "grossTax", "grossTotal", "netPrice", "netTax", "netTotal", "savings", "tooLateToDo", "taxes", "discounts")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "round"))) { #optional property not found
            $Round = $null
        } else {
            $Round = $JsonParameters.PSobject.Properties["round"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceCode"))) { #optional property not found
            $ServiceCode = $null
        } else {
            $ServiceCode = $JsonParameters.PSobject.Properties["serviceCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceLongName"))) { #optional property not found
            $ServiceLongName = $null
        } else {
            $ServiceLongName = $JsonParameters.PSobject.Properties["serviceLongName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "grossPrice"))) { #optional property not found
            $GrossPrice = $null
        } else {
            $GrossPrice = $JsonParameters.PSobject.Properties["grossPrice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "grossTax"))) { #optional property not found
            $GrossTax = $null
        } else {
            $GrossTax = $JsonParameters.PSobject.Properties["grossTax"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "grossTotal"))) { #optional property not found
            $GrossTotal = $null
        } else {
            $GrossTotal = $JsonParameters.PSobject.Properties["grossTotal"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "netPrice"))) { #optional property not found
            $NetPrice = $null
        } else {
            $NetPrice = $JsonParameters.PSobject.Properties["netPrice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "netTax"))) { #optional property not found
            $NetTax = $null
        } else {
            $NetTax = $JsonParameters.PSobject.Properties["netTax"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "netTotal"))) { #optional property not found
            $NetTotal = $null
        } else {
            $NetTotal = $JsonParameters.PSobject.Properties["netTotal"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "savings"))) { #optional property not found
            $Savings = $null
        } else {
            $Savings = $JsonParameters.PSobject.Properties["savings"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tooLateToDo"))) { #optional property not found
            $TooLateToDo = $null
        } else {
            $TooLateToDo = $JsonParameters.PSobject.Properties["tooLateToDo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "taxes"))) { #optional property not found
            $Taxes = $null
        } else {
            $Taxes = $JsonParameters.PSobject.Properties["taxes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "discounts"))) { #optional property not found
            $Discounts = $null
        } else {
            $Discounts = $JsonParameters.PSobject.Properties["discounts"].value
        }

        $PSO = [PSCustomObject]@{
            "round" = ${Round}
            "serviceCode" = ${ServiceCode}
            "serviceLongName" = ${ServiceLongName}
            "grossPrice" = ${GrossPrice}
            "grossTax" = ${GrossTax}
            "grossTotal" = ${GrossTotal}
            "netPrice" = ${NetPrice}
            "netTax" = ${NetTax}
            "netTotal" = ${NetTotal}
            "savings" = ${Savings}
            "tooLateToDo" = ${TooLateToDo}
            "taxes" = ${Taxes}
            "discounts" = ${Discounts}
        }

        return $PSO
    }

}

