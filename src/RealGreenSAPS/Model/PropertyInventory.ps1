#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Description
No description available.
.PARAMETER CategoryID
No description available.
.PARAMETER UnitCode
No description available.
.PARAMETER AnyBranch
No description available.
.PARAMETER DescriptionFrench
No description available.
.PARAMETER DescriptionSpanish
No description available.
.OUTPUTS

PropertyInventory<PSCustomObject>
#>

function Initialize-RGSAPropertyInventory {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CategoryID},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${UnitCode},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AnyBranch},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DescriptionFrench},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DescriptionSpanish}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSAPropertyInventory' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "description" = ${Description}
            "categoryID" = ${CategoryID}
            "unitCode" = ${UnitCode}
            "anyBranch" = ${AnyBranch}
            "descriptionFrench" = ${DescriptionFrench}
            "descriptionSpanish" = ${DescriptionSpanish}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PropertyInventory<PSCustomObject>

.DESCRIPTION

Convert from JSON to PropertyInventory<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PropertyInventory<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToPropertyInventory {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSAPropertyInventory' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSAPropertyInventory
        $AllProperties = ("id", "description", "categoryID", "unitCode", "anyBranch", "descriptionFrench", "descriptionSpanish")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "categoryID"))) { #optional property not found
            $CategoryID = $null
        } else {
            $CategoryID = $JsonParameters.PSobject.Properties["categoryID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unitCode"))) { #optional property not found
            $UnitCode = $null
        } else {
            $UnitCode = $JsonParameters.PSobject.Properties["unitCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "anyBranch"))) { #optional property not found
            $AnyBranch = $null
        } else {
            $AnyBranch = $JsonParameters.PSobject.Properties["anyBranch"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "descriptionFrench"))) { #optional property not found
            $DescriptionFrench = $null
        } else {
            $DescriptionFrench = $JsonParameters.PSobject.Properties["descriptionFrench"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "descriptionSpanish"))) { #optional property not found
            $DescriptionSpanish = $null
        } else {
            $DescriptionSpanish = $JsonParameters.PSobject.Properties["descriptionSpanish"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "description" = ${Description}
            "categoryID" = ${CategoryID}
            "unitCode" = ${UnitCode}
            "anyBranch" = ${AnyBranch}
            "descriptionFrench" = ${DescriptionFrench}
            "descriptionSpanish" = ${DescriptionSpanish}
        }

        return $PSO
    }

}

