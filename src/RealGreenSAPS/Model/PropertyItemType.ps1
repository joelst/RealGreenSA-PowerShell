#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Description
No description available.
.PARAMETER CategoryId
No description available.
.PARAMETER UnitOfMeasureId
No description available.
.PARAMETER IsAnyBranch
No description available.
.PARAMETER BranchIds
No description available.
.PARAMETER PropertyItemCategory
No description available.
.PARAMETER UnitOfMeasure
No description available.
.PARAMETER ServiceType
No description available.
.PARAMETER IsAreaUnitOfMeasure
No description available.
.OUTPUTS

PropertyItemType<PSCustomObject>
#>

function Initialize-RGSAPropertyItemType {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CategoryId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${UnitOfMeasureId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsAnyBranch},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${BranchIds},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PropertyItemCategory},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UnitOfMeasure},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ServiceType},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsAreaUnitOfMeasure}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSAPropertyItemType' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "description" = ${Description}
            "categoryId" = ${CategoryId}
            "unitOfMeasureId" = ${UnitOfMeasureId}
            "isAnyBranch" = ${IsAnyBranch}
            "branchIds" = ${BranchIds}
            "propertyItemCategory" = ${PropertyItemCategory}
            "unitOfMeasure" = ${UnitOfMeasure}
            "serviceType" = ${ServiceType}
            "isAreaUnitOfMeasure" = ${IsAreaUnitOfMeasure}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PropertyItemType<PSCustomObject>

.DESCRIPTION

Convert from JSON to PropertyItemType<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PropertyItemType<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToPropertyItemType {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSAPropertyItemType' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSAPropertyItemType
        $AllProperties = ("id", "description", "categoryId", "unitOfMeasureId", "isAnyBranch", "branchIds", "propertyItemCategory", "unitOfMeasure", "serviceType", "isAreaUnitOfMeasure")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "categoryId"))) { #optional property not found
            $CategoryId = $null
        } else {
            $CategoryId = $JsonParameters.PSobject.Properties["categoryId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unitOfMeasureId"))) { #optional property not found
            $UnitOfMeasureId = $null
        } else {
            $UnitOfMeasureId = $JsonParameters.PSobject.Properties["unitOfMeasureId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isAnyBranch"))) { #optional property not found
            $IsAnyBranch = $null
        } else {
            $IsAnyBranch = $JsonParameters.PSobject.Properties["isAnyBranch"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "branchIds"))) { #optional property not found
            $BranchIds = $null
        } else {
            $BranchIds = $JsonParameters.PSobject.Properties["branchIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "propertyItemCategory"))) { #optional property not found
            $PropertyItemCategory = $null
        } else {
            $PropertyItemCategory = $JsonParameters.PSobject.Properties["propertyItemCategory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unitOfMeasure"))) { #optional property not found
            $UnitOfMeasure = $null
        } else {
            $UnitOfMeasure = $JsonParameters.PSobject.Properties["unitOfMeasure"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceType"))) { #optional property not found
            $ServiceType = $null
        } else {
            $ServiceType = $JsonParameters.PSobject.Properties["serviceType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isAreaUnitOfMeasure"))) { #optional property not found
            $IsAreaUnitOfMeasure = $null
        } else {
            $IsAreaUnitOfMeasure = $JsonParameters.PSobject.Properties["isAreaUnitOfMeasure"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "description" = ${Description}
            "categoryId" = ${CategoryId}
            "unitOfMeasureId" = ${UnitOfMeasureId}
            "isAnyBranch" = ${IsAnyBranch}
            "branchIds" = ${BranchIds}
            "propertyItemCategory" = ${PropertyItemCategory}
            "unitOfMeasure" = ${UnitOfMeasure}
            "serviceType" = ${ServiceType}
            "isAreaUnitOfMeasure" = ${IsAreaUnitOfMeasure}
        }

        return $PSO
    }

}

