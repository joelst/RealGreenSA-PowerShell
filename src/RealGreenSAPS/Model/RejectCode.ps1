#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER LetterID
No description available.
.PARAMETER Available
No description available.
.PARAMETER RejectDescription
No description available.
.PARAMETER RejectDescriptionFrench
No description available.
.PARAMETER RejectDescriptionSpanish
No description available.
.OUTPUTS

RejectCode<PSCustomObject>
#>

function Initialize-RgSaRejectCode {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LetterID},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Available},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RejectDescription},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RejectDescriptionFrench},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RejectDescriptionSpanish}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaRejectCode' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "letterID" = ${LetterID}
            "available" = ${Available}
            "rejectDescription" = ${RejectDescription}
            "rejectDescriptionFrench" = ${RejectDescriptionFrench}
            "rejectDescriptionSpanish" = ${RejectDescriptionSpanish}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RejectCode<PSCustomObject>

.DESCRIPTION

Convert from JSON to RejectCode<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RejectCode<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToRejectCode {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaRejectCode' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaRejectCode
        $AllProperties = ("id", "letterID", "available", "rejectDescription", "rejectDescriptionFrench", "rejectDescriptionSpanish")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "letterID"))) { #optional property not found
            $LetterID = $null
        } else {
            $LetterID = $JsonParameters.PSobject.Properties["letterID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "available"))) { #optional property not found
            $Available = $null
        } else {
            $Available = $JsonParameters.PSobject.Properties["available"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rejectDescription"))) { #optional property not found
            $RejectDescription = $null
        } else {
            $RejectDescription = $JsonParameters.PSobject.Properties["rejectDescription"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rejectDescriptionFrench"))) { #optional property not found
            $RejectDescriptionFrench = $null
        } else {
            $RejectDescriptionFrench = $JsonParameters.PSobject.Properties["rejectDescriptionFrench"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rejectDescriptionSpanish"))) { #optional property not found
            $RejectDescriptionSpanish = $null
        } else {
            $RejectDescriptionSpanish = $JsonParameters.PSobject.Properties["rejectDescriptionSpanish"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "letterID" = ${LetterID}
            "available" = ${Available}
            "rejectDescription" = ${RejectDescription}
            "rejectDescriptionFrench" = ${RejectDescriptionFrench}
            "rejectDescriptionSpanish" = ${RejectDescriptionSpanish}
        }

        return $PSO
    }

}

