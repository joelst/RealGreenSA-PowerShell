#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ServiceCode
No description available.
.PARAMETER NumberOfServices
No description available.
.PARAMETER Size
No description available.
.PARAMETER DollarAmount
No description available.
.OUTPUTS

RoundCycleDetail<PSCustomObject>
#>

function Initialize-RgSaRoundCycleDetail {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServiceCode},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NumberOfServices},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Size},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${DollarAmount}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaRoundCycleDetail' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "serviceCode" = ${ServiceCode}
            "numberOfServices" = ${NumberOfServices}
            "size" = ${Size}
            "dollarAmount" = ${DollarAmount}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RoundCycleDetail<PSCustomObject>

.DESCRIPTION

Convert from JSON to RoundCycleDetail<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RoundCycleDetail<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToRoundCycleDetail {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaRoundCycleDetail' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaRoundCycleDetail
        $AllProperties = ("serviceCode", "numberOfServices", "size", "dollarAmount")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceCode"))) { #optional property not found
            $ServiceCode = $null
        } else {
            $ServiceCode = $JsonParameters.PSobject.Properties["serviceCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "numberOfServices"))) { #optional property not found
            $NumberOfServices = $null
        } else {
            $NumberOfServices = $JsonParameters.PSobject.Properties["numberOfServices"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dollarAmount"))) { #optional property not found
            $DollarAmount = $null
        } else {
            $DollarAmount = $JsonParameters.PSobject.Properties["dollarAmount"].value
        }

        $PSO = [PSCustomObject]@{
            "serviceCode" = ${ServiceCode}
            "numberOfServices" = ${NumberOfServices}
            "size" = ${Size}
            "dollarAmount" = ${DollarAmount}
        }

        return $PSO
    }

}

