#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER EmployeeID
No description available.
.PARAMETER FirstName
No description available.
.PARAMETER LastInitial
No description available.
.PARAMETER GrossSales
No description available.
.PARAMETER NetSales
No description available.
.PARAMETER CompanyID
No description available.
.OUTPUTS

SalesByEmployee<PSCustomObject>
#>

function Initialize-RgSaSalesByEmployee {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmployeeID},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FirstName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastInitial},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${GrossSales},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${NetSales},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CompanyID}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaSalesByEmployee' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "employeeID" = ${EmployeeID}
            "firstName" = ${FirstName}
            "lastInitial" = ${LastInitial}
            "grossSales" = ${GrossSales}
            "netSales" = ${NetSales}
            "companyID" = ${CompanyID}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SalesByEmployee<PSCustomObject>

.DESCRIPTION

Convert from JSON to SalesByEmployee<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SalesByEmployee<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToSalesByEmployee {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaSalesByEmployee' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaSalesByEmployee
        $AllProperties = ("employeeID", "firstName", "lastInitial", "grossSales", "netSales", "companyID")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "employeeID"))) { #optional property not found
            $EmployeeID = $null
        } else {
            $EmployeeID = $JsonParameters.PSobject.Properties["employeeID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "firstName"))) { #optional property not found
            $FirstName = $null
        } else {
            $FirstName = $JsonParameters.PSobject.Properties["firstName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastInitial"))) { #optional property not found
            $LastInitial = $null
        } else {
            $LastInitial = $JsonParameters.PSobject.Properties["lastInitial"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "grossSales"))) { #optional property not found
            $GrossSales = $null
        } else {
            $GrossSales = $JsonParameters.PSobject.Properties["grossSales"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "netSales"))) { #optional property not found
            $NetSales = $null
        } else {
            $NetSales = $JsonParameters.PSobject.Properties["netSales"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "companyID"))) { #optional property not found
            $CompanyID = $null
        } else {
            $CompanyID = $JsonParameters.PSobject.Properties["companyID"].value
        }

        $PSO = [PSCustomObject]@{
            "employeeID" = ${EmployeeID}
            "firstName" = ${FirstName}
            "lastInitial" = ${LastInitial}
            "grossSales" = ${GrossSales}
            "netSales" = ${NetSales}
            "companyID" = ${CompanyID}
        }

        return $PSO
    }

}

