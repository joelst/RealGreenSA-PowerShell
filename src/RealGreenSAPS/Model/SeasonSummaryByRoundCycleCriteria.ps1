#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CompanyIDs
No description available.
.PARAMETER ProgramDefinitionIDs
No description available.
.PARAMETER RouteCodes
No description available.
.PARAMETER ResidentialCommercial
No description available.
.PARAMETER ServiceYear
No description available.
.PARAMETER ServiceRenewalType
No description available.
.PARAMETER Prepaid
No description available.
.PARAMETER ShowNetPrices
No description available.
.OUTPUTS

SeasonSummaryByRoundCycleCriteria<PSCustomObject>
#>

function Initialize-RGSASeasonSummaryByRoundCycleCriteria {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${CompanyIDs},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${ProgramDefinitionIDs},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${RouteCodes},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResidentialCommercial},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ServiceYear},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ServiceRenewalType},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Prepaid},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ShowNetPrices}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSASeasonSummaryByRoundCycleCriteria' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "companyIDs" = ${CompanyIDs}
            "programDefinitionIDs" = ${ProgramDefinitionIDs}
            "routeCodes" = ${RouteCodes}
            "residentialCommercial" = ${ResidentialCommercial}
            "serviceYear" = ${ServiceYear}
            "serviceRenewalType" = ${ServiceRenewalType}
            "prepaid" = ${Prepaid}
            "showNetPrices" = ${ShowNetPrices}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SeasonSummaryByRoundCycleCriteria<PSCustomObject>

.DESCRIPTION

Convert from JSON to SeasonSummaryByRoundCycleCriteria<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SeasonSummaryByRoundCycleCriteria<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToSeasonSummaryByRoundCycleCriteria {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSASeasonSummaryByRoundCycleCriteria' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSASeasonSummaryByRoundCycleCriteria
        $AllProperties = ("companyIDs", "programDefinitionIDs", "routeCodes", "residentialCommercial", "serviceYear", "serviceRenewalType", "prepaid", "showNetPrices")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "companyIDs"))) { #optional property not found
            $CompanyIDs = $null
        } else {
            $CompanyIDs = $JsonParameters.PSobject.Properties["companyIDs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "programDefinitionIDs"))) { #optional property not found
            $ProgramDefinitionIDs = $null
        } else {
            $ProgramDefinitionIDs = $JsonParameters.PSobject.Properties["programDefinitionIDs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "routeCodes"))) { #optional property not found
            $RouteCodes = $null
        } else {
            $RouteCodes = $JsonParameters.PSobject.Properties["routeCodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "residentialCommercial"))) { #optional property not found
            $ResidentialCommercial = $null
        } else {
            $ResidentialCommercial = $JsonParameters.PSobject.Properties["residentialCommercial"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceYear"))) { #optional property not found
            $ServiceYear = $null
        } else {
            $ServiceYear = $JsonParameters.PSobject.Properties["serviceYear"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceRenewalType"))) { #optional property not found
            $ServiceRenewalType = $null
        } else {
            $ServiceRenewalType = $JsonParameters.PSobject.Properties["serviceRenewalType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prepaid"))) { #optional property not found
            $Prepaid = $null
        } else {
            $Prepaid = $JsonParameters.PSobject.Properties["prepaid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "showNetPrices"))) { #optional property not found
            $ShowNetPrices = $null
        } else {
            $ShowNetPrices = $JsonParameters.PSobject.Properties["showNetPrices"].value
        }

        $PSO = [PSCustomObject]@{
            "companyIDs" = ${CompanyIDs}
            "programDefinitionIDs" = ${ProgramDefinitionIDs}
            "routeCodes" = ${RouteCodes}
            "residentialCommercial" = ${ResidentialCommercial}
            "serviceYear" = ${ServiceYear}
            "serviceRenewalType" = ${ServiceRenewalType}
            "prepaid" = ${Prepaid}
            "showNetPrices" = ${ShowNetPrices}
        }

        return $PSO
    }

}

