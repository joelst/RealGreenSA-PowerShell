#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER HistoryAllocationID
No description available.
.PARAMETER HistoryID
No description available.
.PARAMETER AmountApplied
No description available.
.PARAMETER HistoryAmount
No description available.
.PARAMETER TransactionDate
No description available.
.PARAMETER Description
No description available.
.OUTPUTS

ServiceAllocationItem<PSCustomObject>
#>

function Initialize-RgSaServiceAllocationItem {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${HistoryAllocationID},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${HistoryID},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${AmountApplied},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${HistoryAmount},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${TransactionDate},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaServiceAllocationItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "historyAllocationID" = ${HistoryAllocationID}
            "historyID" = ${HistoryID}
            "amountApplied" = ${AmountApplied}
            "historyAmount" = ${HistoryAmount}
            "transactionDate" = ${TransactionDate}
            "description" = ${Description}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ServiceAllocationItem<PSCustomObject>

.DESCRIPTION

Convert from JSON to ServiceAllocationItem<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ServiceAllocationItem<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToServiceAllocationItem {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaServiceAllocationItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaServiceAllocationItem
        $AllProperties = ("historyAllocationID", "historyID", "amountApplied", "historyAmount", "transactionDate", "description")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "historyAllocationID"))) { #optional property not found
            $HistoryAllocationID = $null
        } else {
            $HistoryAllocationID = $JsonParameters.PSobject.Properties["historyAllocationID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "historyID"))) { #optional property not found
            $HistoryID = $null
        } else {
            $HistoryID = $JsonParameters.PSobject.Properties["historyID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "amountApplied"))) { #optional property not found
            $AmountApplied = $null
        } else {
            $AmountApplied = $JsonParameters.PSobject.Properties["amountApplied"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "historyAmount"))) { #optional property not found
            $HistoryAmount = $null
        } else {
            $HistoryAmount = $JsonParameters.PSobject.Properties["historyAmount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "transactionDate"))) { #optional property not found
            $TransactionDate = $null
        } else {
            $TransactionDate = $JsonParameters.PSobject.Properties["transactionDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        $PSO = [PSCustomObject]@{
            "historyAllocationID" = ${HistoryAllocationID}
            "historyID" = ${HistoryID}
            "amountApplied" = ${AmountApplied}
            "historyAmount" = ${HistoryAmount}
            "transactionDate" = ${TransactionDate}
            "description" = ${Description}
        }

        return $PSO
    }

}

