#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ServiceID
No description available.
.PARAMETER InvoiceNumber
No description available.
.PARAMETER Start
No description available.
.PARAMETER VarEnd
No description available.
.PARAMETER PrepayDescription
No description available.
.PARAMETER TotalServiceCharge
No description available.
.PARAMETER TotalApplied
No description available.
.PARAMETER Allocations
No description available.
.OUTPUTS

ServiceAllocationRecord<PSCustomObject>
#>

function Initialize-RgSaServiceAllocationRecord {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ServiceID},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${InvoiceNumber},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Start},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VarEnd},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PrepayDescription},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${TotalServiceCharge},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${TotalApplied},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Allocations}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaServiceAllocationRecord' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "serviceID" = ${ServiceID}
            "invoiceNumber" = ${InvoiceNumber}
            "start" = ${Start}
            "end" = ${VarEnd}
            "prepayDescription" = ${PrepayDescription}
            "totalServiceCharge" = ${TotalServiceCharge}
            "totalApplied" = ${TotalApplied}
            "allocations" = ${Allocations}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ServiceAllocationRecord<PSCustomObject>

.DESCRIPTION

Convert from JSON to ServiceAllocationRecord<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ServiceAllocationRecord<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToServiceAllocationRecord {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaServiceAllocationRecord' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaServiceAllocationRecord
        $AllProperties = ("serviceID", "invoiceNumber", "start", "end", "prepayDescription", "totalServiceCharge", "totalApplied", "allocations")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceID"))) { #optional property not found
            $ServiceID = $null
        } else {
            $ServiceID = $JsonParameters.PSobject.Properties["serviceID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "invoiceNumber"))) { #optional property not found
            $InvoiceNumber = $null
        } else {
            $InvoiceNumber = $JsonParameters.PSobject.Properties["invoiceNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "start"))) { #optional property not found
            $Start = $null
        } else {
            $Start = $JsonParameters.PSobject.Properties["start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "end"))) { #optional property not found
            $VarEnd = $null
        } else {
            $VarEnd = $JsonParameters.PSobject.Properties["end"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prepayDescription"))) { #optional property not found
            $PrepayDescription = $null
        } else {
            $PrepayDescription = $JsonParameters.PSobject.Properties["prepayDescription"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalServiceCharge"))) { #optional property not found
            $TotalServiceCharge = $null
        } else {
            $TotalServiceCharge = $JsonParameters.PSobject.Properties["totalServiceCharge"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalApplied"))) { #optional property not found
            $TotalApplied = $null
        } else {
            $TotalApplied = $JsonParameters.PSobject.Properties["totalApplied"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allocations"))) { #optional property not found
            $Allocations = $null
        } else {
            $Allocations = $JsonParameters.PSobject.Properties["allocations"].value
        }

        $PSO = [PSCustomObject]@{
            "serviceID" = ${ServiceID}
            "invoiceNumber" = ${InvoiceNumber}
            "start" = ${Start}
            "end" = ${VarEnd}
            "prepayDescription" = ${PrepayDescription}
            "totalServiceCharge" = ${TotalServiceCharge}
            "totalApplied" = ${TotalApplied}
            "allocations" = ${Allocations}
        }

        return $PSO
    }

}

