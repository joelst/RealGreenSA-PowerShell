#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER LongName
No description available.
.PARAMETER Available
No description available.
.PARAMETER InvoiceMessage
No description available.
.PARAMETER InvoiceMessageShort
No description available.
.PARAMETER PriceID
No description available.
.PARAMETER PriceBy
No description available.
.PARAMETER IsProgramService
No description available.
.PARAMETER IsSpecial
No description available.
.PARAMETER ManHourRate
No description available.
.PARAMETER EstimatedManHours
No description available.
.PARAMETER BasePrice
No description available.
.PARAMETER StartDate
No description available.
.PARAMETER IgnoreCreditHold
No description available.
.PARAMETER LetterID
No description available.
.PARAMETER ProgramType
No description available.
.PARAMETER IsWorkOrder
No description available.
.PARAMETER IsServiceCall
No description available.
.PARAMETER SentriconServiceType
No description available.
.PARAMETER SentriconServiceTypeCount
No description available.
.PARAMETER ProductionParams
No description available.
.PARAMETER ProgramCode
No description available.
.PARAMETER DoNotDefaultStartDate
No description available.
.PARAMETER CanEnterTemperature
No description available.
.PARAMETER CanEnterWind
No description available.
.PARAMETER CanEnterPh
No description available.
.PARAMETER CanEnterRating
No description available.
.PARAMETER CanEnterConditionCodes
No description available.
.PARAMETER CanEnterSize
No description available.
.PARAMETER CanChangeProductionPrice
No description available.
.PARAMETER CanEnterStartTime
No description available.
.PARAMETER CanEnterEndTime
No description available.
.PARAMETER CanUseProducts
No description available.
.PARAMETER PreNotify
No description available.
.PARAMETER TechnicianNote
No description available.
.PARAMETER IsEstimate
No description available.
.PARAMETER IsAnyBranch
No description available.
.PARAMETER BranchIDs
No description available.
.PARAMETER BranchIDsInUse
No description available.
.PARAMETER BranchPrices
No description available.
.PARAMETER StandardAccountResId
No description available.
.PARAMETER StandardAccountComId
No description available.
.PARAMETER StandardAccountResDescription
No description available.
.PARAMETER StandardAccountComDescription
No description available.
.PARAMETER SurchargeAccountResId
No description available.
.PARAMETER SurchargeAccountComId
No description available.
.PARAMETER DiscountAccountResId
No description available.
.PARAMETER DiscountAccountComId
No description available.
.PARAMETER PrepayAccountResId
No description available.
.PARAMETER PrepayAccountComId
No description available.
.PARAMETER HexForecolor
No description available.
.PARAMETER HexBackcolor
No description available.
.PARAMETER HtmlBackcolor
No description available.
.PARAMETER IsPesticideUsed
No description available.
.PARAMETER CallAhead
No description available.
.PARAMETER MinimumDays
No description available.
.PARAMETER MaximumDays
No description available.
.PARAMETER MaximumWind
No description available.
.PARAMETER MinimumTemperature
No description available.
.PARAMETER MaximumTemperature
No description available.
.PARAMETER CanBeProgramRound
No description available.
.PARAMETER CanBeSpecialJob
No description available.
.PARAMETER RoundQuickFit
No description available.
.PARAMETER QuickFitTimeWindow
No description available.
.PARAMETER AutopostMobile
No description available.
.OUTPUTS

ServiceCode<PSCustomObject>
#>

function Initialize-RGSAServiceCode {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LongName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Available},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InvoiceMessage},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InvoiceMessageShort},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PriceID},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Manual", "ManHour", "PricingTable", "EstimatedTimeAndMaterials", "ActualTimeAndMaterials", "NULL")]
        [PSCustomObject]
        ${PriceBy},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsProgramService},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsSpecial},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${ManHourRate},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${EstimatedManHours},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${BasePrice},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${StartDate},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IgnoreCreditHold},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LetterID},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProgramType},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsWorkOrder},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsServiceCall},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SentriconServiceType},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SentriconServiceTypeCount},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ProductionParams},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ProgramCode},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DoNotDefaultStartDate},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanEnterTemperature},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanEnterWind},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanEnterPh},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanEnterRating},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanEnterConditionCodes},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanEnterSize},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanChangeProductionPrice},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanEnterStartTime},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanEnterEndTime},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanUseProducts},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${PreNotify},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TechnicianNote},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsEstimate},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsAnyBranch},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${BranchIDs},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${BranchIDsInUse},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${BranchPrices},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StandardAccountResId},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StandardAccountComId},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StandardAccountResDescription},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StandardAccountComDescription},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SurchargeAccountResId},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SurchargeAccountComId},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DiscountAccountResId},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DiscountAccountComId},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PrepayAccountResId},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PrepayAccountComId},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HexForecolor},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HexBackcolor},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HtmlBackcolor},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsPesticideUsed},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CallAhead},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MinimumDays},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaximumDays},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaximumWind},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MinimumTemperature},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaximumTemperature},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanBeProgramRound},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanBeSpecialJob},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RoundQuickFit},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${QuickFitTimeWindow},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AutopostMobile}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSAServiceCode' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "longName" = ${LongName}
            "available" = ${Available}
            "invoiceMessage" = ${InvoiceMessage}
            "invoiceMessageShort" = ${InvoiceMessageShort}
            "priceID" = ${PriceID}
            "priceBy" = ${PriceBy}
            "isProgramService" = ${IsProgramService}
            "isSpecial" = ${IsSpecial}
            "manHourRate" = ${ManHourRate}
            "estimatedManHours" = ${EstimatedManHours}
            "basePrice" = ${BasePrice}
            "startDate" = ${StartDate}
            "ignoreCreditHold" = ${IgnoreCreditHold}
            "letterID" = ${LetterID}
            "programType" = ${ProgramType}
            "isWorkOrder" = ${IsWorkOrder}
            "isServiceCall" = ${IsServiceCall}
            "sentriconServiceType" = ${SentriconServiceType}
            "sentriconServiceTypeCount" = ${SentriconServiceTypeCount}
            "productionParams" = ${ProductionParams}
            "programCode" = ${ProgramCode}
            "doNotDefaultStartDate" = ${DoNotDefaultStartDate}
            "canEnterTemperature" = ${CanEnterTemperature}
            "canEnterWind" = ${CanEnterWind}
            "canEnterPh" = ${CanEnterPh}
            "canEnterRating" = ${CanEnterRating}
            "canEnterConditionCodes" = ${CanEnterConditionCodes}
            "canEnterSize" = ${CanEnterSize}
            "canChangeProductionPrice" = ${CanChangeProductionPrice}
            "canEnterStartTime" = ${CanEnterStartTime}
            "canEnterEndTime" = ${CanEnterEndTime}
            "canUseProducts" = ${CanUseProducts}
            "preNotify" = ${PreNotify}
            "technicianNote" = ${TechnicianNote}
            "isEstimate" = ${IsEstimate}
            "isAnyBranch" = ${IsAnyBranch}
            "branchIDs" = ${BranchIDs}
            "branchIDsInUse" = ${BranchIDsInUse}
            "branchPrices" = ${BranchPrices}
            "standardAccountResId" = ${StandardAccountResId}
            "standardAccountComId" = ${StandardAccountComId}
            "standardAccountResDescription" = ${StandardAccountResDescription}
            "standardAccountComDescription" = ${StandardAccountComDescription}
            "surchargeAccountResId" = ${SurchargeAccountResId}
            "surchargeAccountComId" = ${SurchargeAccountComId}
            "discountAccountResId" = ${DiscountAccountResId}
            "discountAccountComId" = ${DiscountAccountComId}
            "prepayAccountResId" = ${PrepayAccountResId}
            "prepayAccountComId" = ${PrepayAccountComId}
            "hexForecolor" = ${HexForecolor}
            "hexBackcolor" = ${HexBackcolor}
            "htmlBackcolor" = ${HtmlBackcolor}
            "isPesticideUsed" = ${IsPesticideUsed}
            "callAhead" = ${CallAhead}
            "minimumDays" = ${MinimumDays}
            "maximumDays" = ${MaximumDays}
            "maximumWind" = ${MaximumWind}
            "minimumTemperature" = ${MinimumTemperature}
            "maximumTemperature" = ${MaximumTemperature}
            "canBeProgramRound" = ${CanBeProgramRound}
            "canBeSpecialJob" = ${CanBeSpecialJob}
            "roundQuickFit" = ${RoundQuickFit}
            "quickFitTimeWindow" = ${QuickFitTimeWindow}
            "autopostMobile" = ${AutopostMobile}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ServiceCode<PSCustomObject>

.DESCRIPTION

Convert from JSON to ServiceCode<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ServiceCode<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToServiceCode {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSAServiceCode' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSAServiceCode
        $AllProperties = ("id", "name", "longName", "available", "invoiceMessage", "invoiceMessageShort", "priceID", "priceBy", "isProgramService", "isSpecial", "manHourRate", "estimatedManHours", "basePrice", "startDate", "ignoreCreditHold", "letterID", "programType", "isWorkOrder", "isServiceCall", "sentriconServiceType", "sentriconServiceTypeCount", "productionParams", "programCode", "doNotDefaultStartDate", "canEnterTemperature", "canEnterWind", "canEnterPh", "canEnterRating", "canEnterConditionCodes", "canEnterSize", "canChangeProductionPrice", "canEnterStartTime", "canEnterEndTime", "canUseProducts", "preNotify", "technicianNote", "isEstimate", "isAnyBranch", "branchIDs", "branchIDsInUse", "branchPrices", "standardAccountResId", "standardAccountComId", "standardAccountResDescription", "standardAccountComDescription", "surchargeAccountResId", "surchargeAccountComId", "discountAccountResId", "discountAccountComId", "prepayAccountResId", "prepayAccountComId", "hexForecolor", "hexBackcolor", "htmlBackcolor", "isPesticideUsed", "callAhead", "minimumDays", "maximumDays", "maximumWind", "minimumTemperature", "maximumTemperature", "canBeProgramRound", "canBeSpecialJob", "roundQuickFit", "quickFitTimeWindow", "autopostMobile")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "longName"))) { #optional property not found
            $LongName = $null
        } else {
            $LongName = $JsonParameters.PSobject.Properties["longName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "available"))) { #optional property not found
            $Available = $null
        } else {
            $Available = $JsonParameters.PSobject.Properties["available"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "invoiceMessage"))) { #optional property not found
            $InvoiceMessage = $null
        } else {
            $InvoiceMessage = $JsonParameters.PSobject.Properties["invoiceMessage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "invoiceMessageShort"))) { #optional property not found
            $InvoiceMessageShort = $null
        } else {
            $InvoiceMessageShort = $JsonParameters.PSobject.Properties["invoiceMessageShort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "priceID"))) { #optional property not found
            $PriceID = $null
        } else {
            $PriceID = $JsonParameters.PSobject.Properties["priceID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "priceBy"))) { #optional property not found
            $PriceBy = $null
        } else {
            $PriceBy = $JsonParameters.PSobject.Properties["priceBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isProgramService"))) { #optional property not found
            $IsProgramService = $null
        } else {
            $IsProgramService = $JsonParameters.PSobject.Properties["isProgramService"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isSpecial"))) { #optional property not found
            $IsSpecial = $null
        } else {
            $IsSpecial = $JsonParameters.PSobject.Properties["isSpecial"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "manHourRate"))) { #optional property not found
            $ManHourRate = $null
        } else {
            $ManHourRate = $JsonParameters.PSobject.Properties["manHourRate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "estimatedManHours"))) { #optional property not found
            $EstimatedManHours = $null
        } else {
            $EstimatedManHours = $JsonParameters.PSobject.Properties["estimatedManHours"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "basePrice"))) { #optional property not found
            $BasePrice = $null
        } else {
            $BasePrice = $JsonParameters.PSobject.Properties["basePrice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startDate"))) { #optional property not found
            $StartDate = $null
        } else {
            $StartDate = $JsonParameters.PSobject.Properties["startDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ignoreCreditHold"))) { #optional property not found
            $IgnoreCreditHold = $null
        } else {
            $IgnoreCreditHold = $JsonParameters.PSobject.Properties["ignoreCreditHold"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "letterID"))) { #optional property not found
            $LetterID = $null
        } else {
            $LetterID = $JsonParameters.PSobject.Properties["letterID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "programType"))) { #optional property not found
            $ProgramType = $null
        } else {
            $ProgramType = $JsonParameters.PSobject.Properties["programType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isWorkOrder"))) { #optional property not found
            $IsWorkOrder = $null
        } else {
            $IsWorkOrder = $JsonParameters.PSobject.Properties["isWorkOrder"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isServiceCall"))) { #optional property not found
            $IsServiceCall = $null
        } else {
            $IsServiceCall = $JsonParameters.PSobject.Properties["isServiceCall"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sentriconServiceType"))) { #optional property not found
            $SentriconServiceType = $null
        } else {
            $SentriconServiceType = $JsonParameters.PSobject.Properties["sentriconServiceType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sentriconServiceTypeCount"))) { #optional property not found
            $SentriconServiceTypeCount = $null
        } else {
            $SentriconServiceTypeCount = $JsonParameters.PSobject.Properties["sentriconServiceTypeCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "productionParams"))) { #optional property not found
            $ProductionParams = $null
        } else {
            $ProductionParams = $JsonParameters.PSobject.Properties["productionParams"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "programCode"))) { #optional property not found
            $ProgramCode = $null
        } else {
            $ProgramCode = $JsonParameters.PSobject.Properties["programCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "doNotDefaultStartDate"))) { #optional property not found
            $DoNotDefaultStartDate = $null
        } else {
            $DoNotDefaultStartDate = $JsonParameters.PSobject.Properties["doNotDefaultStartDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canEnterTemperature"))) { #optional property not found
            $CanEnterTemperature = $null
        } else {
            $CanEnterTemperature = $JsonParameters.PSobject.Properties["canEnterTemperature"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canEnterWind"))) { #optional property not found
            $CanEnterWind = $null
        } else {
            $CanEnterWind = $JsonParameters.PSobject.Properties["canEnterWind"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canEnterPh"))) { #optional property not found
            $CanEnterPh = $null
        } else {
            $CanEnterPh = $JsonParameters.PSobject.Properties["canEnterPh"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canEnterRating"))) { #optional property not found
            $CanEnterRating = $null
        } else {
            $CanEnterRating = $JsonParameters.PSobject.Properties["canEnterRating"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canEnterConditionCodes"))) { #optional property not found
            $CanEnterConditionCodes = $null
        } else {
            $CanEnterConditionCodes = $JsonParameters.PSobject.Properties["canEnterConditionCodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canEnterSize"))) { #optional property not found
            $CanEnterSize = $null
        } else {
            $CanEnterSize = $JsonParameters.PSobject.Properties["canEnterSize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canChangeProductionPrice"))) { #optional property not found
            $CanChangeProductionPrice = $null
        } else {
            $CanChangeProductionPrice = $JsonParameters.PSobject.Properties["canChangeProductionPrice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canEnterStartTime"))) { #optional property not found
            $CanEnterStartTime = $null
        } else {
            $CanEnterStartTime = $JsonParameters.PSobject.Properties["canEnterStartTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canEnterEndTime"))) { #optional property not found
            $CanEnterEndTime = $null
        } else {
            $CanEnterEndTime = $JsonParameters.PSobject.Properties["canEnterEndTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canUseProducts"))) { #optional property not found
            $CanUseProducts = $null
        } else {
            $CanUseProducts = $JsonParameters.PSobject.Properties["canUseProducts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "preNotify"))) { #optional property not found
            $PreNotify = $null
        } else {
            $PreNotify = $JsonParameters.PSobject.Properties["preNotify"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "technicianNote"))) { #optional property not found
            $TechnicianNote = $null
        } else {
            $TechnicianNote = $JsonParameters.PSobject.Properties["technicianNote"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isEstimate"))) { #optional property not found
            $IsEstimate = $null
        } else {
            $IsEstimate = $JsonParameters.PSobject.Properties["isEstimate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isAnyBranch"))) { #optional property not found
            $IsAnyBranch = $null
        } else {
            $IsAnyBranch = $JsonParameters.PSobject.Properties["isAnyBranch"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "branchIDs"))) { #optional property not found
            $BranchIDs = $null
        } else {
            $BranchIDs = $JsonParameters.PSobject.Properties["branchIDs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "branchIDsInUse"))) { #optional property not found
            $BranchIDsInUse = $null
        } else {
            $BranchIDsInUse = $JsonParameters.PSobject.Properties["branchIDsInUse"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "branchPrices"))) { #optional property not found
            $BranchPrices = $null
        } else {
            $BranchPrices = $JsonParameters.PSobject.Properties["branchPrices"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "standardAccountResId"))) { #optional property not found
            $StandardAccountResId = $null
        } else {
            $StandardAccountResId = $JsonParameters.PSobject.Properties["standardAccountResId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "standardAccountComId"))) { #optional property not found
            $StandardAccountComId = $null
        } else {
            $StandardAccountComId = $JsonParameters.PSobject.Properties["standardAccountComId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "standardAccountResDescription"))) { #optional property not found
            $StandardAccountResDescription = $null
        } else {
            $StandardAccountResDescription = $JsonParameters.PSobject.Properties["standardAccountResDescription"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "standardAccountComDescription"))) { #optional property not found
            $StandardAccountComDescription = $null
        } else {
            $StandardAccountComDescription = $JsonParameters.PSobject.Properties["standardAccountComDescription"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "surchargeAccountResId"))) { #optional property not found
            $SurchargeAccountResId = $null
        } else {
            $SurchargeAccountResId = $JsonParameters.PSobject.Properties["surchargeAccountResId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "surchargeAccountComId"))) { #optional property not found
            $SurchargeAccountComId = $null
        } else {
            $SurchargeAccountComId = $JsonParameters.PSobject.Properties["surchargeAccountComId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "discountAccountResId"))) { #optional property not found
            $DiscountAccountResId = $null
        } else {
            $DiscountAccountResId = $JsonParameters.PSobject.Properties["discountAccountResId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "discountAccountComId"))) { #optional property not found
            $DiscountAccountComId = $null
        } else {
            $DiscountAccountComId = $JsonParameters.PSobject.Properties["discountAccountComId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prepayAccountResId"))) { #optional property not found
            $PrepayAccountResId = $null
        } else {
            $PrepayAccountResId = $JsonParameters.PSobject.Properties["prepayAccountResId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prepayAccountComId"))) { #optional property not found
            $PrepayAccountComId = $null
        } else {
            $PrepayAccountComId = $JsonParameters.PSobject.Properties["prepayAccountComId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hexForecolor"))) { #optional property not found
            $HexForecolor = $null
        } else {
            $HexForecolor = $JsonParameters.PSobject.Properties["hexForecolor"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hexBackcolor"))) { #optional property not found
            $HexBackcolor = $null
        } else {
            $HexBackcolor = $JsonParameters.PSobject.Properties["hexBackcolor"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "htmlBackcolor"))) { #optional property not found
            $HtmlBackcolor = $null
        } else {
            $HtmlBackcolor = $JsonParameters.PSobject.Properties["htmlBackcolor"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isPesticideUsed"))) { #optional property not found
            $IsPesticideUsed = $null
        } else {
            $IsPesticideUsed = $JsonParameters.PSobject.Properties["isPesticideUsed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "callAhead"))) { #optional property not found
            $CallAhead = $null
        } else {
            $CallAhead = $JsonParameters.PSobject.Properties["callAhead"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minimumDays"))) { #optional property not found
            $MinimumDays = $null
        } else {
            $MinimumDays = $JsonParameters.PSobject.Properties["minimumDays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maximumDays"))) { #optional property not found
            $MaximumDays = $null
        } else {
            $MaximumDays = $JsonParameters.PSobject.Properties["maximumDays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maximumWind"))) { #optional property not found
            $MaximumWind = $null
        } else {
            $MaximumWind = $JsonParameters.PSobject.Properties["maximumWind"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minimumTemperature"))) { #optional property not found
            $MinimumTemperature = $null
        } else {
            $MinimumTemperature = $JsonParameters.PSobject.Properties["minimumTemperature"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maximumTemperature"))) { #optional property not found
            $MaximumTemperature = $null
        } else {
            $MaximumTemperature = $JsonParameters.PSobject.Properties["maximumTemperature"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canBeProgramRound"))) { #optional property not found
            $CanBeProgramRound = $null
        } else {
            $CanBeProgramRound = $JsonParameters.PSobject.Properties["canBeProgramRound"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "canBeSpecialJob"))) { #optional property not found
            $CanBeSpecialJob = $null
        } else {
            $CanBeSpecialJob = $JsonParameters.PSobject.Properties["canBeSpecialJob"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "roundQuickFit"))) { #optional property not found
            $RoundQuickFit = $null
        } else {
            $RoundQuickFit = $JsonParameters.PSobject.Properties["roundQuickFit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "quickFitTimeWindow"))) { #optional property not found
            $QuickFitTimeWindow = $null
        } else {
            $QuickFitTimeWindow = $JsonParameters.PSobject.Properties["quickFitTimeWindow"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autopostMobile"))) { #optional property not found
            $AutopostMobile = $null
        } else {
            $AutopostMobile = $JsonParameters.PSobject.Properties["autopostMobile"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "longName" = ${LongName}
            "available" = ${Available}
            "invoiceMessage" = ${InvoiceMessage}
            "invoiceMessageShort" = ${InvoiceMessageShort}
            "priceID" = ${PriceID}
            "priceBy" = ${PriceBy}
            "isProgramService" = ${IsProgramService}
            "isSpecial" = ${IsSpecial}
            "manHourRate" = ${ManHourRate}
            "estimatedManHours" = ${EstimatedManHours}
            "basePrice" = ${BasePrice}
            "startDate" = ${StartDate}
            "ignoreCreditHold" = ${IgnoreCreditHold}
            "letterID" = ${LetterID}
            "programType" = ${ProgramType}
            "isWorkOrder" = ${IsWorkOrder}
            "isServiceCall" = ${IsServiceCall}
            "sentriconServiceType" = ${SentriconServiceType}
            "sentriconServiceTypeCount" = ${SentriconServiceTypeCount}
            "productionParams" = ${ProductionParams}
            "programCode" = ${ProgramCode}
            "doNotDefaultStartDate" = ${DoNotDefaultStartDate}
            "canEnterTemperature" = ${CanEnterTemperature}
            "canEnterWind" = ${CanEnterWind}
            "canEnterPh" = ${CanEnterPh}
            "canEnterRating" = ${CanEnterRating}
            "canEnterConditionCodes" = ${CanEnterConditionCodes}
            "canEnterSize" = ${CanEnterSize}
            "canChangeProductionPrice" = ${CanChangeProductionPrice}
            "canEnterStartTime" = ${CanEnterStartTime}
            "canEnterEndTime" = ${CanEnterEndTime}
            "canUseProducts" = ${CanUseProducts}
            "preNotify" = ${PreNotify}
            "technicianNote" = ${TechnicianNote}
            "isEstimate" = ${IsEstimate}
            "isAnyBranch" = ${IsAnyBranch}
            "branchIDs" = ${BranchIDs}
            "branchIDsInUse" = ${BranchIDsInUse}
            "branchPrices" = ${BranchPrices}
            "standardAccountResId" = ${StandardAccountResId}
            "standardAccountComId" = ${StandardAccountComId}
            "standardAccountResDescription" = ${StandardAccountResDescription}
            "standardAccountComDescription" = ${StandardAccountComDescription}
            "surchargeAccountResId" = ${SurchargeAccountResId}
            "surchargeAccountComId" = ${SurchargeAccountComId}
            "discountAccountResId" = ${DiscountAccountResId}
            "discountAccountComId" = ${DiscountAccountComId}
            "prepayAccountResId" = ${PrepayAccountResId}
            "prepayAccountComId" = ${PrepayAccountComId}
            "hexForecolor" = ${HexForecolor}
            "hexBackcolor" = ${HexBackcolor}
            "htmlBackcolor" = ${HtmlBackcolor}
            "isPesticideUsed" = ${IsPesticideUsed}
            "callAhead" = ${CallAhead}
            "minimumDays" = ${MinimumDays}
            "maximumDays" = ${MaximumDays}
            "maximumWind" = ${MaximumWind}
            "minimumTemperature" = ${MinimumTemperature}
            "maximumTemperature" = ${MaximumTemperature}
            "canBeProgramRound" = ${CanBeProgramRound}
            "canBeSpecialJob" = ${CanBeSpecialJob}
            "roundQuickFit" = ${RoundQuickFit}
            "quickFitTimeWindow" = ${QuickFitTimeWindow}
            "autopostMobile" = ${AutopostMobile}
        }

        return $PSO
    }

}

