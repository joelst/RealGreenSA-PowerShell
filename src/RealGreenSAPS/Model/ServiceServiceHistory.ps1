#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PostBy
No description available.
.PARAMETER Feedback
No description available.
.PARAMETER ActualManHours
No description available.
.PARAMETER Rating
No description available.
.PARAMETER Temperature
No description available.
.PARAMETER WindSpeed
No description available.
.PARAMETER WindDirection
No description available.
.PARAMETER Start
No description available.
.PARAMETER VarEnd
No description available.
.PARAMETER Duration
No description available.
.PARAMETER CrewSize
No description available.
.PARAMETER BillType
No description available.
.PARAMETER CompanyId
No description available.
.PARAMETER CustomerNumber
No description available.
.OUTPUTS

ServiceServiceHistory<PSCustomObject>
#>

function Initialize-RGSAServiceServiceHistory {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PostBy},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Feedback},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ActualManHours},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Rating},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Temperature},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${WindSpeed},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WindDirection},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Start},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VarEnd},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Duration},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CrewSize},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("A_CreditCard", "C_Installment", "D_ACH", "M_StatementOnly", "R_RegularInvoice")]
        [PSCustomObject]
        ${BillType},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CompanyId},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CustomerNumber}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSAServiceServiceHistory' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "postBy" = ${PostBy}
            "feedback" = ${Feedback}
            "actualManHours" = ${ActualManHours}
            "rating" = ${Rating}
            "temperature" = ${Temperature}
            "windSpeed" = ${WindSpeed}
            "windDirection" = ${WindDirection}
            "start" = ${Start}
            "end" = ${VarEnd}
            "duration" = ${Duration}
            "crewSize" = ${CrewSize}
            "billType" = ${BillType}
            "companyId" = ${CompanyId}
            "customerNumber" = ${CustomerNumber}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ServiceServiceHistory<PSCustomObject>

.DESCRIPTION

Convert from JSON to ServiceServiceHistory<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ServiceServiceHistory<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToServiceServiceHistory {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSAServiceServiceHistory' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSAServiceServiceHistory
        $AllProperties = ("postBy", "feedback", "actualManHours", "rating", "temperature", "windSpeed", "windDirection", "start", "end", "duration", "crewSize", "billType", "companyId", "customerNumber")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "postBy"))) { #optional property not found
            $PostBy = $null
        } else {
            $PostBy = $JsonParameters.PSobject.Properties["postBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "feedback"))) { #optional property not found
            $Feedback = $null
        } else {
            $Feedback = $JsonParameters.PSobject.Properties["feedback"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actualManHours"))) { #optional property not found
            $ActualManHours = $null
        } else {
            $ActualManHours = $JsonParameters.PSobject.Properties["actualManHours"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rating"))) { #optional property not found
            $Rating = $null
        } else {
            $Rating = $JsonParameters.PSobject.Properties["rating"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "temperature"))) { #optional property not found
            $Temperature = $null
        } else {
            $Temperature = $JsonParameters.PSobject.Properties["temperature"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "windSpeed"))) { #optional property not found
            $WindSpeed = $null
        } else {
            $WindSpeed = $JsonParameters.PSobject.Properties["windSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "windDirection"))) { #optional property not found
            $WindDirection = $null
        } else {
            $WindDirection = $JsonParameters.PSobject.Properties["windDirection"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "start"))) { #optional property not found
            $Start = $null
        } else {
            $Start = $JsonParameters.PSobject.Properties["start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "end"))) { #optional property not found
            $VarEnd = $null
        } else {
            $VarEnd = $JsonParameters.PSobject.Properties["end"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "duration"))) { #optional property not found
            $Duration = $null
        } else {
            $Duration = $JsonParameters.PSobject.Properties["duration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "crewSize"))) { #optional property not found
            $CrewSize = $null
        } else {
            $CrewSize = $JsonParameters.PSobject.Properties["crewSize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "billType"))) { #optional property not found
            $BillType = $null
        } else {
            $BillType = $JsonParameters.PSobject.Properties["billType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "companyId"))) { #optional property not found
            $CompanyId = $null
        } else {
            $CompanyId = $JsonParameters.PSobject.Properties["companyId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerNumber"))) { #optional property not found
            $CustomerNumber = $null
        } else {
            $CustomerNumber = $JsonParameters.PSobject.Properties["customerNumber"].value
        }

        $PSO = [PSCustomObject]@{
            "postBy" = ${PostBy}
            "feedback" = ${Feedback}
            "actualManHours" = ${ActualManHours}
            "rating" = ${Rating}
            "temperature" = ${Temperature}
            "windSpeed" = ${WindSpeed}
            "windDirection" = ${WindDirection}
            "start" = ${Start}
            "end" = ${VarEnd}
            "duration" = ${Duration}
            "crewSize" = ${CrewSize}
            "billType" = ${BillType}
            "companyId" = ${CompanyId}
            "customerNumber" = ${CustomerNumber}
        }

        return $PSO
    }

}

