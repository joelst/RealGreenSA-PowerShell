#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CustNo
No description available.
.PARAMETER Size
No description available.
.PARAMETER Route
No description available.
.PARAMETER Status
No description available.
.PARAMETER Soldby1
No description available.
.PARAMETER Reqtakenby
No description available.
.PARAMETER Billtype
No description available.
.PARAMETER Disccode
No description available.
.PARAMETER Autorenew
No description available.
.PARAMETER Technote
No description available.
.PARAMETER Custnote
No description available.
.PARAMETER Season
No description available.
.PARAMETER Sourcecd
No description available.
.PARAMETER Rejcode
No description available.
.PARAMETER Callahead
No description available.
.PARAMETER Datesold
No description available.
.PARAMETER AuditEmployeeID
No description available.
.PARAMETER Progdefid
No description available.
.OUTPUTS

SimpleProgramDTO<PSCustomObject>
#>

function Initialize-RgSaSimpleProgramDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${CustNo},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Size},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Route},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Soldby1},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Reqtakenby},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Billtype},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Disccode},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Autorenew},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Technote},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Custnote},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Season},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Sourcecd},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Rejcode},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Callahead},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Datesold},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AuditEmployeeID},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Progdefid}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaSimpleProgramDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $CustNo) {
            throw "invalid value for 'CustNo', 'CustNo' cannot be null."
        }

        if ($null -eq $Status) {
            throw "invalid value for 'Status', 'Status' cannot be null."
        }

        if ($Status.length -lt 1) {
            throw "invalid value for 'Status', the character length must be great than or equal to 1."
        }

        if ($null -eq $AuditEmployeeID) {
            throw "invalid value for 'AuditEmployeeID', 'AuditEmployeeID' cannot be null."
        }

        if ($AuditEmployeeID.length -lt 1) {
            throw "invalid value for 'AuditEmployeeID', the character length must be great than or equal to 1."
        }

        if ($null -eq $Progdefid) {
            throw "invalid value for 'Progdefid', 'Progdefid' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "cust_no" = ${CustNo}
            "size" = ${Size}
            "route" = ${Route}
            "status" = ${Status}
            "soldby1" = ${Soldby1}
            "reqtakenby" = ${Reqtakenby}
            "billtype" = ${Billtype}
            "disccode" = ${Disccode}
            "autorenew" = ${Autorenew}
            "technote" = ${Technote}
            "custnote" = ${Custnote}
            "season" = ${Season}
            "sourcecd" = ${Sourcecd}
            "rejcode" = ${Rejcode}
            "callahead" = ${Callahead}
            "datesold" = ${Datesold}
            "auditEmployeeID" = ${AuditEmployeeID}
            "progdefid" = ${Progdefid}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SimpleProgramDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to SimpleProgramDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SimpleProgramDTO<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToSimpleProgramDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaSimpleProgramDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaSimpleProgramDTO
        $AllProperties = ("cust_no", "size", "route", "status", "soldby1", "reqtakenby", "billtype", "disccode", "autorenew", "technote", "custnote", "season", "sourcecd", "rejcode", "callahead", "datesold", "auditEmployeeID", "progdefid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'cust_no' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cust_no"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cust_no' missing."
        } else {
            $CustNo = $JsonParameters.PSobject.Properties["cust_no"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) {
            throw "Error! JSON cannot be serialized due to the required property 'status' missing."
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "auditEmployeeID"))) {
            throw "Error! JSON cannot be serialized due to the required property 'auditEmployeeID' missing."
        } else {
            $AuditEmployeeID = $JsonParameters.PSobject.Properties["auditEmployeeID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "progdefid"))) {
            throw "Error! JSON cannot be serialized due to the required property 'progdefid' missing."
        } else {
            $Progdefid = $JsonParameters.PSobject.Properties["progdefid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "route"))) { #optional property not found
            $Route = $null
        } else {
            $Route = $JsonParameters.PSobject.Properties["route"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "soldby1"))) { #optional property not found
            $Soldby1 = $null
        } else {
            $Soldby1 = $JsonParameters.PSobject.Properties["soldby1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reqtakenby"))) { #optional property not found
            $Reqtakenby = $null
        } else {
            $Reqtakenby = $JsonParameters.PSobject.Properties["reqtakenby"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "billtype"))) { #optional property not found
            $Billtype = $null
        } else {
            $Billtype = $JsonParameters.PSobject.Properties["billtype"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disccode"))) { #optional property not found
            $Disccode = $null
        } else {
            $Disccode = $JsonParameters.PSobject.Properties["disccode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autorenew"))) { #optional property not found
            $Autorenew = $null
        } else {
            $Autorenew = $JsonParameters.PSobject.Properties["autorenew"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "technote"))) { #optional property not found
            $Technote = $null
        } else {
            $Technote = $JsonParameters.PSobject.Properties["technote"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custnote"))) { #optional property not found
            $Custnote = $null
        } else {
            $Custnote = $JsonParameters.PSobject.Properties["custnote"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "season"))) { #optional property not found
            $Season = $null
        } else {
            $Season = $JsonParameters.PSobject.Properties["season"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourcecd"))) { #optional property not found
            $Sourcecd = $null
        } else {
            $Sourcecd = $JsonParameters.PSobject.Properties["sourcecd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rejcode"))) { #optional property not found
            $Rejcode = $null
        } else {
            $Rejcode = $JsonParameters.PSobject.Properties["rejcode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "callahead"))) { #optional property not found
            $Callahead = $null
        } else {
            $Callahead = $JsonParameters.PSobject.Properties["callahead"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "datesold"))) { #optional property not found
            $Datesold = $null
        } else {
            $Datesold = $JsonParameters.PSobject.Properties["datesold"].value
        }

        $PSO = [PSCustomObject]@{
            "cust_no" = ${CustNo}
            "size" = ${Size}
            "route" = ${Route}
            "status" = ${Status}
            "soldby1" = ${Soldby1}
            "reqtakenby" = ${Reqtakenby}
            "billtype" = ${Billtype}
            "disccode" = ${Disccode}
            "autorenew" = ${Autorenew}
            "technote" = ${Technote}
            "custnote" = ${Custnote}
            "season" = ${Season}
            "sourcecd" = ${Sourcecd}
            "rejcode" = ${Rejcode}
            "callahead" = ${Callahead}
            "datesold" = ${Datesold}
            "auditEmployeeID" = ${AuditEmployeeID}
            "progdefid" = ${Progdefid}
        }

        return $PSO
    }

}

