#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER CompanyID
No description available.
.PARAMETER Available
No description available.
.PARAMETER Name
No description available.
.PARAMETER Direction
No description available.
.OUTPUTS

Subdivision<PSCustomObject>
#>

function Initialize-RGSASubdivision {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CompanyID},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Available},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Direction}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSASubdivision' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "companyID" = ${CompanyID}
            "available" = ${Available}
            "name" = ${Name}
            "direction" = ${Direction}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Subdivision<PSCustomObject>

.DESCRIPTION

Convert from JSON to Subdivision<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Subdivision<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToSubdivision {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSASubdivision' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSASubdivision
        $AllProperties = ("id", "companyID", "available", "name", "direction")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "companyID"))) { #optional property not found
            $CompanyID = $null
        } else {
            $CompanyID = $JsonParameters.PSobject.Properties["companyID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "available"))) { #optional property not found
            $Available = $null
        } else {
            $Available = $JsonParameters.PSobject.Properties["available"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "direction"))) { #optional property not found
            $Direction = $null
        } else {
            $Direction = $JsonParameters.PSobject.Properties["direction"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "companyID" = ${CompanyID}
            "available" = ${Available}
            "name" = ${Name}
            "direction" = ${Direction}
        }

        return $PSO
    }

}

