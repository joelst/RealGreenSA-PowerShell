#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Alternate1
No description available.
.PARAMETER Alternate2
No description available.
.PARAMETER Alternate3
No description available.
.PARAMETER Alternate4
No description available.
.PARAMETER Alternate5
No description available.
.PARAMETER Alternate6
No description available.
.OUTPUTS

SuffixAlternates<PSCustomObject>
#>

function Initialize-RGSASuffixAlternates {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Alternate1},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Alternate2},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Alternate3},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Alternate4},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Alternate5},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Alternate6}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSASuffixAlternates' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "alternate1" = ${Alternate1}
            "alternate2" = ${Alternate2}
            "alternate3" = ${Alternate3}
            "alternate4" = ${Alternate4}
            "alternate5" = ${Alternate5}
            "alternate6" = ${Alternate6}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SuffixAlternates<PSCustomObject>

.DESCRIPTION

Convert from JSON to SuffixAlternates<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SuffixAlternates<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToSuffixAlternates {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSASuffixAlternates' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSASuffixAlternates
        $AllProperties = ("alternate1", "alternate2", "alternate3", "alternate4", "alternate5", "alternate6")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "alternate1"))) { #optional property not found
            $Alternate1 = $null
        } else {
            $Alternate1 = $JsonParameters.PSobject.Properties["alternate1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "alternate2"))) { #optional property not found
            $Alternate2 = $null
        } else {
            $Alternate2 = $JsonParameters.PSobject.Properties["alternate2"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "alternate3"))) { #optional property not found
            $Alternate3 = $null
        } else {
            $Alternate3 = $JsonParameters.PSobject.Properties["alternate3"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "alternate4"))) { #optional property not found
            $Alternate4 = $null
        } else {
            $Alternate4 = $JsonParameters.PSobject.Properties["alternate4"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "alternate5"))) { #optional property not found
            $Alternate5 = $null
        } else {
            $Alternate5 = $JsonParameters.PSobject.Properties["alternate5"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "alternate6"))) { #optional property not found
            $Alternate6 = $null
        } else {
            $Alternate6 = $JsonParameters.PSobject.Properties["alternate6"].value
        }

        $PSO = [PSCustomObject]@{
            "alternate1" = ${Alternate1}
            "alternate2" = ${Alternate2}
            "alternate3" = ${Alternate3}
            "alternate4" = ${Alternate4}
            "alternate5" = ${Alternate5}
            "alternate6" = ${Alternate6}
        }

        return $PSO
    }

}

