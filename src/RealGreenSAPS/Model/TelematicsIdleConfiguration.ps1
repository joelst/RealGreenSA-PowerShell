#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER MinIdleTimeSec
No description available.
.PARAMETER MinIdleSpeedKmh
No description available.
.PARAMETER DetectStopMaxSpeedKmh
No description available.
.PARAMETER MaxRadiusMeters
No description available.
.OUTPUTS

TelematicsIdleConfiguration<PSCustomObject>
#>

function Initialize-RgSaTelematicsIdleConfiguration {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MinIdleTimeSec},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MinIdleSpeedKmh},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DetectStopMaxSpeedKmh},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaxRadiusMeters}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaTelematicsIdleConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "minIdleTimeSec" = ${MinIdleTimeSec}
            "minIdleSpeedKmh" = ${MinIdleSpeedKmh}
            "detectStopMaxSpeedKmh" = ${DetectStopMaxSpeedKmh}
            "maxRadiusMeters" = ${MaxRadiusMeters}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TelematicsIdleConfiguration<PSCustomObject>

.DESCRIPTION

Convert from JSON to TelematicsIdleConfiguration<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TelematicsIdleConfiguration<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToTelematicsIdleConfiguration {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaTelematicsIdleConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaTelematicsIdleConfiguration
        $AllProperties = ("minIdleTimeSec", "minIdleSpeedKmh", "detectStopMaxSpeedKmh", "maxRadiusMeters")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minIdleTimeSec"))) { #optional property not found
            $MinIdleTimeSec = $null
        } else {
            $MinIdleTimeSec = $JsonParameters.PSobject.Properties["minIdleTimeSec"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minIdleSpeedKmh"))) { #optional property not found
            $MinIdleSpeedKmh = $null
        } else {
            $MinIdleSpeedKmh = $JsonParameters.PSobject.Properties["minIdleSpeedKmh"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "detectStopMaxSpeedKmh"))) { #optional property not found
            $DetectStopMaxSpeedKmh = $null
        } else {
            $DetectStopMaxSpeedKmh = $JsonParameters.PSobject.Properties["detectStopMaxSpeedKmh"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxRadiusMeters"))) { #optional property not found
            $MaxRadiusMeters = $null
        } else {
            $MaxRadiusMeters = $JsonParameters.PSobject.Properties["maxRadiusMeters"].value
        }

        $PSO = [PSCustomObject]@{
            "minIdleTimeSec" = ${MinIdleTimeSec}
            "minIdleSpeedKmh" = ${MinIdleSpeedKmh}
            "detectStopMaxSpeedKmh" = ${DetectStopMaxSpeedKmh}
            "maxRadiusMeters" = ${MaxRadiusMeters}
        }

        return $PSO
    }

}

