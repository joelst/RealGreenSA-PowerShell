#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER GpsProcessorHost
No description available.
.PARAMETER RemoteDeviceKey
No description available.
.PARAMETER RemoteDeviceId
No description available.
.PARAMETER Token
No description available.
.PARAMETER TenantSourceId
No description available.
.PARAMETER VirtualOdometer
No description available.
.PARAMETER IdleConfiguration
No description available.
.PARAMETER TrackingConfiguration
No description available.
.PARAMETER TrackingTime
No description available.
.OUTPUTS

TelematicsMobileTokenResponseModel<PSCustomObject>
#>

function Initialize-RGSATelematicsMobileTokenResponseModel {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GpsProcessorHost},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemoteDeviceKey},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemoteDeviceId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Token},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TenantSourceId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${VirtualOdometer},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IdleConfiguration},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${TrackingConfiguration},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${TrackingTime}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSATelematicsMobileTokenResponseModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "gpsProcessorHost" = ${GpsProcessorHost}
            "remoteDeviceKey" = ${RemoteDeviceKey}
            "remoteDeviceId" = ${RemoteDeviceId}
            "token" = ${Token}
            "tenantSourceId" = ${TenantSourceId}
            "virtualOdometer" = ${VirtualOdometer}
            "idleConfiguration" = ${IdleConfiguration}
            "trackingConfiguration" = ${TrackingConfiguration}
            "trackingTime" = ${TrackingTime}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TelematicsMobileTokenResponseModel<PSCustomObject>

.DESCRIPTION

Convert from JSON to TelematicsMobileTokenResponseModel<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TelematicsMobileTokenResponseModel<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToTelematicsMobileTokenResponseModel {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSATelematicsMobileTokenResponseModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSATelematicsMobileTokenResponseModel
        $AllProperties = ("gpsProcessorHost", "remoteDeviceKey", "remoteDeviceId", "token", "tenantSourceId", "virtualOdometer", "idleConfiguration", "trackingConfiguration", "trackingTime")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "gpsProcessorHost"))) { #optional property not found
            $GpsProcessorHost = $null
        } else {
            $GpsProcessorHost = $JsonParameters.PSobject.Properties["gpsProcessorHost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remoteDeviceKey"))) { #optional property not found
            $RemoteDeviceKey = $null
        } else {
            $RemoteDeviceKey = $JsonParameters.PSobject.Properties["remoteDeviceKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remoteDeviceId"))) { #optional property not found
            $RemoteDeviceId = $null
        } else {
            $RemoteDeviceId = $JsonParameters.PSobject.Properties["remoteDeviceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "token"))) { #optional property not found
            $Token = $null
        } else {
            $Token = $JsonParameters.PSobject.Properties["token"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenantSourceId"))) { #optional property not found
            $TenantSourceId = $null
        } else {
            $TenantSourceId = $JsonParameters.PSobject.Properties["tenantSourceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "virtualOdometer"))) { #optional property not found
            $VirtualOdometer = $null
        } else {
            $VirtualOdometer = $JsonParameters.PSobject.Properties["virtualOdometer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "idleConfiguration"))) { #optional property not found
            $IdleConfiguration = $null
        } else {
            $IdleConfiguration = $JsonParameters.PSobject.Properties["idleConfiguration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "trackingConfiguration"))) { #optional property not found
            $TrackingConfiguration = $null
        } else {
            $TrackingConfiguration = $JsonParameters.PSobject.Properties["trackingConfiguration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "trackingTime"))) { #optional property not found
            $TrackingTime = $null
        } else {
            $TrackingTime = $JsonParameters.PSobject.Properties["trackingTime"].value
        }

        $PSO = [PSCustomObject]@{
            "gpsProcessorHost" = ${GpsProcessorHost}
            "remoteDeviceKey" = ${RemoteDeviceKey}
            "remoteDeviceId" = ${RemoteDeviceId}
            "token" = ${Token}
            "tenantSourceId" = ${TenantSourceId}
            "virtualOdometer" = ${VirtualOdometer}
            "idleConfiguration" = ${IdleConfiguration}
            "trackingConfiguration" = ${TrackingConfiguration}
            "trackingTime" = ${TrackingTime}
        }

        return $PSO
    }

}

