#
# Real Green Service Assistant Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER MoveSampleIntervalSec
No description available.
.PARAMETER IdleSampleIntervalSec
No description available.
.PARAMETER CompassDegrees
No description available.
.PARAMETER SquashingIntervalSec
No description available.
.OUTPUTS

TelematicsTrackingConfiguration<PSCustomObject>
#>

function Initialize-RGSATelematicsTrackingConfiguration {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MoveSampleIntervalSec},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${IdleSampleIntervalSec},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CompassDegrees},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SquashingIntervalSec}
    )

    Process {
        'Creating PSCustomObject: RealGreenSaPS => RGSATelematicsTrackingConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "moveSampleIntervalSec" = ${MoveSampleIntervalSec}
            "idleSampleIntervalSec" = ${IdleSampleIntervalSec}
            "compassDegrees" = ${CompassDegrees}
            "squashingIntervalSec" = ${SquashingIntervalSec}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TelematicsTrackingConfiguration<PSCustomObject>

.DESCRIPTION

Convert from JSON to TelematicsTrackingConfiguration<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TelematicsTrackingConfiguration<PSCustomObject>
#>
function ConvertFrom-RGSAJsonToTelematicsTrackingConfiguration {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSaPS => RGSATelematicsTrackingConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RGSATelematicsTrackingConfiguration
        $AllProperties = ("moveSampleIntervalSec", "idleSampleIntervalSec", "compassDegrees", "squashingIntervalSec")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "moveSampleIntervalSec"))) { #optional property not found
            $MoveSampleIntervalSec = $null
        } else {
            $MoveSampleIntervalSec = $JsonParameters.PSobject.Properties["moveSampleIntervalSec"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "idleSampleIntervalSec"))) { #optional property not found
            $IdleSampleIntervalSec = $null
        } else {
            $IdleSampleIntervalSec = $JsonParameters.PSobject.Properties["idleSampleIntervalSec"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "compassDegrees"))) { #optional property not found
            $CompassDegrees = $null
        } else {
            $CompassDegrees = $JsonParameters.PSobject.Properties["compassDegrees"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "squashingIntervalSec"))) { #optional property not found
            $SquashingIntervalSec = $null
        } else {
            $SquashingIntervalSec = $JsonParameters.PSobject.Properties["squashingIntervalSec"].value
        }

        $PSO = [PSCustomObject]@{
            "moveSampleIntervalSec" = ${MoveSampleIntervalSec}
            "idleSampleIntervalSec" = ${IdleSampleIntervalSec}
            "compassDegrees" = ${CompassDegrees}
            "squashingIntervalSec" = ${SquashingIntervalSec}
        }

        return $PSO
    }

}

