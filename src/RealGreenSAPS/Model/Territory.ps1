#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER CompanyID
No description available.
.PARAMETER BackgroundColor
No description available.
.PARAMETER ForegroundColor
No description available.
.PARAMETER Available
No description available.
.PARAMETER Description
No description available.
.PARAMETER Direction
No description available.
.OUTPUTS

Territory<PSCustomObject>
#>

function Initialize-RgSaTerritory {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CompanyID},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${BackgroundColor},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ForegroundColor},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Available},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Direction}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaTerritory' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "companyID" = ${CompanyID}
            "backgroundColor" = ${BackgroundColor}
            "foregroundColor" = ${ForegroundColor}
            "available" = ${Available}
            "description" = ${Description}
            "direction" = ${Direction}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Territory<PSCustomObject>

.DESCRIPTION

Convert from JSON to Territory<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Territory<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToTerritory {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaTerritory' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaTerritory
        $AllProperties = ("id", "companyID", "backgroundColor", "foregroundColor", "available", "description", "direction")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "companyID"))) { #optional property not found
            $CompanyID = $null
        } else {
            $CompanyID = $JsonParameters.PSobject.Properties["companyID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "backgroundColor"))) { #optional property not found
            $BackgroundColor = $null
        } else {
            $BackgroundColor = $JsonParameters.PSobject.Properties["backgroundColor"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "foregroundColor"))) { #optional property not found
            $ForegroundColor = $null
        } else {
            $ForegroundColor = $JsonParameters.PSobject.Properties["foregroundColor"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "available"))) { #optional property not found
            $Available = $null
        } else {
            $Available = $JsonParameters.PSobject.Properties["available"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "direction"))) { #optional property not found
            $Direction = $null
        } else {
            $Direction = $JsonParameters.PSobject.Properties["direction"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "companyID" = ${CompanyID}
            "backgroundColor" = ${BackgroundColor}
            "foregroundColor" = ${ForegroundColor}
            "available" = ${Available}
            "description" = ${Description}
            "direction" = ${Direction}
        }

        return $PSO
    }

}

