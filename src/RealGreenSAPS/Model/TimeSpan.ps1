#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Ticks
No description available.
.PARAMETER Days
No description available.
.PARAMETER Hours
No description available.
.PARAMETER Milliseconds
No description available.
.PARAMETER Minutes
No description available.
.PARAMETER Seconds
No description available.
.PARAMETER TotalDays
No description available.
.PARAMETER TotalHours
No description available.
.PARAMETER TotalMilliseconds
No description available.
.PARAMETER TotalMinutes
No description available.
.PARAMETER TotalSeconds
No description available.
.OUTPUTS

TimeSpan<PSCustomObject>
#>

function Initialize-RgSaTimeSpan {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Ticks},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Days},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Hours},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Milliseconds},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Minutes},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Seconds},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${TotalDays},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${TotalHours},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${TotalMilliseconds},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${TotalMinutes},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${TotalSeconds}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaTimeSpan' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "ticks" = ${Ticks}
            "days" = ${Days}
            "hours" = ${Hours}
            "milliseconds" = ${Milliseconds}
            "minutes" = ${Minutes}
            "seconds" = ${Seconds}
            "totalDays" = ${TotalDays}
            "totalHours" = ${TotalHours}
            "totalMilliseconds" = ${TotalMilliseconds}
            "totalMinutes" = ${TotalMinutes}
            "totalSeconds" = ${TotalSeconds}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TimeSpan<PSCustomObject>

.DESCRIPTION

Convert from JSON to TimeSpan<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TimeSpan<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToTimeSpan {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaTimeSpan' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaTimeSpan
        $AllProperties = ("ticks", "days", "hours", "milliseconds", "minutes", "seconds", "totalDays", "totalHours", "totalMilliseconds", "totalMinutes", "totalSeconds")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ticks"))) { #optional property not found
            $Ticks = $null
        } else {
            $Ticks = $JsonParameters.PSobject.Properties["ticks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "days"))) { #optional property not found
            $Days = $null
        } else {
            $Days = $JsonParameters.PSobject.Properties["days"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hours"))) { #optional property not found
            $Hours = $null
        } else {
            $Hours = $JsonParameters.PSobject.Properties["hours"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "milliseconds"))) { #optional property not found
            $Milliseconds = $null
        } else {
            $Milliseconds = $JsonParameters.PSobject.Properties["milliseconds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minutes"))) { #optional property not found
            $Minutes = $null
        } else {
            $Minutes = $JsonParameters.PSobject.Properties["minutes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "seconds"))) { #optional property not found
            $Seconds = $null
        } else {
            $Seconds = $JsonParameters.PSobject.Properties["seconds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalDays"))) { #optional property not found
            $TotalDays = $null
        } else {
            $TotalDays = $JsonParameters.PSobject.Properties["totalDays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalHours"))) { #optional property not found
            $TotalHours = $null
        } else {
            $TotalHours = $JsonParameters.PSobject.Properties["totalHours"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalMilliseconds"))) { #optional property not found
            $TotalMilliseconds = $null
        } else {
            $TotalMilliseconds = $JsonParameters.PSobject.Properties["totalMilliseconds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalMinutes"))) { #optional property not found
            $TotalMinutes = $null
        } else {
            $TotalMinutes = $JsonParameters.PSobject.Properties["totalMinutes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalSeconds"))) { #optional property not found
            $TotalSeconds = $null
        } else {
            $TotalSeconds = $JsonParameters.PSobject.Properties["totalSeconds"].value
        }

        $PSO = [PSCustomObject]@{
            "ticks" = ${Ticks}
            "days" = ${Days}
            "hours" = ${Hours}
            "milliseconds" = ${Milliseconds}
            "minutes" = ${Minutes}
            "seconds" = ${Seconds}
            "totalDays" = ${TotalDays}
            "totalHours" = ${TotalHours}
            "totalMilliseconds" = ${TotalMilliseconds}
            "totalMinutes" = ${TotalMinutes}
            "totalSeconds" = ${TotalSeconds}
        }

        return $PSO
    }

}

