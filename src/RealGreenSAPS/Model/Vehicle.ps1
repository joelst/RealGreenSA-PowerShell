#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Description
No description available.
.PARAMETER Make
No description available.
.PARAMETER Model
No description available.
.PARAMETER Year
No description available.
.PARAMETER LicenseNumber
No description available.
.PARAMETER LicenseExpiration
No description available.
.PARAMETER Odometer
No description available.
.PARAMETER DateInService
No description available.
.PARAMETER DateRetired
No description available.
.PARAMETER Note
No description available.
.PARAMETER Available
No description available.
.PARAMETER Vin
No description available.
.PARAMETER CompanyID
No description available.
.PARAMETER ApparatusLicense
No description available.
.PARAMETER ApparatusLicenseExpiration
No description available.
.OUTPUTS

Vehicle<PSCustomObject>
#>

function Initialize-RgSaVehicle {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Make},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Model},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Year},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LicenseNumber},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LicenseExpiration},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Odometer},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateInService},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateRetired},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Note},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Available},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Vin},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CompanyID},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApparatusLicense},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ApparatusLicenseExpiration}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaVehicle' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "description" = ${Description}
            "make" = ${Make}
            "model" = ${Model}
            "year" = ${Year}
            "licenseNumber" = ${LicenseNumber}
            "licenseExpiration" = ${LicenseExpiration}
            "odometer" = ${Odometer}
            "dateInService" = ${DateInService}
            "dateRetired" = ${DateRetired}
            "note" = ${Note}
            "available" = ${Available}
            "vin" = ${Vin}
            "companyID" = ${CompanyID}
            "apparatusLicense" = ${ApparatusLicense}
            "apparatusLicenseExpiration" = ${ApparatusLicenseExpiration}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Vehicle<PSCustomObject>

.DESCRIPTION

Convert from JSON to Vehicle<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Vehicle<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToVehicle {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaVehicle' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaVehicle
        $AllProperties = ("id", "description", "make", "model", "year", "licenseNumber", "licenseExpiration", "odometer", "dateInService", "dateRetired", "note", "available", "vin", "companyID", "apparatusLicense", "apparatusLicenseExpiration")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "make"))) { #optional property not found
            $Make = $null
        } else {
            $Make = $JsonParameters.PSobject.Properties["make"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "model"))) { #optional property not found
            $Model = $null
        } else {
            $Model = $JsonParameters.PSobject.Properties["model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "year"))) { #optional property not found
            $Year = $null
        } else {
            $Year = $JsonParameters.PSobject.Properties["year"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "licenseNumber"))) { #optional property not found
            $LicenseNumber = $null
        } else {
            $LicenseNumber = $JsonParameters.PSobject.Properties["licenseNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "licenseExpiration"))) { #optional property not found
            $LicenseExpiration = $null
        } else {
            $LicenseExpiration = $JsonParameters.PSobject.Properties["licenseExpiration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "odometer"))) { #optional property not found
            $Odometer = $null
        } else {
            $Odometer = $JsonParameters.PSobject.Properties["odometer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateInService"))) { #optional property not found
            $DateInService = $null
        } else {
            $DateInService = $JsonParameters.PSobject.Properties["dateInService"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateRetired"))) { #optional property not found
            $DateRetired = $null
        } else {
            $DateRetired = $JsonParameters.PSobject.Properties["dateRetired"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "note"))) { #optional property not found
            $Note = $null
        } else {
            $Note = $JsonParameters.PSobject.Properties["note"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "available"))) { #optional property not found
            $Available = $null
        } else {
            $Available = $JsonParameters.PSobject.Properties["available"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vin"))) { #optional property not found
            $Vin = $null
        } else {
            $Vin = $JsonParameters.PSobject.Properties["vin"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "companyID"))) { #optional property not found
            $CompanyID = $null
        } else {
            $CompanyID = $JsonParameters.PSobject.Properties["companyID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "apparatusLicense"))) { #optional property not found
            $ApparatusLicense = $null
        } else {
            $ApparatusLicense = $JsonParameters.PSobject.Properties["apparatusLicense"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "apparatusLicenseExpiration"))) { #optional property not found
            $ApparatusLicenseExpiration = $null
        } else {
            $ApparatusLicenseExpiration = $JsonParameters.PSobject.Properties["apparatusLicenseExpiration"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "description" = ${Description}
            "make" = ${Make}
            "model" = ${Model}
            "year" = ${Year}
            "licenseNumber" = ${LicenseNumber}
            "licenseExpiration" = ${LicenseExpiration}
            "odometer" = ${Odometer}
            "dateInService" = ${DateInService}
            "dateRetired" = ${DateRetired}
            "note" = ${Note}
            "available" = ${Available}
            "vin" = ${Vin}
            "companyID" = ${CompanyID}
            "apparatusLicense" = ${ApparatusLicense}
            "apparatusLicenseExpiration" = ${ApparatusLicenseExpiration}
        }

        return $PSO
    }

}

