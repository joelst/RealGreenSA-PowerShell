#
# RGS Common API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v01
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CompanyIDs
No description available.
.PARAMETER ProgramDefinitionIDs
No description available.
.PARAMETER EmployeeIds
No description available.
.PARAMETER Seasons
No description available.
.PARAMETER CustomerType
No description available.
.PARAMETER DateBasedOn
No description available.
.PARAMETER DateRange
No description available.
.PARAMETER IncludeReversedServices
No description available.
.OUTPUTS

WeeklyProductivitySearchCriteriaAPI<PSCustomObject>
#>

function Initialize-RgSaWeeklyProductivitySearchCriteriaAPI {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${CompanyIDs},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${ProgramDefinitionIDs},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${EmployeeIds},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Seasons},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomerType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("SoldDate", "ConfirmDate", "EstimateRequestedDate", "ScheduleDate", "EstimateGivenDate", "PrintedDate")]
        [PSCustomObject]
        ${DateBasedOn},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DateRange},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IncludeReversedServices}
    )

    Process {
        'Creating PSCustomObject: RealGreenSAPS => RgSaWeeklyProductivitySearchCriteriaAPI' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "companyIDs" = ${CompanyIDs}
            "programDefinitionIDs" = ${ProgramDefinitionIDs}
            "employeeIds" = ${EmployeeIds}
            "seasons" = ${Seasons}
            "customerType" = ${CustomerType}
            "dateBasedOn" = ${DateBasedOn}
            "dateRange" = ${DateRange}
            "includeReversedServices" = ${IncludeReversedServices}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WeeklyProductivitySearchCriteriaAPI<PSCustomObject>

.DESCRIPTION

Convert from JSON to WeeklyProductivitySearchCriteriaAPI<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WeeklyProductivitySearchCriteriaAPI<PSCustomObject>
#>
function ConvertFrom-RgSaJsonToWeeklyProductivitySearchCriteriaAPI {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: RealGreenSAPS => RgSaWeeklyProductivitySearchCriteriaAPI' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RgSaWeeklyProductivitySearchCriteriaAPI
        $AllProperties = ("companyIDs", "programDefinitionIDs", "employeeIds", "seasons", "customerType", "dateBasedOn", "dateRange", "includeReversedServices")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "companyIDs"))) { #optional property not found
            $CompanyIDs = $null
        } else {
            $CompanyIDs = $JsonParameters.PSobject.Properties["companyIDs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "programDefinitionIDs"))) { #optional property not found
            $ProgramDefinitionIDs = $null
        } else {
            $ProgramDefinitionIDs = $JsonParameters.PSobject.Properties["programDefinitionIDs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "employeeIds"))) { #optional property not found
            $EmployeeIds = $null
        } else {
            $EmployeeIds = $JsonParameters.PSobject.Properties["employeeIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "seasons"))) { #optional property not found
            $Seasons = $null
        } else {
            $Seasons = $JsonParameters.PSobject.Properties["seasons"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerType"))) { #optional property not found
            $CustomerType = $null
        } else {
            $CustomerType = $JsonParameters.PSobject.Properties["customerType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateBasedOn"))) { #optional property not found
            $DateBasedOn = $null
        } else {
            $DateBasedOn = $JsonParameters.PSobject.Properties["dateBasedOn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateRange"))) { #optional property not found
            $DateRange = $null
        } else {
            $DateRange = $JsonParameters.PSobject.Properties["dateRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "includeReversedServices"))) { #optional property not found
            $IncludeReversedServices = $null
        } else {
            $IncludeReversedServices = $JsonParameters.PSobject.Properties["includeReversedServices"].value
        }

        $PSO = [PSCustomObject]@{
            "companyIDs" = ${CompanyIDs}
            "programDefinitionIDs" = ${ProgramDefinitionIDs}
            "employeeIds" = ${EmployeeIds}
            "seasons" = ${Seasons}
            "customerType" = ${CustomerType}
            "dateBasedOn" = ${DateBasedOn}
            "dateRange" = ${DateRange}
            "includeReversedServices" = ${IncludeReversedServices}
        }

        return $PSO
    }

}

